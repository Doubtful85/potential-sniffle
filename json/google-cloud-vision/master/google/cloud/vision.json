{"id":"google/cloud/vision","name":"Vision","title":["Google","Cloud","Vision"],"description":"<h1 id=\"google-cloud-vision\">Google Cloud Vision</h1>\n\n<p>Google Cloud Vision allows developers to easily integrate vision\ndetection features within applications, including image labeling, face\nand landmark detection, optical character recognition (OCR), and tagging\nof explicit content.</p>\n\n<p>For more information about Cloud Vision, read the <a href=\"https://cloud.google.com/vision/docs/\">Google Cloud Vision API\nDocumentation</a>.</p>\n\n<p>The goal of google-cloud is to provide an API that is comfortable to\nRubyists. Your authentication credentials are detected automatically in\nGoogle Cloud Platform environments such as Google Compute Engine, Google\nApp Engine and Google Kubernetes Engine. In other environments you can\nconfigure authentication easily, either directly in your code or via\nenvironment variables. Read more about the options for connecting in the\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>\n\n<h2 id=\"enabling-logging\">Enabling Logging</h2>\n\n<p>To enable logging for this library, set the logger for the underlying\n<a href=\"https://github.com/grpc/grpc/tree/master/src/ruby\">gRPC</a> library. The\nlogger that you set may be a Ruby stdlib\n<a href=\"https://ruby-doc.org/stdlib-2.5.0/libdoc/logger/rdoc/Logger.html\"><code>Logger</code></a>\nas shown below, or a\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/google-cloud-logging/latest/google/cloud/logging/logger\"><code>Google::Cloud::Logging::Logger</code></a>\nthat will write logs to <a href=\"https://cloud.google.com/logging/\">Stackdriver\nLogging</a>. See\n<a href=\"https://github.com/grpc/grpc/blob/master/src/ruby/lib/grpc/logconfig.rb\">grpc/logconfig.rb</a>\nand the gRPC\n<a href=\"https://github.com/grpc/grpc/blob/master/src/ruby/spec/spec_helper.rb\">spec_helper.rb</a>\nfor additional information.</p>\n\n<p>Configuring a Ruby stdlib logger:</p>\n\n<pre><code class=\"language-ruby\">require \"logger\"\n\nmodule MyLogger\n  LOGGER = Logger.new $stderr, level: Logger::WARN\n  def logger\n    LOGGER\n  end\nend\n\n# Define a gRPC module-level logger method before grpc/logconfig.rb loads.\nmodule GRPC\n  extend MyLogger\nend\n</code></pre>\n\n<h2 id=\"creating-images\">Creating images</h2>\n\n<p>The Cloud Vision API supports UTF-8, UTF-16, and UTF-32 text encodings.\n(Ruby uses UTF-8 natively, which is the default sent to the API, so unless\nyou’re working with text processed in different platform, you should not\nneed to set the encoding type.)\na ). Be aware that Cloud Vision sets upper\nlimits on file size as well as on the total combined size of all images in\na request. Reducing your file size can significantly improve throughput;\nhowever, be careful not to reduce image quality in the process. See <a href=\"https://cloud.google.com/vision/docs/best-practices#image_sizing\">Best\nPractices - Image\nSizing</a>\nfor current file size limits.</p>\n\n<p>Use <a data-custom-type=\"google/cloud/vision/project\" data-method=\"image-instance\">Vision::Project#image</a> to create images for the Cloud Vision service.\nYou can provide a file path:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nimage = vision.image \"path/to/landmark.jpg\"\n</code></pre>\n\n<p>Or any publicly-accessible image HTTP/HTTPS URL:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nimage = vision.image \"https://www.example.com/images/landmark.jpg\"\n</code></pre>\n\n<p>Or, you can initialize the image with a Google Cloud Storage URI:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nimage = vision.image \"gs://bucket-name/path_to_image_object\"\n</code></pre>\n\n<p>Creating an Image instance does not perform an API request.</p>\n\n<h2 id=\"annotating-images\">Annotating images</h2>\n\n<p>The instance methods on <a data-custom-type=\"google/cloud/vision/image\">Vision::Image</a> invoke Cloud Vision’s detection\nfeatures individually. Each method call makes an API request. (If you want\nto run multiple features in a single request, see the examples for\n<a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Vision::Project#annotate</a>, below.)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nimage = vision.image \"path/to/face.jpg\"\n\nface = image.face\n\nface.features.to_h.count #=&gt; 9\nface.features.eyes.left.pupil\n#&lt;Landmark (x: 190.41544, y: 84.4557, z: -1.3682901)&gt;\nface.features.chin.center\n#&lt;Landmark (x: 233.21977, y: 189.47475, z: 19.487228)&gt;\n</code></pre>\n\n<p>To run multiple features on an image in a single request, pass the image\n(or a string file path, publicly-accessible image HTTP/HTTPS URL, or\nStorage URI) to <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Vision::Project#annotate</a>:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nimage = vision.image \"path/to/face.jpg\"\n\nannotation = vision.annotate image, faces: true, labels: true\nannotation.faces.count #=&gt; 1\nannotation.labels.count #=&gt; 4\n</code></pre>\n\n<p>You can also perform detection tasks on multiple images in a single\nrequest:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nface_image = vision.image \"path/to/face.jpg\"\nlandmark_image = vision.image \"path/to/landmark.jpg\"\n\nannotations = vision.annotate face_image,\n                              landmark_image,\n                              faces: true,\n                              landmarks: true,\n                              labels: true\n\nannotations[0].faces.count #=&gt; 1\nannotations[0].landmarks.count #=&gt; 0\nannotations[0].labels.count #=&gt; 4\nannotations[1].faces.count #=&gt; 1\nannotations[1].landmarks.count #=&gt; 1\nannotations[1].labels.count #=&gt; 6\n</code></pre>\n\n<p>It is even possible to configure different features for multiple images in\na single call using a block. The following example results in a single\nrequest to the Cloud Vision API:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nface_image = vision.image \"path/to/face.jpg\"\nlandmark_image = vision.image \"path/to/landmark.jpg\"\ntext_image = vision.image \"path/to/text.png\"\n\nannotations = vision.annotate do |annotate|\n   annotate.annotate face_image, faces: true, labels: true\n   annotate.annotate landmark_image, landmarks: true\n   annotate.annotate text_image, text: true\nend\n\nannotations[0].faces.count #=&gt; 1\nannotations[0].labels.count #=&gt; 4\nannotations[1].landmarks.count #=&gt; 1\nannotations[2].text.pages.count #=&gt; 1\n</code></pre>\n\n<p>The maximum number of results returned when performing face, landmark,\nlogo, and label detection are defined by\nGoogle::Cloud::Vision.default_max_faces,\nGoogle::Cloud::Vision.default_max_landmarks,\nGoogle::Cloud::Vision.default_max_logos, and\nGoogle::Cloud::Vision.default_max_labels, respectively. To change the\nglobal defaults, you can update the configuration:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nGoogle::Cloud::Vision.default_max_faces = 1\n\nannotation = vision.annotate \"path/to/face.jpg\", faces: true\nannotation.faces.count #=&gt; 1\n</code></pre>\n\n<p>Or, to override a default for a single method call, simply pass an\ninteger instead of a flag:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nimage = vision.image \"path/to/face.jpg\"\n\n# Return just one face.\nannotation = vision.annotate image, faces: 1\n# Return up to 5 faces.\nannotation = vision.annotate image, faces: 5\n</code></pre>\n\n<h2 id=\"configuring-timeout\">Configuring timeout</h2>\n\n<p>You can configure the request <code>timeout</code> value in seconds.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new timeout: 120\n</code></pre>","source":"google-cloud-vision/lib/google/cloud/vision.rb#L257","resources":[],"examples":[],"methods":[{"id":"default_max_faces=-class","type":"class","name":"default_max_faces=","title":["Google","Cloud","Vision.default_max_faces="],"description":"<p>The default max results to return for facial detection requests. This\nis used on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a> as well as <a data-custom-type=\"google/cloud/vision/image\" data-method=\"faces-instance\">Image#faces</a>.</p>\n\n<p>The default value is <code>100</code>.</p>\n\n<p>This is also available on the configuration as\n<code>Google::Cloud::Vision.configure.default_max_faces</code></p>","source":"google-cloud-vision/lib/google/cloud/vision.rb#L315","resources":[],"examples":[{"caption":"<p>Using the default setting on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nGoogle::Cloud::Vision.default_max_faces #=> 100\n\nannotation = vision.annotate \"path/to/faces.jpg\", faces: true\n# This is the same as calling\n# annotation = vision.annotate \"path/to/faces.jpg\", faces: 100"},{"caption":"<p>Updating the default setting on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\n# Set a new default\nGoogle::Cloud::Vision.default_max_faces = 5\n\nannotation = vision.annotate \"path/to/faces.jpg\", faces: true\n# This is the same as calling\n# annotation = vision.annotate \"path/to/faces.jpg\", faces: 5"},{"caption":"<p>Using the default setting on <a data-custom-type=\"google/cloud/vision/image\" data-method=\"faces-instance\">Image#faces</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nGoogle::Cloud::Vision.default_max_faces #=> 100\n\nfaces = vision.image(\"path/to/faces.jpg\").faces\n# This is the same as calling\n# faces = vision.image(\"path/to/faces.jpg\").faces 100"},{"caption":"<p>Updating the default setting on <a data-custom-type=\"google/cloud/vision/image\" data-method=\"faces-instance\">Image#faces</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\n# Set a new default\nGoogle::Cloud::Vision.default_max_faces = 5\n\nfaces = vision.image(\"path/to/faces.jpg\").faces\n# This is the same as calling\n# faces = vision.image(\"path/to/faces.jpg\").faces 5"}],"params":[],"exceptions":[],"returns":[]},{"id":"default_max_faces-class","type":"class","name":"default_max_faces","title":["Google","Cloud","Vision.default_max_faces"],"description":"<p>The default max results to return for face detection requests.</p>","source":"google-cloud-vision/lib/google/cloud/vision.rb#L322","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"default_max_landmarks=-class","type":"class","name":"default_max_landmarks=","title":["Google","Cloud","Vision.default_max_landmarks="],"description":"<p>The default max results to return for landmark detection requests.\nThis is used on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a> as well as <a data-custom-type=\"google/cloud/vision/image\" data-method=\"landmarks-instance\">Image#landmarks</a>.</p>\n\n<p>The default value is 100.</p>\n\n<p>This is also available on the configuration as\n<code>Google::Cloud::Vision.configure.default_max_landmarks</code></p>","source":"google-cloud-vision/lib/google/cloud/vision.rb#L384","resources":[],"examples":[{"caption":"<p>Using the default setting on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nGoogle::Cloud::Vision.default_max_landmarks #=> 100\n\nimg = \"path/to/landmarks.jpg\"\nannotation = vision.annotate img, landmarks: true\n# This is the same as calling\n# annotation = vision.annotate img, landmarks: 100"},{"caption":"<p>Updating the default setting on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\n# Set a new default\nGoogle::Cloud::Vision.default_max_landmarks = 5\n\nimg = \"path/to/landmarks.jpg\"\nannotation = vision.annotate img, landmarks: true\n# This is the same as calling\n# annotation = vision.annotate img, landmarks: 5"},{"caption":"<p>Using the default setting on <a data-custom-type=\"google/cloud/vision/image\" data-method=\"landmarks-instance\">Image#landmarks</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nGoogle::Cloud::Vision.default_max_landmarks #=> 100\n\nlandmarks = vision.image(\"path/to/landmarks.jpg\").landmarks\n# This is the same as calling\n# landmarks = vision.image(\"path/to/landmarks.jpg\").landmarks 100"},{"caption":"<p>Updating the default setting on <a data-custom-type=\"google/cloud/vision/image\" data-method=\"landmarks-instance\">Image#landmarks</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\n# Set a new default\nGoogle::Cloud::Vision.default_max_landmarks = 5\n\nlandmarks = vision.image(\"path/to/landmarks.jpg\").landmarks\n# This is the same as calling\n# landmarks = vision.image(\"path/to/landmarks.jpg\").landmarks 5"}],"params":[],"exceptions":[],"returns":[]},{"id":"default_max_landmarks-class","type":"class","name":"default_max_landmarks","title":["Google","Cloud","Vision.default_max_landmarks"],"description":"<p>The default max results to return for landmark detection requests.</p>","source":"google-cloud-vision/lib/google/cloud/vision.rb#L391","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"default_max_logos=-class","type":"class","name":"default_max_logos=","title":["Google","Cloud","Vision.default_max_logos="],"description":"<p>The default max results to return for logo detection requests. This is\nused on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a> as well as <a data-custom-type=\"google/cloud/vision/image\" data-method=\"logos-instance\">Image#logos</a>.</p>\n\n<p>The default value is 100.</p>\n\n<p>This is also available on the configuration as\n<code>Google::Cloud::Vision.configure.default_max_logos</code></p>","source":"google-cloud-vision/lib/google/cloud/vision.rb#L451","resources":[],"examples":[{"caption":"<p>Using the default setting on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nGoogle::Cloud::Vision.default_max_logos #=> 100\n\nannotation = vision.annotate \"path/to/logos.jpg\", logos: true\n# This is the same as calling\n# annotation = vision.annotate \"path/to/logos.jpg\", logos: 100"},{"caption":"<p>Updating the default setting on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\n# Set a new default\nGoogle::Cloud::Vision.default_max_logos = 5\n\nannotation = vision.annotate \"path/to/logos.jpg\", logos: true\n# This is the same as calling\n# annotation = vision.annotate \"path/to/logos.jpg\", logos: 5"},{"caption":"<p>Using the default setting on <a data-custom-type=\"google/cloud/vision/image\" data-method=\"logos-instance\">Image#logos</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nGoogle::Cloud::Vision.default_max_logos #=> 100\n\nlogos = vision.image(\"path/to/logos.jpg\").logos\n# This is the same as calling\n# logos = vision.image(\"path/to/logos.jpg\").logos 100"},{"caption":"<p>Updating the default setting on <a data-custom-type=\"google/cloud/vision/image\" data-method=\"logos-instance\">Image#logos</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\n# Set a new default\nGoogle::Cloud::Vision.default_max_logos = 5\n\nlogos = vision.image(\"path/to/logos.jpg\").logos\n# This is the same as calling\n# logos = vision.image(\"path/to/logos.jpg\").logos 5"}],"params":[],"exceptions":[],"returns":[]},{"id":"default_max_logos-class","type":"class","name":"default_max_logos","title":["Google","Cloud","Vision.default_max_logos"],"description":"<p>The default max results to return for logo detection requests.</p>","source":"google-cloud-vision/lib/google/cloud/vision.rb#L458","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"default_max_labels=-class","type":"class","name":"default_max_labels=","title":["Google","Cloud","Vision.default_max_labels="],"description":"<p>The default max results to return for label detection requests. This\nis used on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a> as well as <a data-custom-type=\"google/cloud/vision/image\" data-method=\"labels-instance\">Image#labels</a>.</p>\n\n<p>The default value is 100.</p>\n\n<p>This is also available on the configuration as\n<code>Google::Cloud::Vision.configure.default_max_labels</code></p>","source":"google-cloud-vision/lib/google/cloud/vision.rb#L518","resources":[],"examples":[{"caption":"<p>Using the default setting on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nGoogle::Cloud::Vision.default_max_labels #=> 100\n\nannotation = vision.annotate \"path/to/labels.jpg\", labels: true\n# This is the same as calling\n# annotation = vision.annotate \"path/to/labels.jpg\", labels: 100"},{"caption":"<p>Updating the default setting on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\n# Set a new default\nGoogle::Cloud::Vision.default_max_labels = 5\n\nannotation = vision.annotate \"path/to/labels.jpg\", labels: true\n# This is the same as calling\n# annotation = vision.annotate \"path/to/labels.jpg\", labels: 5"},{"caption":"<p>Using the default setting on <a data-custom-type=\"google/cloud/vision/image\" data-method=\"labels-instance\">Image#labels</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nGoogle::Cloud::Vision.default_max_labels #=> 100\n\nlabels = vision.image(\"path/to/labels.jpg\").labels\n# This is the same as calling\n# labels = vision.image(\"path/to/labels.jpg\").labels 100"},{"caption":"<p>Updating the default setting on <a data-custom-type=\"google/cloud/vision/image\" data-method=\"labels-instance\">Image#labels</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\n# Set a new default\nGoogle::Cloud::Vision.default_max_labels = 5\n\nlabels = vision.image(\"path/to/labels.jpg\").labels\n# This is the same as calling\n# labels = vision.image(\"path/to/labels.jpg\").labels 5"}],"params":[],"exceptions":[],"returns":[]},{"id":"default_max_labels-class","type":"class","name":"default_max_labels","title":["Google","Cloud","Vision.default_max_labels"],"description":"<p>The default max results to return for label detection requests.</p>","source":"google-cloud-vision/lib/google/cloud/vision.rb#L525","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"default_max_crop_hints=-class","type":"class","name":"default_max_crop_hints=","title":["Google","Cloud","Vision.default_max_crop_hints="],"description":"<p>The default max results to return for crop hints detection requests.\nThis is used on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a> as well as <a data-custom-type=\"google/cloud/vision/image\" data-method=\"crop_hints-instance\">Image#crop_hints</a>.</p>\n\n<p>The default value is 100.</p>\n\n<p>This is also available on the configuration as\n<code>Google::Cloud::Vision.configure.default_max_crop_hints</code></p>","source":"google-cloud-vision/lib/google/cloud/vision.rb#L587","resources":[],"examples":[{"caption":"<p>Using the default setting on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nGoogle::Cloud::Vision.default_max_crop_hints #=> 100\n\nimg = \"path/to/landmarks.jpg\"\nannotation = vision.annotate img, crop_hints: true\n# This is the same as calling\n# annotation = vision.annotate img, crop_hints: 100"},{"caption":"<p>Updating the default setting on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\n# Set a new default\nGoogle::Cloud::Vision.default_max_crop_hints = 5\n\nimg = \"path/to/landmarks.jpg\"\nannotation = vision.annotate img, crop_hints: true\n# This is the same as calling\n# annotation = vision.annotate img, crop_hints: 5"},{"caption":"<p>Using the default setting on <a data-custom-type=\"google/cloud/vision/image\" data-method=\"crop_hints-instance\">Image#crop_hints</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nGoogle::Cloud::Vision.default_max_crop_hints #=> 100\n\ncrop_hints = vision.image(\"path/to/landmarks.jpg\").crop_hints\n# This is the same as calling\n# crop_hints = vision.image(\"path/to/landmarks.jpg\").crop_hints 100"},{"caption":"<p>Updating the default setting on <a data-custom-type=\"google/cloud/vision/image\" data-method=\"crop_hints-instance\">Image#crop_hints</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\n# Set a new default\nGoogle::Cloud::Vision.default_max_crop_hints = 5\n\ncrop_hints = vision.image(\"path/to/landmarks.jpg\").crop_hints\n# This is the same as calling\n# crop_hints = vision.image(\"path/to/landmarks.jpg\").crop_hints 5"}],"params":[],"exceptions":[],"returns":[]},{"id":"default_max_crop_hints-class","type":"class","name":"default_max_crop_hints","title":["Google","Cloud","Vision.default_max_crop_hints"],"description":"<p>The default max results to return for crop hints detection requests.</p>","source":"google-cloud-vision/lib/google/cloud/vision.rb#L594","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"default_max_web=-class","type":"class","name":"default_max_web=","title":["Google","Cloud","Vision.default_max_web="],"description":"<p>The default max results to return for web detection requests.\nThis is used on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a> as well as <a data-custom-type=\"google/cloud/vision/image\" data-method=\"web-instance\">Image#web</a>.</p>\n\n<p>The default value is 100.</p>\n\n<p>This is also available on the configuration as\n<code>Google::Cloud::Vision.configure.default_max_web</code></p>","source":"google-cloud-vision/lib/google/cloud/vision.rb#L656","resources":[],"examples":[{"caption":"<p>Using the default setting on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nGoogle::Cloud::Vision.default_max_web #=> 100\n\nimg = \"path/to/landmarks.jpg\"\nannotation = vision.annotate img, web: true\n# This is the same as calling\n# annotation = vision.annotate img, web: 100"},{"caption":"<p>Updating the default setting on <a data-custom-type=\"google/cloud/vision/project\" data-method=\"annotate-instance\">Project#annotate</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\n# Set a new default\nGoogle::Cloud::Vision.default_max_web = 5\n\nimg = \"path/to/landmarks.jpg\"\nannotation = vision.annotate img, web: true\n# This is the same as calling\n# annotation = vision.annotate img, web: 5"},{"caption":"<p>Using the default setting on <a data-custom-type=\"google/cloud/vision/image\" data-method=\"web-instance\">Image#web</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nGoogle::Cloud::Vision.default_max_web #=> 100\n\nweb = vision.image(\"path/to/landmarks.jpg\").web\n# This is the same as calling\n# web = vision.image(\"path/to/landmarks.jpg\").web 100"},{"caption":"<p>Updating the default setting on <a data-custom-type=\"google/cloud/vision/image\" data-method=\"web-instance\">Image#web</a>:</p>","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\n# Set a new default\nGoogle::Cloud::Vision.default_max_web = 5\n\nweb = vision.image(\"path/to/landmarks.jpg\").web\n# This is the same as calling\n# web = vision.image(\"path/to/landmarks.jpg\").web 5"}],"params":[],"exceptions":[],"returns":[]},{"id":"default_max_web-class","type":"class","name":"default_max_web","title":["Google","Cloud","Vision.default_max_web"],"description":"<p>The default max results to return for web detection requests.</p>","source":"google-cloud-vision/lib/google/cloud/vision.rb#L663","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"new-class","type":"class","name":"new","title":["Google","Cloud","Vision.new"],"description":"<p>Creates a new object for connecting to the Vision service.\nEach call creates a new connection.</p>","source":"google-cloud-vision/lib/google/cloud/vision.rb#L705","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/vision\"\n\nvision = Google::Cloud::Vision.new\n\nimage = vision.image \"path/to/landmark.jpg\"\n\nlandmark = image.landmark\nlandmark.description #=> \"Mount Rushmore\""}],"params":[{"name":"project_id","types":["String"],"description":"Project identifier for the Vision service you\nare connecting to. If not present, the default project for the\ncredentials is used.","optional":true,"default":"nil","nullable":true},{"name":"credentials","types":["String","Hash","Google::Auth::Credentials"],"description":"The path to\nthe keyfile as a String, the contents of the keyfile as a Hash, or a\nGoogle::Auth::Credentials object. (See <a data-custom-type=\"google/cloud/vision/credentials\">Vision::Credentials</a>)","optional":true,"default":"nil","nullable":true},{"name":"scope","types":["String","Array<String>"],"description":"The OAuth 2.0 scopes controlling\nthe set of resources and operations that the connection can access.\nSee <a href=\"https://developers.google.com/identity/protocols/OAuth2\">Using OAuth 2.0 to Access Google\nAPIs</a>.</p>\n\n<p>The default scope is:</p>\n\n<ul>\n  <li><code>https://www.googleapis.com/auth/cloud-platform</code></li>\n</ul>","optional":true,"default":"nil","nullable":true},{"name":"timeout","types":["Integer"],"description":"Default timeout to use in requests. Optional.","optional":true,"default":"nil","nullable":true},{"name":"client_config","types":["Hash"],"description":"A hash of values to override the default\nbehavior of the API client. Optional.","optional":true,"default":"nil","nullable":true},{"name":"project","types":["String"],"description":"Alias for the <code>project_id</code> argument. Deprecated.","optional":true,"default":"nil","nullable":true},{"name":"keyfile","types":["String"],"description":"Alias for the <code>credentials</code> argument.\nDeprecated.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"ArgumentError","description":""}],"returns":[{"types":["<a data-custom-type=\"google/cloud/vision/project\">Google::Cloud::Vision::Project</a>"],"description":""}]},{"id":"configure-class","type":"class","name":"configure","title":["Google","Cloud","Vision.configure"],"description":"<p>Configure the Google Cloud Vision library.</p>\n\n<p>The following Vision configuration parameters are supported:</p>\n\n<ul>\n  <li><code>project_id</code> - (String) Identifier for a Vision project. (The\nparameter <code>project</code> is considered deprecated, but may also be used.)</li>\n  <li><code>credentials</code> - (String, Hash, Google::Auth::Credentials) The path to\nthe keyfile as a String, the contents of the keyfile as a Hash, or a\nGoogle::Auth::Credentials object. (See <a data-custom-type=\"google/cloud/vision/credentials\">Vision::Credentials</a>) (The\nparameter <code>keyfile</code> is considered deprecated, but may also be used.)</li>\n  <li><code>scope</code> - (String, Array<String>) The OAuth 2.0 scopes controlling\nthe set of resources and operations that the connection can access.</String></li>\n  <li><code>timeout</code> - (Integer) Default timeout to use in requests.</li>\n  <li><code>client_config</code> - (Hash) A hash of values to override the default\nbehavior of the API client.</li>\n  <li><code>default_max_faces</code> - (Integer) The default max results to return for\nfacial detection requests. See <a data-custom-type=\"google/cloud/vision\" data-method=\"default_max_faces=-class\">Vision.default_max_faces=</a>.</li>\n  <li><code>default_max_landmarks</code> - (Integer) The default max results to return\nfor landmark detection requests. See <a data-custom-type=\"google/cloud/vision\" data-method=\"default_max_landmarks=-class\">Vision.default_max_landmarks=</a>.</li>\n  <li><code>default_max_logos</code> - (Integer) The default max results to return for\nlogo detection requests. See <a data-custom-type=\"google/cloud/vision\" data-method=\"default_max_logos=-class\">Vision.default_max_logos=</a>.</li>\n  <li><code>default_max_labels</code> - (Integer) The default max results to return for\nlabel detection requests. See <a data-custom-type=\"google/cloud/vision\" data-method=\"default_max_labels=-class\">Vision.default_max_labels=</a>.</li>\n  <li><code>default_max_crop_hints</code> - (Integer) The default max results to return\nfor crop hints detection requests. See\n<a data-custom-type=\"google/cloud/vision\" data-method=\"default_max_crop_hints=-class\">Vision.default_max_crop_hints=</a>.</li>\n  <li><code>default_max_web</code> - (Integer) The default max results to return for\nweb detection requests. See <a data-custom-type=\"google/cloud/vision\" data-method=\"default_max_faces=-class\">Vision.default_max_faces=</a>.</li>\n</ul>","source":"google-cloud-vision/lib/google/cloud/vision.rb#L760","resources":[],"examples":[],"params":[{"name":"yield","types":["block"],"description":"","optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Google::Cloud::Config"],"description":"The configuration object the\nGoogle::Cloud::Vision library uses."}]}]}