{"id":"google/type/color","name":"Color","title":["Google","Type","Color"],"description":"<p>Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of “java.awt.Color” in Java; it\ncan also be trivially provided to UIColor’s “+colorWithRed:green:blue:alpha”\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS “rgba()” string in JavaScript, as well. Here are some examples:</p>\n\n<p>Example (Java):</p>\n\n<pre><code> import com.google.type.Color;\n\n // ...\n public static java.awt.Color fromProto(Color protocolor) {\n   float alpha = protocolor.hasAlpha()\n       ? protocolor.getAlpha().getValue()\n       : 1.0;\n\n   return new java.awt.Color(\n       protocolor.getRed(),\n       protocolor.getGreen(),\n       protocolor.getBlue(),\n       alpha);\n }\n\n public static Color toProto(java.awt.Color color) {\n   float red = (float) color.getRed();\n   float green = (float) color.getGreen();\n   float blue = (float) color.getBlue();\n   float denominator = 255.0;\n   Color.Builder resultBuilder =\n       Color\n           .newBuilder()\n           .setRed(red / denominator)\n           .setGreen(green / denominator)\n           .setBlue(blue / denominator);\n   int alpha = color.getAlpha();\n   if (alpha != 255) {\n     result.setAlpha(\n         FloatValue\n             .newBuilder()\n             .setValue(((float) alpha) / denominator)\n             .build());\n   }\n   return resultBuilder.build();\n }\n // ...\n</code></pre>\n\n<p>Example (iOS / Obj-C):</p>\n\n<pre><code> // ...\n static UIColor* fromProto(Color* protocolor) {\n    float red = [protocolor red];\n    float green = [protocolor green];\n    float blue = [protocolor blue];\n    FloatValue* alpha_wrapper = [protocolor alpha];\n    float alpha = 1.0;\n    if (alpha_wrapper != nil) {\n      alpha = [alpha_wrapper value];\n    }\n    return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n }\n\n static Color* toProto(UIColor* color) {\n     CGFloat red, green, blue, alpha;\n     if (![color getRed:&amp;red green:&amp;green blue:&amp;blue alpha:&amp;alpha]) {\n       return nil;\n     }\n     Color* result = [Color alloc] init];\n     [result setRed:red];\n     [result setGreen:green];\n     [result setBlue:blue];\n     if (alpha &lt;= 0.9999) {\n       [result setAlpha:floatWrapperWithValue(alpha)];\n     }\n     [result autorelease];\n     return result;\n}\n// ...\n</code></pre>\n\n<p>Example (JavaScript):</p>\n\n<pre><code>// ...\n\nvar protoToCssColor = function(rgb_color) {\n   var redFrac = rgb_color.red || 0.0;\n   var greenFrac = rgb_color.green || 0.0;\n   var blueFrac = rgb_color.blue || 0.0;\n   var red = Math.floor(redFrac * 255);\n   var green = Math.floor(greenFrac * 255);\n   var blue = Math.floor(blueFrac * 255);\n\n   if (!('alpha' in rgb_color)) {\n      return rgbToCssColor_(red, green, blue);\n   }\n\n   var alphaFrac = rgb_color.alpha.value || 0.0;\n   var rgbParams = [red, green, blue].join(',');\n   return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n};\n\nvar rgbToCssColor_ = function(red, green, blue) {\n  var rgbNumber = new Number((red &lt;&lt; 16) | (green &lt;&lt; 8) | blue);\n  var hexString = rgbNumber.toString(16);\n  var missingZeros = 6 - hexString.length;\n  var resultBuilder = ['#'];\n  for (var i = 0; i &lt; missingZeros; i++) {\n     resultBuilder.push('0');\n  }\n  resultBuilder.push(hexString);\n  return resultBuilder.join('');\n};\n\n// ...\n</code></pre>","source":"google-cloud-vision/lib/google/cloud/vision/v1/doc/google/type/color.rb#L153","resources":[],"examples":[],"methods":[{"id":"red-instance","type":"instance","name":"red","title":["Google","Type","Color#red"],"description":"","source":"google-cloud-vision/lib/google/cloud/vision/v1/doc/google/type/color.rb#L153","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Float"],"description":"The amount of red in the color as a value in the interval [0, 1]."}]},{"id":"red=-instance","type":"instance","name":"red=","title":["Google","Type","Color#red="],"description":"","source":"google-cloud-vision/lib/google/cloud/vision/v1/doc/google/type/color.rb#L153","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Float"],"description":"The amount of red in the color as a value in the interval [0, 1]."}]},{"id":"green-instance","type":"instance","name":"green","title":["Google","Type","Color#green"],"description":"","source":"google-cloud-vision/lib/google/cloud/vision/v1/doc/google/type/color.rb#L153","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Float"],"description":"The amount of green in the color as a value in the interval [0, 1]."}]},{"id":"green=-instance","type":"instance","name":"green=","title":["Google","Type","Color#green="],"description":"","source":"google-cloud-vision/lib/google/cloud/vision/v1/doc/google/type/color.rb#L153","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Float"],"description":"The amount of green in the color as a value in the interval [0, 1]."}]},{"id":"blue-instance","type":"instance","name":"blue","title":["Google","Type","Color#blue"],"description":"","source":"google-cloud-vision/lib/google/cloud/vision/v1/doc/google/type/color.rb#L153","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Float"],"description":"The amount of blue in the color as a value in the interval [0, 1]."}]},{"id":"blue=-instance","type":"instance","name":"blue=","title":["Google","Type","Color#blue="],"description":"","source":"google-cloud-vision/lib/google/cloud/vision/v1/doc/google/type/color.rb#L153","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Float"],"description":"The amount of blue in the color as a value in the interval [0, 1]."}]},{"id":"alpha-instance","type":"instance","name":"alpha","title":["Google","Type","Color#alpha"],"description":"","source":"google-cloud-vision/lib/google/cloud/vision/v1/doc/google/type/color.rb#L153","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/protobuf/floatvalue\">Google::Protobuf::FloatValue</a>"],"description":"The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:</p>\n\n<p>pixel color = alpha * (this color) + (1.0 - alpha) * (background color)</p>\n\n<p>This means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0)."}]},{"id":"alpha=-instance","type":"instance","name":"alpha=","title":["Google","Type","Color#alpha="],"description":"","source":"google-cloud-vision/lib/google/cloud/vision/v1/doc/google/type/color.rb#L153","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/protobuf/floatvalue\">Google::Protobuf::FloatValue</a>"],"description":"The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:</p>\n\n<p>pixel color = alpha * (this color) + (1.0 - alpha) * (background color)</p>\n\n<p>This means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0)."}]}]}