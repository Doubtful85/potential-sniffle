{"id":"google/protobuf/any","name":"Any","title":["Google","Protobuf","Any"],"description":"<p>+Any+ contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.</p>\n\n<p>Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.</p>\n\n<p>Example 1: Pack and unpack a message in C++.</p>\n\n<pre><code>Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&amp;foo)) {\n  ...\n}\n</code></pre>\n\n<p>Example 2: Pack and unpack a message in Java.</p>\n\n<pre><code>Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n</code></pre>\n\n<p>Example 3: Pack and unpack a message in Python.</p>\n\n<pre><code>foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n</code></pre>\n\n<p>Example 4: Pack and unpack a message in Go</p>\n\n<pre><code> foo := &amp;pb.Foo{...}\n any, err := ptypes.MarshalAny(foo)\n ...\n foo := &amp;pb.Foo{}\n if err := ptypes.UnmarshalAny(any, foo); err != nil {\n   ...\n }\n</code></pre>\n\n<p>The pack methods provided by protobuf library will by default use\n‘type.googleapis.com/full.type.name’ as the type URL and the unpack\nmethods only use the fully qualified type name after the last ‘/’\nin the type URL, for example “foo.bar.com/x/y.z” will yield type\nname “y.z”.</p>\n\n<p>= JSON</p>\n\n<p>The JSON representation of an +Any+ value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field +@type+ which contains the type URL. Example:</p>\n\n<pre><code>package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  \"@type\": \"type.googleapis.com/google.profile.Person\",\n  \"firstName\": &lt;string&gt;,\n  \"lastName\": &lt;string&gt;\n}\n</code></pre>\n\n<p>If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n+value+ which holds the custom JSON in addition to the +@type+\nfield. Example (for message <a data-custom-type=\"google/protobuf/duration\">Google::Protobuf::Duration</a>):</p>\n\n<pre><code>{\n  \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n  \"value\": \"1.212s\"\n}\n</code></pre>","source":"google-cloud-video_intelligence/lib/google/cloud/video_intelligence/v1/doc/google/protobuf/any.rb#L127","resources":[],"examples":[],"methods":[{"id":"type_url-instance","type":"instance","name":"type_url","title":["Google","Protobuf","Any#type_url"],"description":"","source":"google-cloud-video_intelligence/lib/google/cloud/video_intelligence/v1/doc/google/protobuf/any.rb#L127","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. The last segment of the URL’s path must represent\nthe fully qualified name of the type (as in\n+path/google.protobuf.Duration+). The name should be in a canonical form\n(e.g., leading “.” is not accepted).</p>\n\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme +http+, +https+, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n\n<ul>\n  <li>If no scheme is provided, +https+ is assumed.</li>\n  <li>An HTTP GET on the URL must yield a Google::Protobuf::Type\nvalue in binary format, or produce an error.</li>\n  <li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n\n<p>Schemes other than +http+, +https+ (or the empty scheme) might be\nused with implementation specific semantics."}]},{"id":"type_url=-instance","type":"instance","name":"type_url=","title":["Google","Protobuf","Any#type_url="],"description":"","source":"google-cloud-video_intelligence/lib/google/cloud/video_intelligence/v1/doc/google/protobuf/any.rb#L127","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. The last segment of the URL’s path must represent\nthe fully qualified name of the type (as in\n+path/google.protobuf.Duration+). The name should be in a canonical form\n(e.g., leading “.” is not accepted).</p>\n\n<p>In practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme +http+, +https+, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:</p>\n\n<ul>\n  <li>If no scheme is provided, +https+ is assumed.</li>\n  <li>An HTTP GET on the URL must yield a Google::Protobuf::Type\nvalue in binary format, or produce an error.</li>\n  <li>Applications are allowed to cache lookup results based on the\nURL, or have them precompiled into a binary to avoid any\nlookup. Therefore, binary compatibility needs to be preserved\non changes to types. (Use versioned type names to manage\nbreaking changes.)</li>\n</ul>\n\n<p>Note: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.</p>\n\n<p>Schemes other than +http+, +https+ (or the empty scheme) might be\nused with implementation specific semantics."}]},{"id":"value-instance","type":"instance","name":"value","title":["Google","Protobuf","Any#value"],"description":"","source":"google-cloud-video_intelligence/lib/google/cloud/video_intelligence/v1/doc/google/protobuf/any.rb#L127","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Must be a valid serialized protocol buffer of the above specified type."}]},{"id":"value=-instance","type":"instance","name":"value=","title":["Google","Protobuf","Any#value="],"description":"","source":"google-cloud-video_intelligence/lib/google/cloud/video_intelligence/v1/doc/google/protobuf/any.rb#L127","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Must be a valid serialized protocol buffer of the above specified type."}]}]}