{"id":"google/cloud/config","name":"Config","title":["Google","Cloud","Config"],"description":"<p>Configuration mechanism for Google Cloud libraries. A Config object\ncontains a list of predefined keys, some of which are values and others\nof which are subconfigurations, i.e. categories. Field access is\ngenerally validated to ensure that the field is defined, and when a\na value is set, it is validated for the correct type. Warnings are\nprinted when a validation fails.</p>\n\n<p>You generally access fields and subconfigs by calling accessor methods.\nMethods meant for “administration” such as adding options, are named\nwith a trailing “!” or “?” so they don’t pollute the method namespace.\nIt is also possible to access a field using the <code>[]</code> operator.</p>\n\n<p>Note that config objects inherit from <code>BasicObject</code>. This means it does\nnot define many methods you might expect to find in most Ruby objects.\nFor example, <code>to_s</code>, <code>inspect</code>, <code>is_a?</code>, <code>instance_variable_get</code>, and so\nforth.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L82","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/config\"\n\nconfig = Google::Cloud::Config.create do |c|\n  c.add_field! :opt1, 10\n  c.add_field! :opt2, :one, enum: [:one, :two, :three]\n  c.add_field! :opt3, \"hi\", match: [String, Symbol]\n  c.add_field! :opt4, \"hi\", match: /^[a-z]+$/, allow_nil: true\n  c.add_config! :sub do |c2|\n    c2.add_field! :opt5, false\n  end\nend\n\nconfig.opt1             #=> 10\nconfig.opt1 = 20        #=> 20\nconfig.opt1             #=> 20\nconfig.opt1 = \"hi\"      #=> \"hi\" (but prints a warning)\nconfig.opt1 = nil       #=> nil (but prints a warning)\n\nconfig.opt2             #=> :one\nconfig.opt2 = :two      #=> :two\nconfig.opt2             #=> :two\nconfig.opt2 = :four     #=> :four (but prints a warning)\n\nconfig.opt3             #=> \"hi\"\nconfig.opt3 = \"hiho\"    #=> \"hiho\"\nconfig.opt3             #=> \"hiho\"\nconfig.opt3 = \"HI\"      #=> \"HI\" (but prints a warning)\n\nconfig.opt4             #=> \"yo\"\nconfig.opt4 = :yo       #=> :yo (Strings and Symbols allowed)\nconfig.opt4             #=> :yo\nconfig.opt4 = 3.14      #=> 3.14 (but prints a warning)\nconfig.opt4 = nil       #=> nil (no warning: nil allowed)\n\nconfig.sub              #=> <Google::Cloud::Config>\n\nconfig.sub.opt5         #=> false\nconfig.sub.opt5 = true  #=> true  (true and false allowed)\nconfig.sub.opt5         #=> true\nconfig.sub.opt5 = nil   #=> nil (but prints a warning)\n\nconfig.opt9 = \"hi\"      #=> \"hi\" (warning about unknown key)\nconfig.opt9             #=> \"hi\" (no warning: key now known)\nconfig.sub.opt9         #=> nil (warning about unknown key)"}],"methods":[{"id":"create-class","type":"class","name":"create","title":["Google","Cloud","Config.create"],"description":"<p>Constructs a Config object. If a block is given, yields <code>self</code> to the\nblock, which makes it convenient to initialize the structure by making\ncalls to <code>add_field!</code> and <code>add_config!</code>.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L92","resources":[],"examples":[],"params":[{"name":"show_warnings","types":["boolean"],"description":"Whether to print warnings when a\nvalidation fails. Defaults to <code>true</code>.","optional":true,"default":"true","nullable":false},{"name":"yield","types":["block"],"description":"","optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/config\">Config</a>"],"description":"The constructed Config object."}]},{"id":"config?-class","type":"class","name":"config?","title":["Google","Cloud","Config.config?"],"description":"<p>Determines if the given object is a config. Useful because Config\ndoes not define the <code>is_a?</code> method.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L104","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["boolean"],"description":""}]},{"id":"add_field!-instance","type":"instance","name":"add_field!","title":["Google","Cloud","Config#add_field!"],"description":"<p>Add a value field to this configuration.</p>\n\n<p>You must provide a key, which becomes the field name in this config.\nField names may comprise only letters, numerals, and underscores, and\nmust begin with a letter. This will create accessor methods for the\nnew configuration key.</p>\n\n<p>You may pass an initial value (which defaults to nil if not provided).</p>\n\n<p>You may also specify how values are validated. Validation is defined\nas follows:</p>\n\n<ul>\n  <li>If you provide a block or a <code>:validator</code> option, it is used as the\nvalidator. A proposed value is passed to the proc, which should\nreturn <code>true</code> or <code>false</code> to indicate whether the value is valid.</li>\n  <li>If you provide a <code>:match</code> option, it is compared to the proposed\nvalue using the <code>===</code> operator. You may, for example, provide a\nclass, a regular expression, or a range. If you pass an array,\nthe value is accepted if <em>any</em> of the elements match.</li>\n  <li>If you provide an <code>:enum</code> option, it should be an <code>Enumerable</code>.\nA proposed value is valid if it is included.</li>\n  <li>Otherwise if you do not provide any of the above options, then a\ndefault validation strategy is inferred from the initial value:\n    <ul>\n      <li>If the initial is <code>true</code> or <code>false</code>, then either boolean value\nis considered valid. This is the same as <code>enum: [true, false]</code>.</li>\n      <li>If the initial is <code>nil</code>, then any object is considered valid.</li>\n      <li>Otherwise, any object of the same class as the initial value is\nconsidered valid. This is effectively the same as\n<code>match: initial.class</code>.</li>\n    </ul>\n  </li>\n  <li>You may also provide the <code>:allow_nil</code> option, which, if set to\ntrue, alters any of the above validators to allow <code>nil</code> values.</li>\n</ul>\n\n<p>In many cases, you may find that the default validation behavior\n(interpreted from the initial value) is sufficient. If you want to\naccept any value, use <code>match: Object</code>.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L188","resources":[],"examples":[],"params":[{"name":"key","types":["String","Symbol"],"description":"The name of the option","optional":false,"nullable":false},{"name":"initial","types":["Object"],"description":"Initial value (defaults to nil)","optional":true,"default":"nil","nullable":true},{"name":"opts","types":["Hash"],"description":"Validation options","optional":true,"default":"{}","nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/config\">Config</a>"],"description":"self for chaining"}]},{"id":"add_config!-instance","type":"instance","name":"add_config!","title":["Google","Cloud","Config#add_config!"],"description":"<p>Add a subconfiguration field to this configuration.</p>\n\n<p>You must provide a key, which becomes the method name that you use to\nnavigate to the subconfig. Names may comprise only letters, numerals,\nand underscores, and must begin with a letter.</p>\n\n<p>If you provide a block, the subconfig object is passed to the block,\nso you can easily add fields to the subconfig.</p>\n\n<p>You may also pass in a config object that already exists. This will\n“attach” that configuration in this location.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L218","resources":[],"examples":[],"params":[{"name":"key","types":["String","Symbol"],"description":"The name of the subconfig","optional":false,"nullable":false},{"name":"config","types":["Config"],"description":"A config object to attach here. If not provided,\ncreates a new config.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/config\">Config</a>"],"description":"self for chaining"}]},{"id":"add_alias!-instance","type":"instance","name":"add_alias!","title":["Google","Cloud","Config#add_alias!"],"description":"<p>Cause a key to be an alias of another key. The two keys will refer to\nthe same field.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L235","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"reset!-instance","type":"instance","name":"reset!","title":["Google","Cloud","Config#reset!"],"description":"<p>Restore the original default value of the given key.\nIf the key is omitted, restore the original defaults for all keys,\nand all keys of subconfigs, recursively.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L251","resources":[],"examples":[],"params":[{"name":"key","types":["Symbol","nil"],"description":"The key to reset. If omitted or <code>nil</code>,\nrecursively reset all fields and subconfigs.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[]},{"id":"delete!-instance","type":"instance","name":"delete!","title":["Google","Cloud","Config#delete!"],"description":"<p>Remove the given key from the configuration, deleting any validation\nand value. If the key is omitted, delete all keys. If the key is an\nalias, deletes the alias but leaves the original.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L278","resources":[],"examples":[],"params":[{"name":"key","types":["Symbol","nil"],"description":"The key to delete. If omitted or <code>nil</code>,\ndelete all fields and subconfigs.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[]},{"id":"[]=-instance","type":"instance","name":"[]=","title":["Google","Cloud","Config#[]="],"description":"<p>Assign an option with the given name to the given value.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L297","resources":[],"examples":[],"params":[{"name":"key","types":["Symbol","String"],"description":"The option name","optional":false,"nullable":false},{"name":"value","types":["Object"],"description":"The new option value","optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"[]-instance","type":"instance","name":"[]","title":["Google","Cloud","Config#[]"],"description":"<p>Get the option or subconfig with the given name.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L309","resources":[],"examples":[],"params":[{"name":"key","types":["Symbol","String"],"description":"The option or subconfig name","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Object"],"description":"The option value or subconfig object"}]},{"id":"value_set?-instance","type":"instance","name":"value_set?","title":["Google","Cloud","Config#value_set?"],"description":"<p>Check if the given key has been set in this object. Returns true if the\nkey has been added as a normal field, subconfig, or alias, or if it has\nnot been added explicitly but still has a value.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L327","resources":[],"examples":[],"params":[{"name":"key","types":["Symbol"],"description":"The key to check for.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["boolean"],"description":""}]},{"id":"field?-instance","type":"instance","name":"field?","title":["Google","Cloud","Config#field?"],"description":"<p>Check if the given key has been explicitly added as a field name.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L338","resources":[],"examples":[],"params":[{"name":"key","types":["Symbol"],"description":"The key to check for.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["boolean"],"description":""}]},{"id":"subconfig?-instance","type":"instance","name":"subconfig?","title":["Google","Cloud","Config#subconfig?"],"description":"<p>Check if the given key has been explicitly added as a subconfig name.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L348","resources":[],"examples":[],"params":[{"name":"key","types":["Symbol"],"description":"The key to check for.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["boolean"],"description":""}]},{"id":"alias?-instance","type":"instance","name":"alias?","title":["Google","Cloud","Config#alias?"],"description":"<p>Check if the given key has been explicitly added as an alias.\nIf so, return the target, otherwise return nil.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L359","resources":[],"examples":[],"params":[{"name":"key","types":["Symbol"],"description":"The key to check for.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Symbol","nil"],"description":"The alias target, or nil if not an alias."}]},{"id":"fields!-instance","type":"instance","name":"fields!","title":["Google","Cloud","Config#fields!"],"description":"<p>Return a list of explicitly added field names.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L369","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Array&lt;Symbol&gt;"],"description":"a list of field names as symbols."}]},{"id":"subconfigs!-instance","type":"instance","name":"subconfigs!","title":["Google","Cloud","Config#subconfigs!"],"description":"<p>Return a list of explicitly added subconfig names.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L378","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Array&lt;Symbol&gt;"],"description":"a list of subconfig names as symbols."}]},{"id":"aliases!-instance","type":"instance","name":"aliases!","title":["Google","Cloud","Config#aliases!"],"description":"<p>Return a list of alias names.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L387","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Array&lt;Symbol&gt;"],"description":"a list of alias names as symbols."}]},{"id":"to_s!-instance","type":"instance","name":"to_s!","title":["Google","Cloud","Config#to_s!"],"description":"<p>Returns a string representation of this configuration state, including\nsubconfigs. Only explicitly added fields and subconfigs are included.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L397","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":""}]},{"id":"to_h!-instance","type":"instance","name":"to_h!","title":["Google","Cloud","Config#to_h!"],"description":"<p>Returns a nested hash representation of this configuration state,\nincluding subconfigs. Only explicitly added fields and subconfigs are\nincluded.</p>","source":"google-cloud-core/lib/google/cloud/config.rb#L413","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Hash"],"description":""}]}]}