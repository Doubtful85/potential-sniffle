{"id":"google/cloud/spanner/admin/database/v1/databaseadminclient","name":"DatabaseAdminClient","title":["Google","Cloud","Spanner","Admin","Database","V1","DatabaseAdminClient"],"description":"<p>Cloud Spanner Database Admin API</p>\n\n<p>The Cloud Spanner Database Admin API can be used to create, drop, and\nlist databases. It also enables updating the schema of pre-existing\ndatabases.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/database_admin_client.rb#L49","resources":[],"examples":[],"methods":[{"id":"database_admin_stub-instance","type":"instance","name":"database_admin_stub","title":["Google","Cloud","Spanner","Admin","Database","V1","DatabaseAdminClient#database_admin_stub"],"description":"","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/database_admin_client.rb#L49","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Google::Spanner::Admin::Database::V1::DatabaseAdmin::Stub"],"description":""}]},{"id":"instance_path-class","type":"class","name":"instance_path","title":["Google","Cloud","Spanner","Admin","Database","V1","DatabaseAdminClient.instance_path"],"description":"<p>Returns a fully-qualified instance resource name string.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/database_admin_client.rb#L92","resources":[],"examples":[],"params":[{"name":"project","types":["String"],"description":"","optional":false,"nullable":false},{"name":"instance","types":["String"],"description":"","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["String"],"description":""}]},{"id":"database_path-class","type":"class","name":"database_path","title":["Google","Cloud","Spanner","Admin","Database","V1","DatabaseAdminClient.database_path"],"description":"<p>Returns a fully-qualified database resource name string.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/database_admin_client.rb#L104","resources":[],"examples":[],"params":[{"name":"project","types":["String"],"description":"","optional":false,"nullable":false},{"name":"instance","types":["String"],"description":"","optional":false,"nullable":false},{"name":"database","types":["String"],"description":"","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["String"],"description":""}]},{"id":"initialize-constructor","type":"constructor","name":"initialize","title":["Google","Cloud","Spanner","Admin","Database","V1","DatabaseAdminClient#initialize"],"description":"","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/database_admin_client.rb#L136","resources":[],"examples":[],"params":[{"name":"credentials","types":["Google::Auth::Credentials","String","Hash","GRPC::Core::Channel","GRPC::Core::ChannelCredentials","Proc"],"description":"Provides the means for authenticating requests made by the client. This parameter can\nbe many types.\nA <code>Google::Auth::Credentials</code> uses a the properties of its represented keyfile for\nauthenticating requests made by this client.\nA <code>String</code> will be treated as the path to the keyfile to be used for the construction of\ncredentials for this client.\nA <code>Hash</code> will be treated as the contents of a keyfile to be used for the construction of\ncredentials for this client.\nA <code>GRPC::Core::Channel</code> will be used to make calls through.\nA <code>GRPC::Core::ChannelCredentials</code> for the setting up the RPC client. The channel credentials\nshould already be composed with a <code>GRPC::Core::CallCredentials</code> object.\nA <code>Proc</code> will be used as an updater_proc for the Grpc channel. The proc transforms the\nmetadata for requests, generally, to give OAuth credentials.","optional":true,"default":"nil","nullable":true},{"name":"scopes","types":["Array<String>"],"description":"The OAuth scopes for this service. This parameter is ignored if\nan updater_proc is supplied.","optional":true,"default":"ALL_SCOPES","nullable":false},{"name":"client_config","types":["Hash"],"description":"A Hash for call options for each method. See\nGoogle::Gax#construct_settings for the structure of\nthis data. Falls back to the default config if not specified\nor the specified config is missing data points.","optional":true,"default":"{}","nullable":false},{"name":"timeout","types":["Numeric"],"description":"The default timeout, in seconds, for calls made through this client.","optional":true,"default":"DEFAULT_TIMEOUT","nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/spanner/admin/database/v1/databaseadminclient\">DatabaseAdminClient</a>"],"description":"a new instance of DatabaseAdminClient"}]},{"id":"list_databases-instance","type":"instance","name":"list_databases","title":["Google","Cloud","Spanner","Admin","Database","V1","DatabaseAdminClient#list_databases"],"description":"<p>Lists Cloud Spanner databases.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/database_admin_client.rb#L304","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner/admin/database/v1\"\n\ndatabase_admin_client = Google::Cloud::Spanner::Admin::Database::V1.new\nformatted_parent = Google::Cloud::Spanner::Admin::Database::V1::DatabaseAdminClient.instance_path(\"[PROJECT]\", \"[INSTANCE]\")\n\n# Iterate over all results.\ndatabase_admin_client.list_databases(formatted_parent).each do |element|\n  # Process element.\nend\n\n# Or iterate over results one page at a time.\ndatabase_admin_client.list_databases(formatted_parent).each_page do |page|\n  # Process each page at a time.\n  page.each do |element|\n    # Process element.\n  end\nend"}],"params":[{"name":"parent","types":["String"],"description":"Required. The instance whose databases should be listed.\nValues are of the form +projects/<project>/instances/<instance>+.</instance></project>","optional":false,"nullable":false},{"name":"page_size","types":["Integer"],"description":"The maximum number of resources contained in the underlying API\nresponse. If page streaming is performed per-resource, this\nparameter does not affect the return value. If page streaming is\nperformed per-page, this determines the maximum number of\nresources in a page.","optional":true,"default":"nil","nullable":true},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["Google::Gax::PagedEnumerable&lt;<a data-custom-type=\"google/spanner/admin/database/v1/database\">Google::Spanner::Admin::Database::V1::Database</a>&gt;"],"description":"An enumerable of Google::Spanner::Admin::Database::V1::Database instances.\nSee Google::Gax::PagedEnumerable documentation for other\noperations such as per-page iteration or access to the response\nobject."}]},{"id":"create_database-instance","type":"instance","name":"create_database","title":["Google","Cloud","Spanner","Admin","Database","V1","DatabaseAdminClient#create_database"],"description":"<p>Creates a new Cloud Spanner database and starts to prepare it for serving.\nThe returned Google::Longrunning::Operation will\nhave a name of the format +<database_name>/operations/<operation_id>+ and\ncan be used to track preparation of the database. The\nGoogle::Longrunning::Operation#metadata field type is\n<a data-custom-type=\"google/spanner/admin/database/v1/createdatabasemetadata\">CreateDatabaseMetadata</a>. The\nGoogle::Longrunning::Operation#response field type is\n<a data-custom-type=\"google/spanner/admin/database/v1/database\">Database</a>, if successful.</operation_id></database_name></p>","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/database_admin_client.rb#L378","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner/admin/database/v1\"\n\ndatabase_admin_client = Google::Cloud::Spanner::Admin::Database::V1.new\nformatted_parent = Google::Cloud::Spanner::Admin::Database::V1::DatabaseAdminClient.instance_path(\"[PROJECT]\", \"[INSTANCE]\")\ncreate_statement = ''\n\n# Register a callback during the method call.\noperation = database_admin_client.create_database(formatted_parent, create_statement) do |op|\n  raise op.results.message if op.error?\n  op_results = op.results\n  # Process the results.\n\n  metadata = op.metadata\n  # Process the metadata.\nend\n\n# Or use the return value to register a callback.\noperation.on_done do |op|\n  raise op.results.message if op.error?\n  op_results = op.results\n  # Process the results.\n\n  metadata = op.metadata\n  # Process the metadata.\nend\n\n# Manually reload the operation.\noperation.reload!\n\n# Or block until the operation completes, triggering callbacks on\n# completion.\noperation.wait_until_done!"}],"params":[{"name":"parent","types":["String"],"description":"Required. The name of the instance that will serve the new database.\nValues are of the form +projects/<project>/instances/<instance>+.</instance></project>","optional":false,"nullable":false},{"name":"create_statement","types":["String"],"description":"Required. A +CREATE DATABASE+ statement, which specifies the ID of the\nnew database.  The database ID must conform to the regular expression\n+[a-z][a-z0-9_-]*[a-z0-9]+ and be between 2 and 30 characters in length.\nIf the database ID is a reserved word or if it contains a hyphen, the\ndatabase ID must be enclosed in backticks (+ + +).","optional":false,"nullable":false},{"name":"extra_statements","types":["Array<String>"],"description":"An optional list of DDL statements to run inside the newly created\ndatabase. Statements can create tables, indexes, etc. These\nstatements execute atomically with the creation of the database:\nif there is an error in any statement, the database is not created.","optional":true,"default":"nil","nullable":true},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["Google::Gax::Operation"],"description":""}]},{"id":"get_database-instance","type":"instance","name":"get_database","title":["Google","Cloud","Spanner","Admin","Database","V1","DatabaseAdminClient#get_database"],"description":"<p>Gets the state of a Cloud Spanner database.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/database_admin_client.rb#L417","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner/admin/database/v1\"\n\ndatabase_admin_client = Google::Cloud::Spanner::Admin::Database::V1.new\nformatted_name = Google::Cloud::Spanner::Admin::Database::V1::DatabaseAdminClient.database_path(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE]\")\nresponse = database_admin_client.get_database(formatted_name)"}],"params":[{"name":"name","types":["String"],"description":"Required. The name of the requested database. Values are of the form\n+projects/<project>/instances/<instance>/databases/<database>+.</database></instance></project>","optional":false,"nullable":false},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["<a data-custom-type=\"google/spanner/admin/database/v1/database\">Google::Spanner::Admin::Database::V1::Database</a>"],"description":""}]},{"id":"update_database_ddl-instance","type":"instance","name":"update_database_ddl","title":["Google","Cloud","Spanner","Admin","Database","V1","DatabaseAdminClient#update_database_ddl"],"description":"<p>Updates the schema of a Cloud Spanner database by\ncreating/altering/dropping tables, columns, indexes, etc. The returned\nGoogle::Longrunning::Operation will have a name of\nthe format +<database_name>/operations/<operation_id>+ and can be used to\ntrack execution of the schema change(s). The\nGoogle::Longrunning::Operation#metadata field type is\n<a data-custom-type=\"google/spanner/admin/database/v1/updatedatabaseddlmetadata\">UpdateDatabaseDdlMetadata</a>.  The operation has no response.</operation_id></database_name></p>","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/database_admin_client.rb#L498","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner/admin/database/v1\"\n\ndatabase_admin_client = Google::Cloud::Spanner::Admin::Database::V1.new\nformatted_database = Google::Cloud::Spanner::Admin::Database::V1::DatabaseAdminClient.database_path(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE]\")\nstatements = []\n\n# Register a callback during the method call.\noperation = database_admin_client.update_database_ddl(formatted_database, statements) do |op|\n  raise op.results.message if op.error?\n  op_results = op.results\n  # Process the results.\n\n  metadata = op.metadata\n  # Process the metadata.\nend\n\n# Or use the return value to register a callback.\noperation.on_done do |op|\n  raise op.results.message if op.error?\n  op_results = op.results\n  # Process the results.\n\n  metadata = op.metadata\n  # Process the metadata.\nend\n\n# Manually reload the operation.\noperation.reload!\n\n# Or block until the operation completes, triggering callbacks on\n# completion.\noperation.wait_until_done!"}],"params":[{"name":"database","types":["String"],"description":"Required. The database to update.","optional":false,"nullable":false},{"name":"statements","types":["Array<String>"],"description":"DDL statements to be applied to the database.","optional":false,"nullable":false},{"name":"operation_id","types":["String"],"description":"If empty, the new update request is assigned an\nautomatically-generated operation ID. Otherwise, +operation_id+\nis used to construct the name of the resulting\nGoogle::Longrunning::Operation.</p>\n\n<p>Specifying an explicit operation ID simplifies determining\nwhether the statements were executed in the event that the\nGoogle::Spanner::Admin::Database::V1::DatabaseAdmin::UpdateDatabaseDdl call is replayed,\nor the return value is otherwise lost: the Google::Spanner::Admin::Database::V1::UpdateDatabaseDdlRequest#database and\n+operation_id+ fields can be combined to form the\nGoogle::Longrunning::Operation#name of the resulting\nGoogle::Longrunning::Operation: +<database>/operations/<operation_id>+.</operation_id></database></p>\n\n<p>+operation_id+ should be unique within the database, and must be\na valid identifier: +[a-z][a-z0-9_]*+. Note that\nautomatically-generated operation IDs always begin with an\nunderscore. If the named operation already exists,\nGoogle::Spanner::Admin::Database::V1::DatabaseAdmin::UpdateDatabaseDdl returns\n+ALREADY_EXISTS+.","optional":true,"default":"nil","nullable":true},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["Google::Gax::Operation"],"description":""}]},{"id":"drop_database-instance","type":"instance","name":"drop_database","title":["Google","Cloud","Spanner","Admin","Database","V1","DatabaseAdminClient#drop_database"],"description":"<p>Drops (aka deletes) a Cloud Spanner database.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/database_admin_client.rb#L535","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner/admin/database/v1\"\n\ndatabase_admin_client = Google::Cloud::Spanner::Admin::Database::V1.new\nformatted_database = Google::Cloud::Spanner::Admin::Database::V1::DatabaseAdminClient.database_path(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE]\")\ndatabase_admin_client.drop_database(formatted_database)"}],"params":[{"name":"database","types":["String"],"description":"Required. The database to be dropped.","optional":false,"nullable":false},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[]},{"id":"get_database_ddl-instance","type":"instance","name":"get_database_ddl","title":["Google","Cloud","Spanner","Admin","Database","V1","DatabaseAdminClient#get_database_ddl"],"description":"<p>Returns the schema of a Cloud Spanner database as a list of formatted\nDDL statements. This method does not show pending schema updates, those may\nbe queried using the Google::Longrunning::Operations API.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/database_admin_client.rb#L564","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner/admin/database/v1\"\n\ndatabase_admin_client = Google::Cloud::Spanner::Admin::Database::V1.new\nformatted_database = Google::Cloud::Spanner::Admin::Database::V1::DatabaseAdminClient.database_path(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE]\")\nresponse = database_admin_client.get_database_ddl(formatted_database)"}],"params":[{"name":"database","types":["String"],"description":"Required. The database whose schema we wish to get.","optional":false,"nullable":false},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["<a data-custom-type=\"google/spanner/admin/database/v1/getdatabaseddlresponse\">Google::Spanner::Admin::Database::V1::GetDatabaseDdlResponse</a>"],"description":""}]},{"id":"set_iam_policy-instance","type":"instance","name":"set_iam_policy","title":["Google","Cloud","Spanner","Admin","Database","V1","DatabaseAdminClient#set_iam_policy"],"description":"<p>Sets the access control policy on a database resource. Replaces any\nexisting policy.</p>\n\n<p>Authorization requires +spanner.databases.setIamPolicy+ permission on\nGoogle::Iam::V1::SetIamPolicyRequest#resource.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/database_admin_client.rb#L604","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner/admin/database/v1\"\n\ndatabase_admin_client = Google::Cloud::Spanner::Admin::Database::V1.new\nformatted_resource = Google::Cloud::Spanner::Admin::Database::V1::DatabaseAdminClient.database_path(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE]\")\npolicy = {}\nresponse = database_admin_client.set_iam_policy(formatted_resource, policy)"}],"params":[{"name":"resource","types":["String"],"description":"REQUIRED: The resource for which the policy is being specified.\n+resource+ is usually specified as a path. For example, a Project\nresource is specified as +projects/project+.","optional":false,"nullable":false},{"name":"policy","types":["Google::Iam::V1::Policy | Hash"],"description":"REQUIRED: The complete policy to be applied to the +resource+. The size of\nthe policy is limited to a few 10s of KB. An empty policy is a\nvalid policy but certain Cloud Platform services (such as Projects)\nmight reject them.\nA hash of the same form as <code>Google::Iam::V1::Policy</code>\ncan also be provided.","optional":false,"nullable":false},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["<a data-custom-type=\"google/iam/v1/policy\">Google::Iam::V1::Policy</a>"],"description":""}]},{"id":"get_iam_policy-instance","type":"instance","name":"get_iam_policy","title":["Google","Cloud","Spanner","Admin","Database","V1","DatabaseAdminClient#get_iam_policy"],"description":"<p>Gets the access control policy for a database resource. Returns an empty\npolicy if a database exists but does not have a policy set.</p>\n\n<p>Authorization requires +spanner.databases.getIamPolicy+ permission on\nGoogle::Iam::V1::GetIamPolicyRequest#resource.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/database_admin_client.rb#L638","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner/admin/database/v1\"\n\ndatabase_admin_client = Google::Cloud::Spanner::Admin::Database::V1.new\nformatted_resource = Google::Cloud::Spanner::Admin::Database::V1::DatabaseAdminClient.database_path(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE]\")\nresponse = database_admin_client.get_iam_policy(formatted_resource)"}],"params":[{"name":"resource","types":["String"],"description":"REQUIRED: The resource for which the policy is being requested.\n+resource+ is usually specified as a path. For example, a Project\nresource is specified as +projects/project+.","optional":false,"nullable":false},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["<a data-custom-type=\"google/iam/v1/policy\">Google::Iam::V1::Policy</a>"],"description":""}]},{"id":"test_iam_permissions-instance","type":"instance","name":"test_iam_permissions","title":["Google","Cloud","Spanner","Admin","Database","V1","DatabaseAdminClient#test_iam_permissions"],"description":"<p>Returns permissions that the caller has on the specified database resource.</p>\n\n<p>Attempting this RPC on a non-existent Cloud Spanner database will result in\na NOT_FOUND error if the user has +spanner.databases.list+ permission on\nthe containing Cloud Spanner instance. Otherwise returns an empty set of\npermissions.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/database_admin_client.rb#L677","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner/admin/database/v1\"\n\ndatabase_admin_client = Google::Cloud::Spanner::Admin::Database::V1.new\nformatted_resource = Google::Cloud::Spanner::Admin::Database::V1::DatabaseAdminClient.database_path(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE]\")\npermissions = []\nresponse = database_admin_client.test_iam_permissions(formatted_resource, permissions)"}],"params":[{"name":"resource","types":["String"],"description":"REQUIRED: The resource for which the policy detail is being requested.\n+resource+ is usually specified as a path. For example, a Project\nresource is specified as +projects/project+.","optional":false,"nullable":false},{"name":"permissions","types":["Array<String>"],"description":"The set of permissions to check for the +resource+. Permissions with\nwildcards (such as ‘<em>’ or ‘storage.</em>’) are not allowed. For more\ninformation see\n<a href=\"https://cloud.google.com/iam/docs/overview#permissions\">IAM Overview</a>.","optional":false,"nullable":false},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["Google::Iam::V1::TestIamPermissionsResponse"],"description":""}]}]}