{"id":"google/cloud/pubsub/subscriber","name":"Subscriber","title":["Google","Cloud","Pubsub","Subscriber"],"description":"<p>Subscriber object used to stream and process messages from a\nSubscription. See Google::Cloud::Pubsub::Subscription#listen</p>","source":"google-cloud-pubsub/lib/google/cloud/pubsub/subscriber.rb#L62","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\n\nsubscriber = sub.listen do |received_message|\n  # process message\n  received_message.acknowledge!\nend\n\n# Start background threads that will call the block passed to listen.\nsubscriber.start\n\n# Shut down the subscriber when ready to stop receiving messages.\nsubscriber.stop.wait!"}],"methods":[{"id":"subscription_name-instance","type":"instance","name":"subscription_name","title":["Google","Cloud","Pubsub","Subscriber#subscription_name"],"description":"<p>The name of the subscription the\nmessages are pulled from.</p>","source":"google-cloud-pubsub/lib/google/cloud/pubsub/subscriber.rb#L62","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"the current value of subscription_name"}]},{"id":"callback-instance","type":"instance","name":"callback","title":["Google","Cloud","Pubsub","Subscriber#callback"],"description":"<p>The procedure that will handle the messages\nreceived from the subscription.</p>","source":"google-cloud-pubsub/lib/google/cloud/pubsub/subscriber.rb#L62","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Proc"],"description":"the current value of callback"}]},{"id":"deadline-instance","type":"instance","name":"deadline","title":["Google","Cloud","Pubsub","Subscriber#deadline"],"description":"<p>The default number of seconds the stream\nwill hold received messages before modifying the messageâ€™s ack\ndeadline. The minimum is 10, the maximum is 600. Default is 60.</p>","source":"google-cloud-pubsub/lib/google/cloud/pubsub/subscriber.rb#L62","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Numeric"],"description":"the current value of deadline"}]},{"id":"streams-instance","type":"instance","name":"streams","title":["Google","Cloud","Pubsub","Subscriber#streams"],"description":"<p>The number of concurrent streams to open\nto pull messages from the subscription. Default is 4.</p>","source":"google-cloud-pubsub/lib/google/cloud/pubsub/subscriber.rb#L62","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Integer"],"description":"the current value of streams"}]},{"id":"inventory-instance","type":"instance","name":"inventory","title":["Google","Cloud","Pubsub","Subscriber#inventory"],"description":"<p>The number of received messages to be\ncollected by subscriber. Default is 1,000.</p>","source":"google-cloud-pubsub/lib/google/cloud/pubsub/subscriber.rb#L62","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Integer"],"description":"the current value of inventory"}]},{"id":"callback_threads-instance","type":"instance","name":"callback_threads","title":["Google","Cloud","Pubsub","Subscriber#callback_threads"],"description":"<p>The number of threads used to\nhandle the received messages. Default is 8.</p>","source":"google-cloud-pubsub/lib/google/cloud/pubsub/subscriber.rb#L62","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Integer"],"description":"the current value of callback_threads"}]},{"id":"push_threads-instance","type":"instance","name":"push_threads","title":["Google","Cloud","Pubsub","Subscriber#push_threads"],"description":"<p>The number of threads to handle\nacknowledgement (<a data-custom-type=\"google/cloud/pubsub/receivedmessage\" data-method=\"ack!-instance\">ReceivedMessage#ack!</a>) and delay messages\n(<a data-custom-type=\"google/cloud/pubsub/receivedmessage\" data-method=\"nack!-instance\">ReceivedMessage#nack!</a>, <a data-custom-type=\"google/cloud/pubsub/receivedmessage\" data-method=\"delay!-instance\">ReceivedMessage#delay!</a>). Default is 4.</p>","source":"google-cloud-pubsub/lib/google/cloud/pubsub/subscriber.rb#L62","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Integer"],"description":"the current value of push_threads"}]},{"id":"start-instance","type":"instance","name":"start","title":["Google","Cloud","Pubsub","Subscriber#start"],"description":"<p>Starts the subscriber pulling from the subscription and processing the\nreceived messages.</p>","source":"google-cloud-pubsub/lib/google/cloud/pubsub/subscriber.rb#L103","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/pubsub/subscriber\">Subscriber</a>"],"description":"returns self so calls can be chained."}]},{"id":"stop-instance","type":"instance","name":"stop","title":["Google","Cloud","Pubsub","Subscriber#stop"],"description":"<p>Begins the process of stopping the subscriber. Unhandled received\nmessages will be processed, but no new messages will be pulled from\nthe subscription. Use <a data-custom-type=\"google/cloud/pubsub/subscriber\" data-method=\"wait!-instance\">#wait!</a> to block until the subscriber is fully\nstopped and all received messages have been processed.</p>","source":"google-cloud-pubsub/lib/google/cloud/pubsub/subscriber.rb#L124","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/pubsub/subscriber\">Subscriber</a>"],"description":"returns self so calls can be chained."}]},{"id":"wait!-instance","type":"instance","name":"wait!","title":["Google","Cloud","Pubsub","Subscriber#wait!"],"description":"<p>Blocks until the subscriber is fully stopped and all received messages\nhave been handled. Does not stop the subscriber. To stop the\nsubscriber, first call <a data-custom-type=\"google/cloud/pubsub/subscriber\" data-method=\"stop-instance\">#stop</a> and then call <a data-custom-type=\"google/cloud/pubsub/subscriber\" data-method=\"wait!-instance\">#wait!</a> to block until\nthe subscriber is stopped.</p>","source":"google-cloud-pubsub/lib/google/cloud/pubsub/subscriber.rb#L145","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/pubsub/subscriber\">Subscriber</a>"],"description":"returns self so calls can be chained."}]},{"id":"started?-instance","type":"instance","name":"started?","title":["Google","Cloud","Pubsub","Subscriber#started?"],"description":"<p>Whether the subscriber has been started.</p>","source":"google-cloud-pubsub/lib/google/cloud/pubsub/subscriber.rb#L160","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["boolean"],"description":"<code>true</code> when started, <code>false</code> otherwise."}]},{"id":"stopped?-instance","type":"instance","name":"stopped?","title":["Google","Cloud","Pubsub","Subscriber#stopped?"],"description":"<p>Whether the subscriber has been stopped.</p>","source":"google-cloud-pubsub/lib/google/cloud/pubsub/subscriber.rb#L168","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["boolean"],"description":"<code>true</code> when stopped, <code>false</code> otherwise."}]}]}