{"id":"google/cloud/pubsub","name":"Pubsub","title":["Google","Cloud","Pubsub"],"description":"<h1 id=\"google-cloud-pubsub\">Google Cloud Pub/Sub</h1>\n\n<p>Google Cloud Pub/Sub is designed to provide reliable, many-to-many,\nasynchronous messaging between applications. Publisher applications can\nsend messages to a “topic” and other applications can subscribe to that\ntopic to receive the messages. By decoupling senders and receivers, Google\nCloud Pub/Sub allows developers to communicate between independently\nwritten applications.</p>\n\n<p>The goal of google-cloud is to provide a API that is comfortable to\nRubyists. Authentication is handled by Google::Cloud#pubsub. You can\nprovide the project and credential information to connect to the Pub/Sub\nservice, or if you are running on Google Compute Engine this configuration\nis taken care of for you.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\ntopic = pubsub.topic \"my-topic\"\ntopic.publish \"task completed\"\n</code></pre>\n\n<p>To learn more about Pub/Sub, read the <a href=\"https://cloud.google.com/pubsub/overview\">Google Cloud Pub/Sub Overview\n</a>.</p>\n\n<h2 id=\"retrieving-topics\">Retrieving Topics</h2>\n\n<p>A Topic is a named resource to which messages are sent by publishers.\nA Topic is found by its name. (See Google::Cloud::Pubsub::Project#topic)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\ntopic = pubsub.topic \"my-topic\"\n</code></pre>\n\n<h2 id=\"creating-a-topic\">Creating a Topic</h2>\n\n<p>A Topic is created from a Project. (See\nGoogle::Cloud::Pubsub::Project#create_topic)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\ntopic = pubsub.create_topic \"my-topic\"\n</code></pre>\n\n<h2 id=\"retrieving-subscriptions\">Retrieving Subscriptions</h2>\n\n<p>A Subscription is a named resource representing the stream of messages\nfrom a single, specific Topic, to be delivered to the subscribing\napplication. A Subscription is found by its name. (See\nGoogle::Cloud::Pubsub::Topic#subscription)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\ntopic = pubsub.topic \"my-topic\"\nsubscription = topic.subscription \"my-topic-subscription\"\nputs subscription.name\n</code></pre>\n\n<h2 id=\"creating-a-subscription\">Creating a Subscription</h2>\n\n<p>A Subscription is created from a Topic. (See\nGoogle::Cloud::Pubsub::Topic#subscribe and\nGoogle::Cloud::Pubsub::Project#subscribe)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\ntopic = pubsub.topic \"my-topic\"\nsub = topic.subscribe \"my-topic-sub\"\nputs sub.name # =&gt; \"my-topic-sub\"\n</code></pre>\n\n<p>The subscription can be created that specifies the number of seconds to\nwait to be acknowledged as well as an endpoint URL to push the messages\nto:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\ntopic = pubsub.topic \"my-topic\"\nsub = topic.subscribe \"my-topic-sub\",\n                      deadline: 120,\n                      endpoint: \"https://example.com/push\"\n</code></pre>\n\n<h2 id=\"publishing-messages\">Publishing Messages</h2>\n\n<p>Messages are published to a topic. Any message published to a topic\nwithout a subscription will be lost. Ensure the topic has a subscription\nbefore publishing. (See Google::Cloud::Pubsub::Topic#publish and\nGoogle::Cloud::Pubsub::Project#publish)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\ntopic = pubsub.topic \"my-topic\"\nmsg = topic.publish \"task completed\"\n</code></pre>\n\n<p>Messages can also be published with attributes:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\ntopic = pubsub.topic \"my-topic\"\nmsg = topic.publish \"task completed\",\n                    foo: :bar,\n                    this: :that\n</code></pre>\n\n<p>Messages can also be published in batches asynchronously using\n<code>publish_async</code>. (See Google::Cloud::Pubsub::Topic#publish_async and\n<a data-custom-type=\"google/cloud/pubsub/asyncpublisher\">Google::Cloud::Pubsub::AsyncPublisher</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\ntopic = pubsub.topic \"my-topic\"\ntopic.publish_async \"task completed\" do |result|\n  if result.succeeded?\n    log_publish_success result.data\n  else\n    log_publish_failure result.data, result.error\n  end\nend\n\ntopic.async_publisher.stop.wait!\n</code></pre>\n\n<p>Or multiple messages can be published in batches at the same time by\npassing a block to <code>publish</code>. (See\n<a data-custom-type=\"google/cloud/pubsub/batchpublisher\">Google::Cloud::Pubsub::BatchPublisher</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\ntopic = pubsub.topic \"my-topic\"\nmsgs = topic.publish do |batch|\n  batch.publish \"task 1 completed\", foo: :bar\n  batch.publish \"task 2 completed\", foo: :baz\n  batch.publish \"task 3 completed\", foo: :bif\nend\n</code></pre>\n\n<h2 id=\"receiving-messages\">Receiving messages</h2>\n\n<p>Messages can be streamed from a subscription with a subscriber object\nthat is created using <code>listen</code>. (See\nGoogle::Cloud::Pubsub::Subscription#listen and\n<a data-custom-type=\"google/cloud/pubsub/subscriber\">Google::Cloud::Pubsub::Subscriber</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\n\nsubscriber = sub.listen do |received_message|\n  # process message\n  received_message.acknowledge!\nend\n\n# Start background threads that will call the block passed to listen.\nsubscriber.start\n\n# Shut down the subscriber when ready to stop receiving messages.\nsubscriber.stop.wait!\n</code></pre>\n\n<p>Messages also can be pulled directly in a one-time operation. (See\nGoogle::Cloud::Pubsub::Subscription#pull)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nreceived_messages = sub.pull\n</code></pre>\n\n<p>A maximum number of messages to pull can be specified:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nreceived_messages = sub.pull max: 10\n</code></pre>\n\n<h2 id=\"acknowledging-a-message\">Acknowledging a Message</h2>\n\n<p>Messages that are received can be acknowledged in Pub/Sub, marking the\nmessage to be removed so it cannot be pulled again.</p>\n\n<p>A Message that can be acknowledged is called a ReceivedMessage.\nReceivedMessages can be acknowledged one at a time:\n(See Google::Cloud::Pubsub::ReceivedMessage#acknowledge!)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\n\nsubscriber = sub.listen do |received_message|\n  # process message\n  received_message.acknowledge!\nend\n\n# Start background threads that will call the block passed to listen.\nsubscriber.start\n\n# Shut down the subscriber when ready to stop receiving messages.\nsubscriber.stop.wait!\n</code></pre>\n\n<p>Or, multiple messages can be acknowledged in a single API call:\n(See Google::Cloud::Pubsub::Subscription#acknowledge)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nreceived_messages = sub.pull\nsub.acknowledge received_messages\n</code></pre>\n\n<h2 id=\"modifying-a-deadline\">Modifying a Deadline</h2>\n\n<p>A message must be acknowledged after it is pulled, or Pub/Sub will mark\nthe message for redelivery. The message acknowledgement deadline can\ndelayed if more time is needed. This will allow more time to process the\nmessage before the message is marked for redelivery. (See\nGoogle::Cloud::Pubsub::ReceivedMessage#delay!)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nsubscriber = sub.listen do |received_message|\n  puts received_message.message.data\n\n  # Delay for 2 minutes\n  received_message.delay! 120\nend\n\n# Start background threads that will call the block passed to listen.\nsubscriber.start\n\n# Shut down the subscriber when ready to stop receiving messages.\nsubscriber.stop.wait!\n</code></pre>\n\n<p>The message can also be made available for immediate redelivery:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nsubscriber = sub.listen do |received_message|\n  puts received_message.message.data\n\n  # Mark for redelivery\n  received_message.reject!\nend\n\n# Start background threads that will call the block passed to listen.\nsubscriber.start\n\n# Shut down the subscriber when ready to stop receiving messages.\nsubscriber.stop.wait!\n</code></pre>\n\n<p>Multiple messages can be delayed or made available for immediate\nredelivery: (See Google::Cloud::Pubsub::Subscription#delay)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nreceived_messages = sub.pull\nsub.delay 120, received_messages\n</code></pre>\n\n<h2 id=\"creating-a-snapshot-and-using-seek\">Creating a snapshot and using seek</h2>\n\n<p>You can create a snapshot to retain the existing backlog on a\nsubscription. The snapshot will hold the messages in the subscription’s\nbacklog that are unacknowledged upon the successful completion of the\n<code>create_snapshot</code> operation.</p>\n\n<p>Later, you can use <code>seek</code> to reset the subscription’s backlog to the\nsnapshot.</p>\n\n<p>(See Google::Cloud::Pubsub::Subscription#create_snapshot and\nGoogle::Cloud::Pubsub::Subscription#seek)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\n\nsnapshot = sub.create_snapshot\n\nreceived_messages = sub.pull\nsub.acknowledge received_messages\n\nsub.seek snapshot\n</code></pre>\n\n<h2 id=\"listening-for-messages\">Listening for Messages</h2>\n\n<p>A subscriber object can be created using <code>listen</code>, which streams messages\nfrom the backend and processes them as they are received. (See\nGoogle::Cloud::Pubsub::Subscription#listen and\n<a data-custom-type=\"google/cloud/pubsub/subscriber\">Google::Cloud::Pubsub::Subscriber</a>)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\n\nsubscriber = sub.listen do |received_message|\n  # process message\n  received_message.acknowledge!\nend\n\n# Start background threads that will call the block passed to listen.\nsubscriber.start\n\n# Shut down the subscriber when ready to stop receiving messages.\nsubscriber.stop.wait!\n</code></pre>\n\n<p>The subscriber object can be configured to control the number of\nconcurrent streams to open, the number of received messages to be\ncollected, and the number of threads each stream opens for concurrent\ncalls made to handle the received messages.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\n\nsubscriber = sub.listen threads: { callback: 16 } do |received_message|\n  # store the message somewhere before acknowledging\n  store_in_backend received_message.data # takes a few seconds\n  received_message.acknowledge!\nend\n\n# Start background threads that will call the block passed to listen.\nsubscriber.start\n</code></pre>\n\n<h2 id=\"working-across-projects\">Working Across Projects</h2>\n\n<p>All calls to the Pub/Sub service use the same project and credentials\nprovided to the Google::Cloud#pubsub method. However, it is common to\nreference topics or subscriptions in other projects, which can be achieved\nby using the <code>project</code> option. The main credentials must have permissions\nto the topics and subscriptions in other projects.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new # my-project-id\n\n# Get a topic in the current project\nmy_topic = pubsub.topic \"my-topic\"\nmy_topic.name #=&gt; \"projects/my-project-id/topics/my-topic\"\n# Get a topic in another project\nother_topic = pubsub.topic \"other-topic\", project: \"other-project-id\"\nother_topic.name #=&gt; \"projects/other-project-id/topics/other-topic\"\n</code></pre>\n\n<p>It is possible to create a subscription in the current project that pulls\nfrom a topic in another project:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::Pubsub.new # my-project-id\n\n# Get a topic in another project\ntopic = pubsub.topic \"other-topic\", project: \"other-project-id\"\n# Create a subscription in the current project that pulls from\n# the topic in another project\nsub = topic.subscribe \"my-sub\"\nsub.name #=&gt; \"projects/my-project-id/subscriptions/my-sub\"\nsub.topic.name #=&gt; \"projects/other-project-id/topics/other-topic\"\n</code></pre>\n\n<h2 id=\"using-the-google-cloud-pubsub-emulator\">Using the Google Cloud Pub/Sub Emulator</h2>\n\n<p>To develop and test your application locally, you can use the <a href=\"https://cloud.google.com/pubsub/emulator\">Google\nCloud Pub/Sub Emulator</a>, which\nprovides <a href=\"https://cloud.google.com/sdk/gcloud/reference/beta/emulators/\">local\nemulation</a>\nof the production Google Cloud Pub/Sub environment. You can start the\nGoogle Cloud Pub/Sub emulator using the <code>gcloud</code> command-line tool.</p>\n\n<p>To configure your ruby code to use the emulator, set the\n<code>PUBSUB_EMULATOR_HOST</code> environment variable to the host and port where the\nemulator is running. The value can be set as an environment variable in\nthe shell running the ruby code, or can be set directly in the ruby code\nas shown below.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\n\n# Make Pub/Sub use the emulator\nENV[\"PUBSUB_EMULATOR_HOST\"] = \"localhost:8918\"\n\npubsub = Google::Cloud::Pubsub.new \"emulator-project-id\"\n\n# Get a topic in the current project\nmy_topic = pubsub.new_topic \"my-topic\"\nmy_topic.name #=&gt; \"projects/emulator-project-id/topics/my-topic\"\n</code></pre>","source":"google-cloud-pubsub/lib/google/cloud/pubsub.rb#L483","resources":[],"examples":[],"methods":[{"id":"new-class","type":"class","name":"new","title":["Google","Cloud","Pubsub.new"],"description":"<p>Creates a new object for connecting to the Pub/Sub service.\nEach call creates a new connection.</p>\n\n<p>For more information on connecting to Google Cloud see the\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>","source":"google-cloud-pubsub/lib/google/cloud/pubsub.rb#L520","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\ntopic.publish \"task completed\""}],"params":[{"name":"project","types":["String"],"description":"Project identifier for the Pub/Sub service you\nare connecting to.","optional":true,"default":"nil","nullable":true},{"name":"keyfile","types":["String","Hash"],"description":"Keyfile downloaded from Google Cloud. If\nfile path the file must be readable.","optional":true,"default":"nil","nullable":true},{"name":"scope","types":["String","Array<String>"],"description":"The OAuth 2.0 scopes controlling\nthe set of resources and operations that the connection can access.\nSee <a href=\"https://developers.google.com/identity/protocols/OAuth2\">Using OAuth 2.0 to Access Google\nAPIs</a>.</p>\n\n<p>The default scope is:</p>\n\n<ul>\n  <li><code>https://www.googleapis.com/auth/pubsub</code></li>\n</ul>","optional":true,"default":"nil","nullable":true},{"name":"timeout","types":["Integer"],"description":"Default timeout to use in requests. Optional.","optional":true,"default":"nil","nullable":true},{"name":"client_config","types":["Hash"],"description":"A hash of values to override the default\nbehavior of the API client. Optional.","optional":true,"default":"nil","nullable":true},{"name":"emulator_host","types":["String"],"description":"Pub/Sub emulator host. Optional.\nIf the param is nil, ENV[“PUBSUB_EMULATOR_HOST”] will be used.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/pubsub/project\">Google::Cloud::Pubsub::Project</a>"],"description":""}]}]}