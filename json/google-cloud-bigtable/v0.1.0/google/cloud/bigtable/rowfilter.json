{"id":"google/cloud/bigtable/rowfilter","name":"RowFilter","title":["Google","Cloud","Bigtable","RowFilter"],"description":"<h1 id=\"rowfilter\">RowFilter</h1>\n\n<p>Takes a row as input and produces an alternate view of the row based on\nspecified rules. For example, a RowFilter might trim down a row to include\njust the cells from columns matching a given regular expression, or might\nreturn all the cells of a row but not their values. More complicated filters\ncan be composed out of these components to express requests such as, “within\nevery column of a particular family, give just the two most recent cells\nwhich are older than timestamp X.”</p>\n\n<p>There are two broad categories of RowFilters (true filters and transformers),\nas well as two ways to compose simple filters into more complex ones\n(chains and interleaves). They work as follows:</p>\n\n<ul>\n  <li>\n    <p>True filters alter the input row by excluding some of its cells wholesale\nfrom the output row. An example of a true filter is the <code>value_regex_filter</code>,\nwhich excludes cells whose values don’t match the specified pattern. All\nregex true filters use RE2 syntax (https:#github.com/google/re2/wiki/Syntax)\nin raw byte mode (RE2::Latin1), and are evaluated as full matches. An\nimportant point to keep in mind is that <code>RE2(.)</code> is equivalent by default to\n<code>RE2([^\\n])</code>, meaning that it does not match newlines. When attempting to\nmatch an arbitrary byte, you should therefore use the escape sequence <code>\\C</code>,\nwhich may need to be further escaped as <code>\\\\C</code> in your client language.</p>\n  </li>\n  <li>\n    <p>Transformers alter the input row by changing the values of some of its\ncells in the output, without excluding them completely. Currently, the only\nsupported transformer is the <code>strip_value_transformer</code>, which replaces every\ncell’s value with the empty string.</p>\n  </li>\n  <li>\n    <p>Chains and interleaves are described in more detail in the\nRowFilter.Chain and RowFilter.Interleave documentation.</p>\n  </li>\n</ul>\n\n<p>The total serialized size of a RowFilter message must not\nexceed 4096 bytes, and RowFilters may not be nested within each other\n(in Chains or Interleaves) to a depth of more than 20.</p>\n\n<p>ADVANCED USE:.\nHook for introspection into the RowFilter. Outputs all cells directly to\nthe output of the read rather than to any parent filter. Consider the\nfollowing example:</p>\n\n<pre><code>Chain(\n  FamilyRegex(\"A\"),\n  Interleave(\n    All(),\n    Chain(Label(\"foo\"), Sink())\n  ),\n  QualifierRegex(\"B\")\n)\n\n                    A,A,1,w\n                    A,B,2,x\n                    B,B,4,z\n                       |\n                FamilyRegex(\"A\")\n                       |\n                    A,A,1,w\n                    A,B,2,x\n                       |\n          +------------+-------------+\n          |                          |\n        All()                    Label(foo)\n          |                          |\n       A,A,1,w              A,A,1,w,labels:[foo]\n       A,B,2,x              A,B,2,x,labels:[foo]\n          |                          |\n          |                        Sink() --------------+\n          |                          |                  |\n          +------------+      x------+          A,A,1,w,labels:[foo]\n                       |                        A,B,2,x,labels:[foo]\n                    A,A,1,w                             |\n                    A,B,2,x                             |\n                       |                                |\n               QualifierRegex(\"B\")                      |\n                       |                                |\n                    A,B,2,x                             |\n                       |                                |\n                       +--------------------------------+\n                       |\n                    A,A,1,w,labels:[foo]\n                    A,B,2,x,labels:[foo]  # could be switched\n                    A,B,2,x               # could be switched\n</code></pre>\n\n<p>Despite being excluded by the qualifier filter, a copy of every cell\nthat reaches the sink is present in the final result.</p>\n\n<p>As with an Interleave filter duplicate cells are possible,\nand appear in an unspecified mutual order.\nIn this case we have a duplicate with column “A:B” and timestamp 2,\nbecause one copy passed through the all filter while the other was\npassed through the label and sink. Note that one copy has label “foo”,\nwhile the other does not.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L133","resources":[],"examples":[{"caption":"","code":"\n# Pass filter\nGoogle::Cloud::Bigtable::RowFilter.pass\n\n# Key regex filter\nGoogle::Cloud::Bigtable::RowFilter.key(\"user-*\")\n\n# Cell limit filter\nGoogle::Cloud::Bigtable::RowFilter.cells_per_row(10)"}],"methods":[{"id":"chain-class","type":"class","name":"chain","title":["Google","Cloud","Bigtable","RowFilter.chain"],"description":"<p>Create chain filter instance.</p>\n\n<p>A Chain RowFilter which sends rows through several RowFilters in sequence.</p>\n\n<p>See <a data-custom-type=\"google/cloud/bigtable/rowfilter/chainfilter\">Google::Cloud::Bigtable::RowFilter::ChainFilter</a></p>\n\n<p>The elements of “filters” are chained together to process the input row:\nin row -&gt; f(0) -&gt; intermediate row -&gt; f(1) -&gt; … -&gt; f(N) -&gt; out row\nThe full chain is executed atomically.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L181","resources":[],"examples":[{"caption":"<p>Create chain filter with simple filter.</p>","code":"\nchain = Google::Cloud::Bigtable::RowFilter.chain\n\n# Add filters to chain filter\nchain.key(\"user-*\")\nchain.strip_value\n\n# OR\nchain.key(\"user-*).strip_value"},{"caption":"<p>Create complex chain filter.</p>","code":"\nchain = Google::Cloud::Bigtable::RowFilter.chain\n\nchain_1 = Google::Cloud::Bigtable::RowFilter.chain\nchain_1.label(\"users\").qualifier(\"name\").cells_per_row(5)\n\n# Add to main chain filter\nchain.chain(chain_1).value(\"xyz*).key(\"user-*\")"}],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/chainfilter\">Google::Cloud::Bigtable::RowFilter::ChainFilter</a>"],"description":""}]},{"id":"interleave-class","type":"class","name":"interleave","title":["Google","Cloud","Bigtable","RowFilter.interleave"],"description":"<p>Create interleave filter.</p>\n\n<p>A RowFilter which sends each row to each of several component\nRowFilters and interleaves the results.</p>\n\n<p>The elements of “filters” all process a copy of the input row, and the\nresults are pooled, sorted, and combined into a single output row.\nIf multiple cells are produced with the same column and timestamp,\nthey will all appear in the output row in an unspecified mutual order.\nConsider the following example, with three filters:</p>\n\n<pre><code>                             input row\n                                 |\n       -----------------------------------------------------\n       |                         |                         |\n      f(0)                      f(1)                      f(2)\n       |                         |                         |\n1: foo,bar,10,x             foo,bar,10,z              far,bar,7,a\n2: foo,blah,11,z            far,blah,5,x              far,blah,5,x\n       |                         |                         |\n       -----------------------------------------------------\n                                 |\n1:                      foo,bar,10,z   # could have switched with #2\n2:                      foo,bar,10,x   # could have switched with #1\n3:                      foo,blah,11,z\n4:                      far,bar,7,a\n5:                      far,blah,5,x   # identical to #6\n6:                      far,blah,5,x   # identical to #5\n</code></pre>\n\n<p>All interleaved filters are executed atomically.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L239","resources":[],"examples":[{"caption":"<p>Create interleave filter with simple filter.</p>","code":"\ninterleave = Google::Cloud::Bigtable::RowFilter.interleave\n\n# Add filters to interleave filter\ninterleave.key(\"user-*\")\ninterleave.sink\n\n# OR\ninterleave.key(\"user-*).sink"},{"caption":"<p>Create complex interleave filter.</p>","code":"\ninterleave = Google::Cloud::Bigtable::RowFilter.interleave\n\nchain_1 = Google::Cloud::Bigtable::RowFilter.chain\nchain_1.label(\"users\").qualifier(\"name\").cells_per_row(5)\n\n# Add to main chain filter\ninterleave.chain(chain_1).value(\"xyz*).key(\"user-*\")"}],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/interleavefilter\">Google::Cloud::Bigtable::RowFilter::InterleaveFilter</a>"],"description":""}]},{"id":"condition-class","type":"class","name":"condition","title":["Google","Cloud","Bigtable","RowFilter.condition"],"description":"<p>Create condition filter instance</p>\n\n<p>A RowFilter which evaluates one of two possible RowFilters, depending on\nwhether or not a predicate RowFilter outputs any cells from the input row.</p>\n\n<p>IMPORTANT NOTE: The predicate filter does not execute atomically with the\ntrue and false filters, which may lead to inconsistent or unexpected\nresults. Additionally, Condition filters have poor performance, especially\nwhen filters are set for the false condition.</p>\n\n<p>Cannot be used within the <code>predicate_filter</code>, <code>true_filter</code>, or <code>false_filter</code></p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L269","resources":[],"examples":[{"caption":"","code":"\npredicate = Google::Cloud::Bigtable::RowFilter.key(\"user-*\")\ncondition = Google::Cloud::Bigtable::RowFilter.condition(predicate)\n\nlabel = Google::Cloud::Bigtable::RowFilter.label(\"user\")\nstrip_value = Google::Cloud::Bigtable::RowFilter.strip_value\n\n# On match apply lable else strip cell values\ncondition.on_match(label).otherwise(strip_value)"}],"params":[{"name":"predicate","types":["SimpleFilter","ChainFilter","InterleaveFilter","ConditionFilter"],"description":"","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/conditionfilter\">Google::Cloud::Bigtable::RowFilter::ConditionFilter</a>"],"description":""}]},{"id":"pass-class","type":"class","name":"pass","title":["Google","Cloud","Bigtable","RowFilter.pass"],"description":"<p>Create pass filter instance</p>\n\n<p>Matches all cells, regardless of input. Functionally equivalent to\nleaving <code>filter</code> unset, but included for completeness.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L284","resources":[],"examples":[{"caption":"","code":"\nfilter = Google::Cloud::Bigtable::RowFilter.pass"}],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"block-class","type":"class","name":"block","title":["Google","Cloud","Bigtable","RowFilter.block"],"description":"<p>Create block all filter instance</p>\n\n<p>Does not match any cells, regardless of input. Useful for temporarily\ndisabling just part of a filter.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L299","resources":[],"examples":[{"caption":"","code":"\nfilter = Google::Cloud::Bigtable::RowFilter.block"}],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"sink-class","type":"class","name":"sink","title":["Google","Cloud","Bigtable","RowFilter.sink"],"description":"<p>Create sink filter instance</p>\n\n<p>Outputs all cells directly to the output of the read rather than to any parent filter</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L313","resources":[],"examples":[{"caption":"","code":"\nfilter = Google::Cloud::Bigtable::RowFilter.sink"}],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"strip_value-class","type":"class","name":"strip_value","title":["Google","Cloud","Bigtable","RowFilter.strip_value"],"description":"<p>Create strip value filter instance</p>\n\n<p>Replaces each cell’s value with the empty string.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L327","resources":[],"examples":[{"caption":"","code":"\nfilter = Google::Cloud::Bigtable::RowFilter.strip_value"}],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"key-class","type":"class","name":"key","title":["Google","Cloud","Bigtable","RowFilter.key"],"description":"<p>Create key filter instance to match key using regular expression.</p>\n\n<p>Matches only cells from rows whose keys satisfy the given RE2 regex. In\nother words, passes through the entire row when the key matches, and\notherwise produces an empty row.\nNote that, since row keys can contain arbitrary bytes, the <code>\\C</code> escape\nsequence must be used if a true wildcard is desired. The <code>.</code> character\nwill not match the new line character <code>\\n</code>, which may be present in a\nbinary key.</p>\n\n<p>For Regex syntax:</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L351","resources":[{"title":"","link":"https://github.com/google/re2/wiki/Syntax"}],"examples":[{"caption":"","code":"\nfilter = Google::Cloud::Bigtable::RowFilter.key(\"user-.*\")"}],"params":[{"name":"regex","types":["String"],"description":"Regex to match row keys.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"sample-class","type":"class","name":"sample","title":["Google","Cloud","Bigtable","RowFilter.sample"],"description":"<p>Create sample probability filter instance</p>\n\n<p>Matches all cells from a row with probability p, and matches no cells\nfrom the row with probability 1-p.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L368","resources":[],"examples":[{"caption":"","code":"\nfilter = Google::Cloud::Bigtable::RowFilter.sample(0.5)"}],"params":[{"name":"probability","types":["Float"],"description":"Probability value\nProbability must be greather then 0 and less then 1.0","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"family-class","type":"class","name":"family","title":["Google","Cloud","Bigtable","RowFilter.family"],"description":"<p>Create family name match filter using regex</p>\n\n<p>Matches only cells from columns whose families satisfy the given RE2\nregex. For technical reasons, the regex must not contain the <code>:</code>\ncharacter, even if it is not being used as a literal.\nNote that, since column families cannot contain the new line character\n<code>\\n</code>, it is sufficient to use <code>.</code> as a full wildcard when matching\ncolumn family names.</p>\n\n<p>For Regex syntax:</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L391","resources":[{"title":"","link":"https://github.com/google/re2/wiki/Syntax"}],"examples":[{"caption":"","code":"\nfilter = Google::Cloud::Bigtable::RowFilter.family(\"cf-.*\")"}],"params":[{"name":"regex","types":["String"],"description":"Regex to match family name.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"qualifier-class","type":"class","name":"qualifier","title":["Google","Cloud","Bigtable","RowFilter.qualifier"],"description":"<p>Create column qualifier match filter using regex</p>\n\n<p>Matches only cells from columns whose qualifiers satisfy the given RE2\nregex.\nNote that, since column qualifiers can contain arbitrary bytes, the <code>\\C</code>\nescape sequence must be used if a true wildcard is desired. The <code>.</code>\ncharacter will not match the new line character <code>\\n</code>, which may be\npresent in a binary qualifier.</p>\n\n<p>For Regex syntax:</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L414","resources":[{"title":"","link":"https://github.com/google/re2/wiki/Syntax"}],"examples":[{"caption":"","code":"\nfilter = Google::Cloud::Bigtable::RowFilter.qualifier(\"user-name.*\")"}],"params":[{"name":"regex","types":["String"],"description":"Regex to match column qualifier name.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"value-class","type":"class","name":"value","title":["Google","Cloud","Bigtable","RowFilter.value"],"description":"<p>Create value match filter using regex</p>\n\n<p>Matches only cells with values that satisfy the given regular expression.\nNote that, since cell values can contain arbitrary bytes, the <code>\\C</code> escape\nsequence must be used if a true wildcard is desired. The <code>.</code> character\nwill not match the new line character <code>\\n</code>, which may be present in a\nbinary value.</p>\n\n<p>For Regex syntax:</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L436","resources":[{"title":"","link":"https://github.com/google/re2/wiki/Syntax"}],"examples":[{"caption":"","code":"\nfilter = Google::Cloud::Bigtable::RowFilter.value(\"abc.*\")"}],"params":[{"name":"regex","types":["String"],"description":"Regex to match cell value.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"label-class","type":"class","name":"label","title":["Google","Cloud","Bigtable","RowFilter.label"],"description":"<p>Create label filter instance to apply label on result of read rows.</p>\n\n<p>Applies the given label to all cells in the output row. This allows\nthe client to determine which results were produced from which part of\nthe filter.</p>\n\n<p>Values must be at most 15 characters in length, and match the RE2\npattern <code>[a-z0-9\\\\-]+</code></p>\n\n<p>Due to a technical limitation, it is not currently possible to apply\nmultiple labels to a cell. As a result, a Chain may have no more than\none sub-filter which contains a <code>apply_label_transformer</code>. It is okay for\nan Interleave to contain multiple <code>apply_label_transformers</code>, as they\nwill be applied to separate copies of the input. This may be relaxed in\nthe future.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L463","resources":[],"examples":[{"caption":"","code":"\nfilter = Google::Cloud::Bigtable::RowFilter.label(\"user-detail\")"}],"params":[{"name":"value","types":["String"],"description":"Label name","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"cells_per_row_offset-class","type":"class","name":"cells_per_row_offset","title":["Google","Cloud","Bigtable","RowFilter.cells_per_row_offset"],"description":"<p>Create cell per row offset filter instance to skip first N cells.</p>\n\n<p>Skips the first N cells of each row, matching all subsequent cells.\nIf duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L480","resources":[],"examples":[{"caption":"","code":"\nfilter = Google::Cloud::Bigtable::RowFilter.cells_per_row_offset(3)"}],"params":[{"name":"offset","types":["Integer"],"description":"Offset value.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"cells_per_row-class","type":"class","name":"cells_per_row","title":["Google","Cloud","Bigtable","RowFilter.cells_per_row"],"description":"<p>Create cells per row limit filter instance</p>\n\n<p>Matches only the first N cells of each row.\nIf duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L497","resources":[],"examples":[{"caption":"","code":"\nfilter = Google::Cloud::Bigtable::RowFilter.cells_per_row(5)"}],"params":[{"name":"limit","types":["String"],"description":"Max cell match per row limit","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"cells_per_column-class","type":"class","name":"cells_per_column","title":["Google","Cloud","Bigtable","RowFilter.cells_per_column"],"description":"<p>Create cells per column filter instance</p>\n\n<p>Matches only the most recent N cells within each column. For example,\nif N=2, this filter would match column <code>foo:bar</code> at timestamps 10 and 9,\nskip all earlier cells in <code>foo:bar</code>, and then begin matching again in\ncolumn <code>foo:bar2</code>.\nIf duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L517","resources":[],"examples":[{"caption":"","code":"\nfilter = Google::Cloud::Bigtable::RowFilter.cells_per_column(5)"}],"params":[{"name":"limit","types":["String"],"description":"Max cell match per column limit","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"timestamp_range-class","type":"class","name":"timestamp_range","title":["Google","Cloud","Bigtable","RowFilter.timestamp_range"],"description":"<p>Create timestamp range filter instance</p>\n\n<p>Matches only cells with timestamps within the given range.\nSpecified a contiguous range of timestamps.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L543","resources":[],"examples":[{"caption":"","code":"\nfrom = (Time.now - 300).to_i * 1000\nto = Time.now.to_f * 1000\n\nfilter = Google::Cloud::Bigtable::RowFilter.timestamp_range(from: from, to: to)\n\n# From to infinity\nfilter = Google::Cloud::Bigtable::RowFilter.timestamp_range(from: from)\n\n# From 0 value to `to`\nfilter = Google::Cloud::Bigtable::RowFilter.timestamp_range(to: to)"}],"params":[{"name":"from","types":["Integer"],"description":"Inclusive lower bound. If left empty, interpreted as 0.","optional":true,"default":"nil","nullable":true},{"name":"to","types":["Integer"],"description":"Exclusive upper bound. If left empty, interpreted as infinity.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"value_range-class","type":"class","name":"value_range","title":["Google","Cloud","Bigtable","RowFilter.value_range"],"description":"<p>Create value range filter instance</p>\n\n<p>Matches only cells with values that fall within the given range.</p>\n\n<p>See Google::Cloud::Bigtable::ValueRange#from and { Google::Cloud::Bigtable::ValueRange#to} for range\noption inclusive/exclusive options</p>\n\n<ul>\n  <li>The value at which to start the range.If neither field is set, interpreted as the empty string, inclusive.</li>\n  <li>The value at which to end the range. If neither field is set, interpreted as the infinite string, exclusive.</li>\n</ul>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L570","resources":[],"examples":[{"caption":"<p>Start to end range</p>","code":"\nrange = Google::Cloud::Bigtable::ValueRange.from(\"abc\").to(\"xyz\")\nfilter = Google::Cloud::Bigtable::RowFilter.value_range(range)"},{"caption":"<p>Start exlusive to infinite end range</p>","code":"\nrange = Google::Cloud::Bigtable::ValueRange.from(\"abc\", inclusive: false)\nfilter = Google::Cloud::Bigtable::RowFilter.value_range(range)"}],"params":[{"name":"range","types":["Google::Cloud::Bigtable::ValueRange"],"description":"","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"column_range-class","type":"class","name":"column_range","title":["Google","Cloud","Bigtable","RowFilter.column_range"],"description":"<p>Create column range filter instance.</p>\n\n<p>Matches only cells from columns within the given range.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter.rb#L587","resources":[],"examples":[{"caption":"","code":"\nrange = Google::Cloud::Bigtable::ColumnRange.new(cf).from(\"field0\").to(\"field5\")\n\nfilter = Google::Cloud::Bigtable::RowFilter.column_range(range)"}],"params":[{"name":"range","types":["Google::Cloud::Bigtable::ColumnRange"],"description":"","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]}]}