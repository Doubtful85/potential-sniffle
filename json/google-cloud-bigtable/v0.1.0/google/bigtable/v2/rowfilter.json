{"id":"google/bigtable/v2/rowfilter","name":"RowFilter","title":["Google","Bigtable","V2","RowFilter"],"description":"<p>Takes a row as input and produces an alternate view of the row based on\nspecified rules. For example, a RowFilter might trim down a row to include\njust the cells from columns matching a given regular expression, or might\nreturn all the cells of a row but not their values. More complicated filters\ncan be composed out of these components to express requests such as, “within\nevery column of a particular family, give just the two most recent cells\nwhich are older than timestamp X.”</p>\n\n<p>There are two broad categories of RowFilters (true filters and transformers),\nas well as two ways to compose simple filters into more complex ones\n(chains and interleaves). They work as follows:</p>\n\n<ul>\n  <li>\n    <p>True filters alter the input row by excluding some of its cells wholesale\nfrom the output row. An example of a true filter is the +value_regex_filter+,\nwhich excludes cells whose values don’t match the specified pattern. All\nregex true filters use RE2 syntax (https://github.com/google/re2/wiki/Syntax)\nin raw byte mode (RE2::Latin1), and are evaluated as full matches. An\nimportant point to keep in mind is that +RE2(.)+ is equivalent by default to\n+RE2([^\\n])+, meaning that it does not match newlines. When attempting to\nmatch an arbitrary byte, you should therefore use the escape sequence +\\C+,\nwhich may need to be further escaped as +\\C+ in your client language.</p>\n  </li>\n  <li>\n    <p>Transformers alter the input row by changing the values of some of its\ncells in the output, without excluding them completely. Currently, the only\nsupported transformer is the +strip_value_transformer+, which replaces every\ncell’s value with the empty string.</p>\n  </li>\n  <li>\n    <p>Chains and interleaves are described in more detail in the\nRowFilter.Chain and RowFilter.Interleave documentation.</p>\n  </li>\n</ul>\n\n<p>The total serialized size of a RowFilter message must not\nexceed 4096 bytes, and RowFilters may not be nested within each other\n(in Chains or Interleaves) to a depth of more than 20.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"methods":[{"id":"chain-instance","type":"instance","name":"chain","title":["Google","Bigtable","V2","RowFilter#chain"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/bigtable/v2/rowfilter/chain\">Google::Bigtable::V2::RowFilter::Chain</a>"],"description":"Applies several RowFilters to the data in sequence, progressively\nnarrowing the results."}]},{"id":"chain=-instance","type":"instance","name":"chain=","title":["Google","Bigtable","V2","RowFilter#chain="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/bigtable/v2/rowfilter/chain\">Google::Bigtable::V2::RowFilter::Chain</a>"],"description":"Applies several RowFilters to the data in sequence, progressively\nnarrowing the results."}]},{"id":"interleave-instance","type":"instance","name":"interleave","title":["Google","Bigtable","V2","RowFilter#interleave"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/bigtable/v2/rowfilter/interleave\">Google::Bigtable::V2::RowFilter::Interleave</a>"],"description":"Applies several RowFilters to the data in parallel and combines the\nresults."}]},{"id":"interleave=-instance","type":"instance","name":"interleave=","title":["Google","Bigtable","V2","RowFilter#interleave="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/bigtable/v2/rowfilter/interleave\">Google::Bigtable::V2::RowFilter::Interleave</a>"],"description":"Applies several RowFilters to the data in parallel and combines the\nresults."}]},{"id":"condition-instance","type":"instance","name":"condition","title":["Google","Bigtable","V2","RowFilter#condition"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/bigtable/v2/rowfilter/condition\">Google::Bigtable::V2::RowFilter::Condition</a>"],"description":"Applies one of two possible RowFilters to the data based on the output of\na predicate RowFilter."}]},{"id":"condition=-instance","type":"instance","name":"condition=","title":["Google","Bigtable","V2","RowFilter#condition="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/bigtable/v2/rowfilter/condition\">Google::Bigtable::V2::RowFilter::Condition</a>"],"description":"Applies one of two possible RowFilters to the data based on the output of\na predicate RowFilter."}]},{"id":"sink-instance","type":"instance","name":"sink","title":["Google","Bigtable","V2","RowFilter#sink"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["true","false"],"description":"ADVANCED USE ONLY.\nHook for introspection into the RowFilter. Outputs all cells directly to\nthe output of the read rather than to any parent filter. Consider the\nfollowing example:</p>\n\n<pre><code>Chain(\n  FamilyRegex(\"A\"),\n  Interleave(\n    All(),\n    Chain(Label(\"foo\"), Sink())\n  ),\n  QualifierRegex(\"B\")\n)\n\n                    A,A,1,w\n                    A,B,2,x\n                    B,B,4,z\n                       |\n                FamilyRegex(\"A\")\n                       |\n                    A,A,1,w\n                    A,B,2,x\n                       |\n          +------------+-------------+\n          |                          |\n        All()                    Label(foo)\n          |                          |\n       A,A,1,w              A,A,1,w,labels:[foo]\n       A,B,2,x              A,B,2,x,labels:[foo]\n          |                          |\n          |                        Sink() --------------+\n          |                          |                  |\n          +------------+      x------+          A,A,1,w,labels:[foo]\n                       |                        A,B,2,x,labels:[foo]\n                    A,A,1,w                             |\n                    A,B,2,x                             |\n                       |                                |\n               QualifierRegex(\"B\")                      |\n                       |                                |\n                    A,B,2,x                             |\n                       |                                |\n                       +--------------------------------+\n                       |\n                    A,A,1,w,labels:[foo]\n                    A,B,2,x,labels:[foo]  // could be switched\n                    A,B,2,x               // could be switched\n</code></pre>\n\n<p>Despite being excluded by the qualifier filter, a copy of every cell\nthat reaches the sink is present in the final result.</p>\n\n<p>As with an <a data-custom-type=\"google/bigtable/v2/rowfilter/interleave\">Interleave</a>,\nduplicate cells are possible, and appear in an unspecified mutual order.\nIn this case we have a duplicate with column “A:B” and timestamp 2,\nbecause one copy passed through the all filter while the other was\npassed through the label and sink. Note that one copy has label “foo”,\nwhile the other does not.</p>\n\n<p>Cannot be used within the +predicate_filter+, +true_filter+, or\n+false_filter+ of a <a data-custom-type=\"google/bigtable/v2/rowfilter/condition\">Condition</a>."}]},{"id":"sink=-instance","type":"instance","name":"sink=","title":["Google","Bigtable","V2","RowFilter#sink="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["true","false"],"description":"ADVANCED USE ONLY.\nHook for introspection into the RowFilter. Outputs all cells directly to\nthe output of the read rather than to any parent filter. Consider the\nfollowing example:</p>\n\n<pre><code>Chain(\n  FamilyRegex(\"A\"),\n  Interleave(\n    All(),\n    Chain(Label(\"foo\"), Sink())\n  ),\n  QualifierRegex(\"B\")\n)\n\n                    A,A,1,w\n                    A,B,2,x\n                    B,B,4,z\n                       |\n                FamilyRegex(\"A\")\n                       |\n                    A,A,1,w\n                    A,B,2,x\n                       |\n          +------------+-------------+\n          |                          |\n        All()                    Label(foo)\n          |                          |\n       A,A,1,w              A,A,1,w,labels:[foo]\n       A,B,2,x              A,B,2,x,labels:[foo]\n          |                          |\n          |                        Sink() --------------+\n          |                          |                  |\n          +------------+      x------+          A,A,1,w,labels:[foo]\n                       |                        A,B,2,x,labels:[foo]\n                    A,A,1,w                             |\n                    A,B,2,x                             |\n                       |                                |\n               QualifierRegex(\"B\")                      |\n                       |                                |\n                    A,B,2,x                             |\n                       |                                |\n                       +--------------------------------+\n                       |\n                    A,A,1,w,labels:[foo]\n                    A,B,2,x,labels:[foo]  // could be switched\n                    A,B,2,x               // could be switched\n</code></pre>\n\n<p>Despite being excluded by the qualifier filter, a copy of every cell\nthat reaches the sink is present in the final result.</p>\n\n<p>As with an <a data-custom-type=\"google/bigtable/v2/rowfilter/interleave\">Interleave</a>,\nduplicate cells are possible, and appear in an unspecified mutual order.\nIn this case we have a duplicate with column “A:B” and timestamp 2,\nbecause one copy passed through the all filter while the other was\npassed through the label and sink. Note that one copy has label “foo”,\nwhile the other does not.</p>\n\n<p>Cannot be used within the +predicate_filter+, +true_filter+, or\n+false_filter+ of a <a data-custom-type=\"google/bigtable/v2/rowfilter/condition\">Condition</a>."}]},{"id":"pass_all_filter-instance","type":"instance","name":"pass_all_filter","title":["Google","Bigtable","V2","RowFilter#pass_all_filter"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["true","false"],"description":"Matches all cells, regardless of input. Functionally equivalent to\nleaving +filter+ unset, but included for completeness."}]},{"id":"pass_all_filter=-instance","type":"instance","name":"pass_all_filter=","title":["Google","Bigtable","V2","RowFilter#pass_all_filter="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["true","false"],"description":"Matches all cells, regardless of input. Functionally equivalent to\nleaving +filter+ unset, but included for completeness."}]},{"id":"block_all_filter-instance","type":"instance","name":"block_all_filter","title":["Google","Bigtable","V2","RowFilter#block_all_filter"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["true","false"],"description":"Does not match any cells, regardless of input. Useful for temporarily\ndisabling just part of a filter."}]},{"id":"block_all_filter=-instance","type":"instance","name":"block_all_filter=","title":["Google","Bigtable","V2","RowFilter#block_all_filter="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["true","false"],"description":"Does not match any cells, regardless of input. Useful for temporarily\ndisabling just part of a filter."}]},{"id":"row_key_regex_filter-instance","type":"instance","name":"row_key_regex_filter","title":["Google","Bigtable","V2","RowFilter#row_key_regex_filter"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Matches only cells from rows whose keys satisfy the given RE2 regex. In\nother words, passes through the entire row when the key matches, and\notherwise produces an empty row.\nNote that, since row keys can contain arbitrary bytes, the +\\C+ escape\nsequence must be used if a true wildcard is desired. The +.+ character\nwill not match the new line character +\\n+, which may be present in a\nbinary key."}]},{"id":"row_key_regex_filter=-instance","type":"instance","name":"row_key_regex_filter=","title":["Google","Bigtable","V2","RowFilter#row_key_regex_filter="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Matches only cells from rows whose keys satisfy the given RE2 regex. In\nother words, passes through the entire row when the key matches, and\notherwise produces an empty row.\nNote that, since row keys can contain arbitrary bytes, the +\\C+ escape\nsequence must be used if a true wildcard is desired. The +.+ character\nwill not match the new line character +\\n+, which may be present in a\nbinary key."}]},{"id":"row_sample_filter-instance","type":"instance","name":"row_sample_filter","title":["Google","Bigtable","V2","RowFilter#row_sample_filter"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Float"],"description":"Matches all cells from a row with probability p, and matches no cells\nfrom the row with probability 1-p."}]},{"id":"row_sample_filter=-instance","type":"instance","name":"row_sample_filter=","title":["Google","Bigtable","V2","RowFilter#row_sample_filter="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Float"],"description":"Matches all cells from a row with probability p, and matches no cells\nfrom the row with probability 1-p."}]},{"id":"family_name_regex_filter-instance","type":"instance","name":"family_name_regex_filter","title":["Google","Bigtable","V2","RowFilter#family_name_regex_filter"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Matches only cells from columns whose families satisfy the given RE2\nregex. For technical reasons, the regex must not contain the +:+\ncharacter, even if it is not being used as a literal.\nNote that, since column families cannot contain the new line character\n+\\n+, it is sufficient to use +.+ as a full wildcard when matching\ncolumn family names."}]},{"id":"family_name_regex_filter=-instance","type":"instance","name":"family_name_regex_filter=","title":["Google","Bigtable","V2","RowFilter#family_name_regex_filter="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Matches only cells from columns whose families satisfy the given RE2\nregex. For technical reasons, the regex must not contain the +:+\ncharacter, even if it is not being used as a literal.\nNote that, since column families cannot contain the new line character\n+\\n+, it is sufficient to use +.+ as a full wildcard when matching\ncolumn family names."}]},{"id":"column_qualifier_regex_filter-instance","type":"instance","name":"column_qualifier_regex_filter","title":["Google","Bigtable","V2","RowFilter#column_qualifier_regex_filter"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Matches only cells from columns whose qualifiers satisfy the given RE2\nregex.\nNote that, since column qualifiers can contain arbitrary bytes, the +\\C+\nescape sequence must be used if a true wildcard is desired. The +.+\ncharacter will not match the new line character +\\n+, which may be\npresent in a binary qualifier."}]},{"id":"column_qualifier_regex_filter=-instance","type":"instance","name":"column_qualifier_regex_filter=","title":["Google","Bigtable","V2","RowFilter#column_qualifier_regex_filter="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Matches only cells from columns whose qualifiers satisfy the given RE2\nregex.\nNote that, since column qualifiers can contain arbitrary bytes, the +\\C+\nescape sequence must be used if a true wildcard is desired. The +.+\ncharacter will not match the new line character +\\n+, which may be\npresent in a binary qualifier."}]},{"id":"column_range_filter-instance","type":"instance","name":"column_range_filter","title":["Google","Bigtable","V2","RowFilter#column_range_filter"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/bigtable/v2/columnrange\">Google::Bigtable::V2::ColumnRange</a>"],"description":"Matches only cells from columns within the given range."}]},{"id":"column_range_filter=-instance","type":"instance","name":"column_range_filter=","title":["Google","Bigtable","V2","RowFilter#column_range_filter="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/bigtable/v2/columnrange\">Google::Bigtable::V2::ColumnRange</a>"],"description":"Matches only cells from columns within the given range."}]},{"id":"timestamp_range_filter-instance","type":"instance","name":"timestamp_range_filter","title":["Google","Bigtable","V2","RowFilter#timestamp_range_filter"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/bigtable/v2/timestamprange\">Google::Bigtable::V2::TimestampRange</a>"],"description":"Matches only cells with timestamps within the given range."}]},{"id":"timestamp_range_filter=-instance","type":"instance","name":"timestamp_range_filter=","title":["Google","Bigtable","V2","RowFilter#timestamp_range_filter="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/bigtable/v2/timestamprange\">Google::Bigtable::V2::TimestampRange</a>"],"description":"Matches only cells with timestamps within the given range."}]},{"id":"value_regex_filter-instance","type":"instance","name":"value_regex_filter","title":["Google","Bigtable","V2","RowFilter#value_regex_filter"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Matches only cells with values that satisfy the given regular expression.\nNote that, since cell values can contain arbitrary bytes, the +\\C+ escape\nsequence must be used if a true wildcard is desired. The +.+ character\nwill not match the new line character +\\n+, which may be present in a\nbinary value."}]},{"id":"value_regex_filter=-instance","type":"instance","name":"value_regex_filter=","title":["Google","Bigtable","V2","RowFilter#value_regex_filter="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Matches only cells with values that satisfy the given regular expression.\nNote that, since cell values can contain arbitrary bytes, the +\\C+ escape\nsequence must be used if a true wildcard is desired. The +.+ character\nwill not match the new line character +\\n+, which may be present in a\nbinary value."}]},{"id":"value_range_filter-instance","type":"instance","name":"value_range_filter","title":["Google","Bigtable","V2","RowFilter#value_range_filter"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/bigtable/v2/valuerange\">Google::Bigtable::V2::ValueRange</a>"],"description":"Matches only cells with values that fall within the given range."}]},{"id":"value_range_filter=-instance","type":"instance","name":"value_range_filter=","title":["Google","Bigtable","V2","RowFilter#value_range_filter="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/bigtable/v2/valuerange\">Google::Bigtable::V2::ValueRange</a>"],"description":"Matches only cells with values that fall within the given range."}]},{"id":"cells_per_row_offset_filter-instance","type":"instance","name":"cells_per_row_offset_filter","title":["Google","Bigtable","V2","RowFilter#cells_per_row_offset_filter"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Integer"],"description":"Skips the first N cells of each row, matching all subsequent cells.\nIf duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately."}]},{"id":"cells_per_row_offset_filter=-instance","type":"instance","name":"cells_per_row_offset_filter=","title":["Google","Bigtable","V2","RowFilter#cells_per_row_offset_filter="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Integer"],"description":"Skips the first N cells of each row, matching all subsequent cells.\nIf duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately."}]},{"id":"cells_per_row_limit_filter-instance","type":"instance","name":"cells_per_row_limit_filter","title":["Google","Bigtable","V2","RowFilter#cells_per_row_limit_filter"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Integer"],"description":"Matches only the first N cells of each row.\nIf duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately."}]},{"id":"cells_per_row_limit_filter=-instance","type":"instance","name":"cells_per_row_limit_filter=","title":["Google","Bigtable","V2","RowFilter#cells_per_row_limit_filter="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Integer"],"description":"Matches only the first N cells of each row.\nIf duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately."}]},{"id":"cells_per_column_limit_filter-instance","type":"instance","name":"cells_per_column_limit_filter","title":["Google","Bigtable","V2","RowFilter#cells_per_column_limit_filter"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Integer"],"description":"Matches only the most recent N cells within each column. For example,\nif N=2, this filter would match column +foo:bar+ at timestamps 10 and 9,\nskip all earlier cells in +foo:bar+, and then begin matching again in\ncolumn +foo:bar2+.\nIf duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately."}]},{"id":"cells_per_column_limit_filter=-instance","type":"instance","name":"cells_per_column_limit_filter=","title":["Google","Bigtable","V2","RowFilter#cells_per_column_limit_filter="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Integer"],"description":"Matches only the most recent N cells within each column. For example,\nif N=2, this filter would match column +foo:bar+ at timestamps 10 and 9,\nskip all earlier cells in +foo:bar+, and then begin matching again in\ncolumn +foo:bar2+.\nIf duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately."}]},{"id":"strip_value_transformer-instance","type":"instance","name":"strip_value_transformer","title":["Google","Bigtable","V2","RowFilter#strip_value_transformer"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["true","false"],"description":"Replaces each cell’s value with the empty string."}]},{"id":"strip_value_transformer=-instance","type":"instance","name":"strip_value_transformer=","title":["Google","Bigtable","V2","RowFilter#strip_value_transformer="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["true","false"],"description":"Replaces each cell’s value with the empty string."}]},{"id":"apply_label_transformer-instance","type":"instance","name":"apply_label_transformer","title":["Google","Bigtable","V2","RowFilter#apply_label_transformer"],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Applies the given label to all cells in the output row. This allows\nthe client to determine which results were produced from which part of\nthe filter.</p>\n\n<p>Values must be at most 15 characters in length, and match the RE2\npattern +[a-z0-9\\-]++</p>\n\n<p>Due to a technical limitation, it is not currently possible to apply\nmultiple labels to a cell. As a result, a Chain may have no more than\none sub-filter which contains a +apply_label_transformer+. It is okay for\nan Interleave to contain multiple +apply_label_transformers+, as they\nwill be applied to separate copies of the input. This may be relaxed in\nthe future."}]},{"id":"apply_label_transformer=-instance","type":"instance","name":"apply_label_transformer=","title":["Google","Bigtable","V2","RowFilter#apply_label_transformer="],"description":"","source":"google-cloud-bigtable/lib/google/cloud/bigtable/v2/doc/google/bigtable/v2/data.rb#L343","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Applies the given label to all cells in the output row. This allows\nthe client to determine which results were produced from which part of\nthe filter.</p>\n\n<p>Values must be at most 15 characters in length, and match the RE2\npattern +[a-z0-9\\-]++</p>\n\n<p>Due to a technical limitation, it is not currently possible to apply\nmultiple labels to a cell. As a result, a Chain may have no more than\none sub-filter which contains a +apply_label_transformer+. It is okay for\nan Interleave to contain multiple +apply_label_transformers+, as they\nwill be applied to separate copies of the input. This may be relaxed in\nthe future."}]}]}