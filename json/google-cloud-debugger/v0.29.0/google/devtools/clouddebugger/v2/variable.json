{"id":"google/devtools/clouddebugger/v2/variable","name":"Variable","title":["Google","Devtools","Clouddebugger","V2","Variable"],"description":"<p>Represents a variable or an argument possibly of a compound object type.\nNote how the following variables are represented:</p>\n\n<p>1) A simple variable:</p>\n\n<pre><code>int x = 5\n\n{ name: \"x\", value: \"5\", type: \"int\" }  // Captured variable\n</code></pre>\n\n<p>2) A compound object:</p>\n\n<pre><code>struct T {\n    int m1;\n    int m2;\n};\nT x = { 3, 7 };\n\n{  // Captured variable\n    name: \"x\",\n    type: \"T\",\n    members { name: \"m1\", value: \"3\", type: \"int\" },\n    members { name: \"m2\", value: \"7\", type: \"int\" }\n}\n</code></pre>\n\n<p>3) A pointer where the pointee was captured:</p>\n\n<pre><code>T x = { 3, 7 };\nT* p = &amp;x;\n\n{   // Captured variable\n    name: \"p\",\n    type: \"T*\",\n    value: \"0x00500500\",\n    members { name: \"m1\", value: \"3\", type: \"int\" },\n    members { name: \"m2\", value: \"7\", type: \"int\" }\n}\n</code></pre>\n\n<p>4) A pointer where the pointee was not captured:</p>\n\n<pre><code>T* p = new T;\n\n{   // Captured variable\n    name: \"p\",\n    type: \"T*\",\n    value: \"0x00400400\"\n    status { is_error: true, description { format: \"unavailable\" } }\n}\n</code></pre>\n\n<p>The status should describe the reason for the missing value,\nsuch as +<optimized out=\"\">+, +<inaccessible>+, +<pointers limit=\"\" reached=\"\">+.</pointers></inaccessible></optimized></p>\n\n<p>Note that a null pointer should not have members.</p>\n\n<p>5) An unnamed value:</p>\n\n<pre><code>int* p = new int(7);\n\n{   // Captured variable\n    name: \"p\",\n    value: \"0x00500500\",\n    type: \"int*\",\n    members { value: \"7\", type: \"int\" } }\n</code></pre>\n\n<p>6) An unnamed pointer where the pointee was not captured:</p>\n\n<pre><code>int* p = new int(7);\nint** pp = &amp;p;\n\n{  // Captured variable\n    name: \"pp\",\n    value: \"0x00500500\",\n    type: \"int**\",\n    members {\n        value: \"0x00400400\",\n        type: \"int*\"\n        status {\n            is_error: true,\n            description: { format: \"unavailable\" } }\n        }\n    }\n}\n</code></pre>\n\n<p>To optimize computation, memory and network traffic, variables that\nrepeat in the output multiple times can be stored once in a shared\nvariable table and be referenced using the +var_table_index+ field.  The\nvariables stored in the shared table are nameless and are essentially\na partition of the complete variable. To reconstruct the complete\nvariable, merge the referencing variable with the referenced variable.</p>\n\n<p>When using the shared variable table, the following variables:</p>\n\n<pre><code>T x = { 3, 7 };\nT* p = &amp;x;\nT&amp; r = x;\n\n{ name: \"x\", var_table_index: 3, type: \"T\" }  // Captured variables\n{ name: \"p\", value \"0x00500500\", type=\"T*\", var_table_index: 3 }\n{ name: \"r\", type=\"T&amp;\", var_table_index: 3 }\n\n{  // Shared variable table entry #3:\n    members { name: \"m1\", value: \"3\", type: \"int\" },\n    members { name: \"m2\", value: \"7\", type: \"int\" }\n}\n</code></pre>\n\n<p>Note that the pointer address is stored with the referencing variable\nand not with the referenced variable. This allows the referenced variable\nto be shared between pointers and references.</p>\n\n<p>The type field is optional. The debugger agent may or may not support it.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/doc/google/devtools/clouddebugger/v2/data.rb#L235","resources":[],"examples":[],"methods":[{"id":"name-instance","type":"instance","name":"name","title":["Google","Devtools","Clouddebugger","V2","Variable#name"],"description":"","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/doc/google/devtools/clouddebugger/v2/data.rb#L235","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Name of the variable, if any."}]},{"id":"name=-instance","type":"instance","name":"name=","title":["Google","Devtools","Clouddebugger","V2","Variable#name="],"description":"","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/doc/google/devtools/clouddebugger/v2/data.rb#L235","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Name of the variable, if any."}]},{"id":"value-instance","type":"instance","name":"value","title":["Google","Devtools","Clouddebugger","V2","Variable#value"],"description":"","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/doc/google/devtools/clouddebugger/v2/data.rb#L235","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Simple value of the variable."}]},{"id":"value=-instance","type":"instance","name":"value=","title":["Google","Devtools","Clouddebugger","V2","Variable#value="],"description":"","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/doc/google/devtools/clouddebugger/v2/data.rb#L235","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Simple value of the variable."}]},{"id":"type-instance","type":"instance","name":"type","title":["Google","Devtools","Clouddebugger","V2","Variable#type"],"description":"","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/doc/google/devtools/clouddebugger/v2/data.rb#L235","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Variable type (e.g. +MyClass+). If the variable is split with\n+var_table_index+, +type+ goes next to +value+. The interpretation of\na type is agent specific. It is recommended to include the dynamic type\nrather than a static type of an object."}]},{"id":"type=-instance","type":"instance","name":"type=","title":["Google","Devtools","Clouddebugger","V2","Variable#type="],"description":"","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/doc/google/devtools/clouddebugger/v2/data.rb#L235","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Variable type (e.g. +MyClass+). If the variable is split with\n+var_table_index+, +type+ goes next to +value+. The interpretation of\na type is agent specific. It is recommended to include the dynamic type\nrather than a static type of an object."}]},{"id":"members-instance","type":"instance","name":"members","title":["Google","Devtools","Clouddebugger","V2","Variable#members"],"description":"","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/doc/google/devtools/clouddebugger/v2/data.rb#L235","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Array&lt;<a data-custom-type=\"google/devtools/clouddebugger/v2/variable\">Google::Devtools::Clouddebugger::V2::Variable</a>&gt;"],"description":"Members contained or pointed to by the variable."}]},{"id":"members=-instance","type":"instance","name":"members=","title":["Google","Devtools","Clouddebugger","V2","Variable#members="],"description":"","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/doc/google/devtools/clouddebugger/v2/data.rb#L235","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Array&lt;<a data-custom-type=\"google/devtools/clouddebugger/v2/variable\">Google::Devtools::Clouddebugger::V2::Variable</a>&gt;"],"description":"Members contained or pointed to by the variable."}]},{"id":"var_table_index-instance","type":"instance","name":"var_table_index","title":["Google","Devtools","Clouddebugger","V2","Variable#var_table_index"],"description":"","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/doc/google/devtools/clouddebugger/v2/data.rb#L235","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Google::Protobuf::Int32Value"],"description":"Reference to a variable in the shared variable table. More than\none variable can reference the same variable in the table. The\n+var_table_index+ field is an index into +variable_table+ in Breakpoint."}]},{"id":"var_table_index=-instance","type":"instance","name":"var_table_index=","title":["Google","Devtools","Clouddebugger","V2","Variable#var_table_index="],"description":"","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/doc/google/devtools/clouddebugger/v2/data.rb#L235","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Google::Protobuf::Int32Value"],"description":"Reference to a variable in the shared variable table. More than\none variable can reference the same variable in the table. The\n+var_table_index+ field is an index into +variable_table+ in Breakpoint."}]},{"id":"status-instance","type":"instance","name":"status","title":["Google","Devtools","Clouddebugger","V2","Variable#status"],"description":"","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/doc/google/devtools/clouddebugger/v2/data.rb#L235","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/devtools/clouddebugger/v2/statusmessage\">Google::Devtools::Clouddebugger::V2::StatusMessage</a>"],"description":"Status associated with the variable. This field will usually stay\nunset. A status of a single variable only applies to that variable or\nexpression. The rest of breakpoint data still remains valid. Variables\nmight be reported in error state even when breakpoint is not in final\nstate.</p>\n\n<p>The message may refer to variable name with +refers_to+ set to\n+VARIABLE_NAME+. Alternatively +refers_to+ will be set to +VARIABLE_VALUE+.\nIn either case variable value and members will be unset.</p>\n\n<p>Example of error message applied to name: +Invalid expression syntax+.</p>\n\n<p>Example of information message applied to value: +Not captured+.</p>\n\n<p>Examples of error message applied to value:</p>\n\n<ul>\n  <li>+Malformed string+,</li>\n  <li>+Field f not found in class C+</li>\n  <li>+Null pointer dereference+</li>\n</ul>"}]},{"id":"status=-instance","type":"instance","name":"status=","title":["Google","Devtools","Clouddebugger","V2","Variable#status="],"description":"","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/doc/google/devtools/clouddebugger/v2/data.rb#L235","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/devtools/clouddebugger/v2/statusmessage\">Google::Devtools::Clouddebugger::V2::StatusMessage</a>"],"description":"Status associated with the variable. This field will usually stay\nunset. A status of a single variable only applies to that variable or\nexpression. The rest of breakpoint data still remains valid. Variables\nmight be reported in error state even when breakpoint is not in final\nstate.</p>\n\n<p>The message may refer to variable name with +refers_to+ set to\n+VARIABLE_NAME+. Alternatively +refers_to+ will be set to +VARIABLE_VALUE+.\nIn either case variable value and members will be unset.</p>\n\n<p>Example of error message applied to name: +Invalid expression syntax+.</p>\n\n<p>Example of information message applied to value: +Not captured+.</p>\n\n<p>Examples of error message applied to value:</p>\n\n<ul>\n  <li>+Malformed string+,</li>\n  <li>+Field f not found in class C+</li>\n  <li>+Null pointer dereference+</li>\n</ul>"}]}]}