{"id":"google/cloud/debugger/v2/controller2","name":"Controller2","title":["Google","Cloud","Debugger","V2","Controller2"],"description":"","source":"google-cloud-debugger/lib/google/cloud/debugger/v2.rb#L144","resources":[],"examples":[],"methods":[{"id":"new-class","type":"class","name":"new","title":["Google","Cloud","Debugger","V2","Controller2.new"],"description":"<p>The Controller service provides the API for orchestrating a collection of\ndebugger agents to perform debugging tasks. These agents are each attached\nto a process of an application which may include one or more replicas.</p>\n\n<p>The debugger agents register with the Controller to identify the application\nbeing debugged, the Debuggee. All agents that register with the same data,\nrepresent the same Debuggee, and are assigned the same +debuggee_id+.</p>\n\n<p>The debugger agents call the Controller to retrieve  the list of active\nBreakpoints. Agents with the same +debuggee_id+ get the same breakpoints\nlist. An agent that can fulfill the breakpoint request updates the\nController with the breakpoint result. The controller selects the first\nresult received and discards the rest of the results.\nAgents that poll again for active breakpoints will no longer have\nthe completed breakpoint in the list and should remove that breakpoint from\ntheir attached process.</p>\n\n<p>The Controller service does not provide a way to retrieve the results of\na completed breakpoint. This functionality is available using the Debugger\nservice.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/v2.rb#L196","resources":[],"examples":[],"params":[{"name":"credentials","types":["Google::Auth::Credentials","String","Hash","GRPC::Core::Channel","GRPC::Core::ChannelCredentials","Proc"],"description":"Provides the means for authenticating requests made by the client. This parameter can\nbe many types.\nA <code>Google::Auth::Credentials</code> uses a the properties of its represented keyfile for\nauthenticating requests made by this client.\nA <code>String</code> will be treated as the path to the keyfile to be used for the construction of\ncredentials for this client.\nA <code>Hash</code> will be treated as the contents of a keyfile to be used for the construction of\ncredentials for this client.\nA <code>GRPC::Core::Channel</code> will be used to make calls through.\nA <code>GRPC::Core::ChannelCredentials</code> for the setting up the RPC client. The channel credentials\nshould already be composed with a <code>GRPC::Core::CallCredentials</code> object.\nA <code>Proc</code> will be used as an updater_proc for the Grpc channel. The proc transforms the\nmetadata for requests, generally, to give OAuth credentials.","optional":true,"default":"nil","nullable":true},{"name":"scopes","types":["Array<String>"],"description":"The OAuth scopes for this service. This parameter is ignored if\nan updater_proc is supplied.","optional":true,"default":"nil","nullable":true},{"name":"client_config","types":["Hash"],"description":"A Hash for call options for each method. See\nGoogle::Gax#construct_settings for the structure of\nthis data. Falls back to the default config if not specified\nor the specified config is missing data points.","optional":true,"default":"nil","nullable":true},{"name":"timeout","types":["Numeric"],"description":"The default timeout, in seconds, for calls made through this client.","optional":true,"default":"nil","nullable":true},{"name":"metadata","types":["Hash"],"description":"Default metadata to be sent with each request. This can be overridden on a per call basis.","optional":true,"default":"nil","nullable":true},{"name":"exception_transformer","types":["Proc"],"description":"An optional proc that intercepts any exceptions raised during an API call to inject\ncustom error handling.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[]}]}