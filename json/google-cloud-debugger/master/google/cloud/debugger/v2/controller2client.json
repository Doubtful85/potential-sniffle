{"id":"google/cloud/debugger/v2/controller2client","name":"Controller2Client","title":["Google","Cloud","Debugger","V2","Controller2Client"],"description":"<p>The Controller service provides the API for orchestrating a collection of\ndebugger agents to perform debugging tasks. These agents are each attached\nto a process of an application which may include one or more replicas.</p>\n\n<p>The debugger agents register with the Controller to identify the application\nbeing debugged, the Debuggee. All agents that register with the same data,\nrepresent the same Debuggee, and are assigned the same +debuggee_id+.</p>\n\n<p>The debugger agents call the Controller to retrieve  the list of active\nBreakpoints. Agents with the same +debuggee_id+ get the same breakpoints\nlist. An agent that can fulfill the breakpoint request updates the\nController with the breakpoint result. The controller selects the first\nresult received and discards the rest of the results.\nAgents that poll again for active breakpoints will no longer have\nthe completed breakpoint in the list and should remove that breakpoint from\ntheir attached process.</p>\n\n<p>The Controller service does not provide a way to retrieve the results of\na completed breakpoint. This functionality is available using the Debugger\nservice.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/controller2_client.rb#L57","resources":[],"examples":[],"methods":[{"id":"initialize-constructor","type":"constructor","name":"initialize","title":["Google","Cloud","Debugger","V2","Controller2Client#initialize"],"description":"","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/controller2_client.rb#L109","resources":[],"examples":[],"params":[{"name":"credentials","types":["Google::Auth::Credentials","String","Hash","GRPC::Core::Channel","GRPC::Core::ChannelCredentials","Proc"],"description":"Provides the means for authenticating requests made by the client. This parameter can\nbe many types.\nA <code>Google::Auth::Credentials</code> uses a the properties of its represented keyfile for\nauthenticating requests made by this client.\nA <code>String</code> will be treated as the path to the keyfile to be used for the construction of\ncredentials for this client.\nA <code>Hash</code> will be treated as the contents of a keyfile to be used for the construction of\ncredentials for this client.\nA <code>GRPC::Core::Channel</code> will be used to make calls through.\nA <code>GRPC::Core::ChannelCredentials</code> for the setting up the RPC client. The channel credentials\nshould already be composed with a <code>GRPC::Core::CallCredentials</code> object.\nA <code>Proc</code> will be used as an updater_proc for the Grpc channel. The proc transforms the\nmetadata for requests, generally, to give OAuth credentials.","optional":true,"default":"nil","nullable":true},{"name":"scopes","types":["Array<String>"],"description":"The OAuth scopes for this service. This parameter is ignored if\nan updater_proc is supplied.","optional":true,"default":"ALL_SCOPES","nullable":false},{"name":"client_config","types":["Hash"],"description":"A Hash for call options for each method. See\nGoogle::Gax#construct_settings for the structure of\nthis data. Falls back to the default config if not specified\nor the specified config is missing data points.","optional":true,"default":"{}","nullable":false},{"name":"timeout","types":["Numeric"],"description":"The default timeout, in seconds, for calls made through this client.","optional":true,"default":"DEFAULT_TIMEOUT","nullable":false},{"name":"metadata","types":["Hash"],"description":"Default metadata to be sent with each request. This can be overridden on a per call basis.","optional":true,"default":"nil","nullable":true},{"name":"exception_transformer","types":["Proc"],"description":"An optional proc that intercepts any exceptions raised during an API call to inject\ncustom error handling.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/debugger/v2/controller2client\">Controller2Client</a>"],"description":"a new instance of Controller2Client"}]},{"id":"register_debuggee-instance","type":"instance","name":"register_debuggee","title":["Google","Cloud","Debugger","V2","Controller2Client#register_debuggee"],"description":"<p>Registers the debuggee with the controller service.</p>\n\n<p>All agents attached to the same application must call this method with\nexactly the same request content to get back the same stable +debuggee_id+.\nAgents should call this method again whenever +google.rpc.Code.NOT_FOUND+\nis returned from any controller method.</p>\n\n<p>This protocol allows the controller service to disable debuggees, recover\nfrom data loss, or change the +debuggee_id+ format. Agents must handle\n+debuggee_id+ value changing upon re-registration.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/controller2_client.rb#L235","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/debugger/v2\"\n\ncontroller2_client = Google::Cloud::Debugger::V2::Controller2.new\n\n# TODO: Initialize +debuggee+:\ndebuggee = {}\nresponse = controller2_client.register_debuggee(debuggee)"}],"params":[{"name":"debuggee","types":["Google::Devtools::Clouddebugger::V2::Debuggee | Hash"],"description":"Debuggee information to register.\nThe fields +project+, +uniquifier+, +description+ and +agent_version+\nof the debuggee must be set.\nA hash of the same form as <code>Google::Devtools::Clouddebugger::V2::Debuggee</code>\ncan also be provided.","optional":false,"nullable":false},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"Access the result along with the RPC operation","optional":true,"nullable":false},{"name":"yield.result","types":["Google::Devtools::Clouddebugger::V2::RegisterDebuggeeResponse"],"description":"","optional":false,"nullable":false},{"name":"yield.operation","types":["GRPC::ActiveCall::Operation"],"description":"","optional":false,"nullable":false}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["<a data-custom-type=\"google/devtools/clouddebugger/v2/registerdebuggeeresponse\">Google::Devtools::Clouddebugger::V2::RegisterDebuggeeResponse</a>"],"description":""}]},{"id":"list_active_breakpoints-instance","type":"instance","name":"list_active_breakpoints","title":["Google","Cloud","Debugger","V2","Controller2Client#list_active_breakpoints"],"description":"<p>Returns the list of all active breakpoints for the debuggee.</p>\n\n<p>The breakpoint specification (+location+, +condition+, and +expressions+\nfields) is semantically immutable, although the field values may\nchange. For example, an agent may update the location line number\nto reflect the actual line where the breakpoint was set, but this\ndoesn’t change the breakpoint semantics.</p>\n\n<p>This means that an agent does not need to check if a breakpoint has changed\nwhen it encounters the same breakpoint on a successive call.\nMoreover, an agent should remember the breakpoints that are completed\nuntil the controller removes them from the active list to avoid\nsetting those breakpoints again.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/controller2_client.rb#L291","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/debugger/v2\"\n\ncontroller2_client = Google::Cloud::Debugger::V2::Controller2.new\n\n# TODO: Initialize +debuggee_id+:\ndebuggee_id = ''\nresponse = controller2_client.list_active_breakpoints(debuggee_id)"}],"params":[{"name":"debuggee_id","types":["String"],"description":"Identifies the debuggee.","optional":false,"nullable":false},{"name":"wait_token","types":["String"],"description":"A token that, if specified, blocks the method call until the list\nof active breakpoints has changed, or a server-selected timeout has\nexpired. The value should be set from the +next_wait_token+ field in\nthe last response. The initial value should be set to +”init”+.","optional":true,"default":"nil","nullable":true},{"name":"success_on_timeout","types":["true","false"],"description":"If set to +true+ (recommended), returns +google.rpc.Code.OK+ status and\nsets the +wait_expired+ response field to +true+ when the server-selected\ntimeout has expired.</p>\n\n<p>If set to +false+ (deprecated), returns +google.rpc.Code.ABORTED+ status\nwhen the server-selected timeout has expired.","optional":true,"default":"nil","nullable":true},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"Access the result along with the RPC operation","optional":true,"nullable":false},{"name":"yield.result","types":["Google::Devtools::Clouddebugger::V2::ListActiveBreakpointsResponse"],"description":"","optional":false,"nullable":false},{"name":"yield.operation","types":["GRPC::ActiveCall::Operation"],"description":"","optional":false,"nullable":false}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["<a data-custom-type=\"google/devtools/clouddebugger/v2/listactivebreakpointsresponse\">Google::Devtools::Clouddebugger::V2::ListActiveBreakpointsResponse</a>"],"description":""}]},{"id":"update_active_breakpoint-instance","type":"instance","name":"update_active_breakpoint","title":["Google","Cloud","Debugger","V2","Controller2Client#update_active_breakpoint"],"description":"<p>Updates the breakpoint state or mutable fields.\nThe entire Breakpoint message must be sent back to the controller service.</p>\n\n<p>Updates to active breakpoint fields are only allowed if the new value\ndoes not change the breakpoint specification. Updates to the +location+,\n+condition+ and +expressions+ fields should not alter the breakpoint\nsemantics. These may only make changes such as canonicalizing a value\nor snapping the location to the correct line of code.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/v2/controller2_client.rb#L343","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/debugger/v2\"\n\ncontroller2_client = Google::Cloud::Debugger::V2::Controller2.new\n\n# TODO: Initialize +debuggee_id+:\ndebuggee_id = ''\n\n# TODO: Initialize +breakpoint+:\nbreakpoint = {}\nresponse = controller2_client.update_active_breakpoint(debuggee_id, breakpoint)"}],"params":[{"name":"debuggee_id","types":["String"],"description":"Identifies the debuggee being debugged.","optional":false,"nullable":false},{"name":"breakpoint","types":["Google::Devtools::Clouddebugger::V2::Breakpoint | Hash"],"description":"Updated breakpoint information.\nThe field +id+ must be set.\nThe agent must echo all Breakpoint specification fields in the update.\nA hash of the same form as <code>Google::Devtools::Clouddebugger::V2::Breakpoint</code>\ncan also be provided.","optional":false,"nullable":false},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"Access the result along with the RPC operation","optional":true,"nullable":false},{"name":"yield.result","types":["Google::Devtools::Clouddebugger::V2::UpdateActiveBreakpointResponse"],"description":"","optional":false,"nullable":false},{"name":"yield.operation","types":["GRPC::ActiveCall::Operation"],"description":"","optional":false,"nullable":false}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["<a data-custom-type=\"google/devtools/clouddebugger/v2/updateactivebreakpointresponse\">Google::Devtools::Clouddebugger::V2::UpdateActiveBreakpointResponse</a>"],"description":""}]}]}