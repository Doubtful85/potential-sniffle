{"id":"google/cloud/debugger/middleware","name":"Middleware","title":["Google","Cloud","Debugger","Middleware"],"description":"<p>Rack Middleware implementation that supports Stackdriver Debugger Agent\nin Rack-based Ruby frameworks. It instantiates a new debugger agent if\none isnâ€™t given already. It helps optimize Debugger Agent Tracer\nperformance by suspending and resuming the tracer between each request.</p>\n\n<p>To use this middleware, simply install it in your Rack configuration.\nThe middleware will take care of registering itself with the\nStackdriver Debugger and activating the debugger agent. The location\nof the middleware in the middleware stack matters: breakpoints will be\ndetected in middleware appearing after but not before this middleware.</p>\n\n<p>For best results, you should also call <a data-custom-type=\"google/cloud/debugger/middleware\" data-method=\"start_agents-class\">Middleware.start_agents</a>\nduring application initialization. See its documentation for details.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/middleware.rb#L39","resources":[],"examples":[],"methods":[{"id":"start_agents-class","type":"class","name":"start_agents","title":["Google","Cloud","Debugger","Middleware.start_agents"],"description":"<p>This should be called once the application determines that it is safe\nto start background threads and open gRPC connections. It informs\nthe middleware system that it can start debugger agents.</p>\n\n<p>Generally, this matters if the application forks worker processes;\nthis method should be called only after workers are forked, since\nthreads and network connections interact badly with fork. For\nexample, when running Puma in\n<a href=\"https://github.com/puma/puma#clustered-mode\">clustered mode</a>, this\nmethod should be called in an <code>on_worker_boot</code> block.</p>\n\n<p>If the application does no forking, this method can be called any\ntime early in the application initialization process.</p>\n\n<p>If <a data-custom-type=\"google/cloud/debugger/middleware\" data-method=\"start_agents-class\">Middleware.start_agents</a> is never called, the debugger agent will\nbe started when the first request is received. This should be safe,\nbut it will probably mean breakpoints will not be recognized during\nthat first request. For best results, an application should call this\nmethod at the appropriate time.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/middleware.rb#L87","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"initialize-constructor","type":"constructor","name":"initialize","title":["Google","Cloud","Debugger","Middleware#initialize"],"description":"<p>Create a new Debugger Middleware.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/middleware.rb#L108","resources":[],"examples":[],"params":[{"name":"app","types":["Rack Application"],"description":"Rack application","optional":false,"nullable":false},{"name":"debugger","types":["Google::Cloud::Debugger::Project"],"description":"A debugger to be\nused by this middleware. If not given, will construct a new one\nusing the other parameters.","optional":true,"default":"nil","nullable":true},{"name":"*kwargs","types":["Hash"],"description":"Hash of configuration settings. Used for\nbackward API compatibility. See the <a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/stackdriver/guides/instrumentation_configuration\">Configuration\nGuide</a>\nfor the prefered way to set configuration parameters.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/debugger/middleware\">Google::Cloud::Debugger::Middleware</a>"],"description":"A new\nGoogle::Cloud::Debugger::Middleware instance"}]},{"id":"call-instance","type":"instance","name":"call","title":["Google","Cloud","Debugger","Middleware#call"],"description":"<p>Rack middleware entry point. In most Rack based frameworks, a request\nis served by one thread. It enables/resume the debugger breakpoints\ntracing and stops/pauses the tracing afterwards to help improve\ndebugger performance.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/middleware.rb#L139","resources":[],"examples":[],"params":[{"name":"env","types":["Hash"],"description":"Rack environment hash","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Rack::Response"],"description":"The response from downstream Rack app"}]}]}