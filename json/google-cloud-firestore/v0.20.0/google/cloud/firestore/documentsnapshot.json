{"id":"google/cloud/firestore/documentsnapshot","name":"DocumentSnapshot","title":["Google","Cloud","Firestore","DocumentSnapshot"],"description":"<h1 id=\"documentsnapshot\">DocumentSnapshot</h1>\n\n<p>A document snapshot object is an immutable representation for a\ndocument in a Cloud Firestore database.</p>\n\n<p>The snapshot can reference a non-existing document.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_snapshot.rb#L43","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document snapshot\nnyc_snap = firestore.doc(\"cities/NYC\").get\n\n# Get the document data\nnyc_snap[:population] #=> 1000000"}],"methods":[{"id":"document_id-instance","type":"instance","name":"document_id","title":["Google","Cloud","Firestore","DocumentSnapshot#document_id"],"description":"<p>The document identifier for the document snapshot.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_snapshot.rb#L52","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"document identifier."}]},{"id":"document_path-instance","type":"instance","name":"document_path","title":["Google","Cloud","Firestore","DocumentSnapshot#document_path"],"description":"<p>A string representing the path of the document, relative to the\ndocument root of the database.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_snapshot.rb#L61","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"document path."}]},{"id":"ref-instance","type":"instance","name":"ref","title":["Google","Cloud","Firestore","DocumentSnapshot#ref"],"description":"<p>The document reference object for the data.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_snapshot.rb#L91","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document snapshot\nnyc_snap = firestore.doc(\"cities/NYC\").get\n\n# Get the document reference\nnyc_ref = nyc_snap.ref"}],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/firestore/documentreference\">DocumentReference</a>"],"description":"document reference."}]},{"id":"parent-instance","type":"instance","name":"parent","title":["Google","Cloud","Firestore","DocumentSnapshot#parent"],"description":"<p>The collection the document snapshot belongs to.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_snapshot.rb#L112","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document snapshot\nnyc_snap = firestore.doc(\"cities/NYC\").get\n\n# Get the document's parent collection\ncities_col = nyc_snap.parent"}],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/firestore/collectionreference\">CollectionReference</a>"],"description":"parent collection."}]},{"id":"data-instance","type":"instance","name":"data","title":["Google","Cloud","Firestore","DocumentSnapshot#data"],"description":"<p>Retrieves the document data.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_snapshot.rb#L135","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nnyc_snap = firestore.doc(\"cities/NYC\").get\n\n# Get the document data\nnyc_snap.data[:population] #=> 1000000"}],"params":[],"exceptions":[],"returns":[{"types":["Hash"],"description":"The document data."}]},{"id":"get-instance","type":"instance","name":"get","title":["Google","Cloud","Firestore","DocumentSnapshot#get"],"description":"<p>Retrieves the document data.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_snapshot.rb#L189","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nnyc_snap = firestore.doc(\"cities/NYC\").get\n\nnyc_snap.get(:population) #=> 1000000"},{"caption":"<p>Accessing data using []:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nnyc_snap = firestore.doc(\"cities/NYC\").get\n\nnyc_snap[:population] #=> 1000000"},{"caption":"<p>Nested data can be accessing with field path:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfrank_snap = firestore.doc(\"users/frank\").get\n\nfrank_snap.get(\"favorites.food\") #=> \"Pizza\""},{"caption":"<p>Nested data can be accessing with FieldPath object:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nuser_snap = firestore.doc(\"users/frank\").get\n\nnested_field_path = firestore.field_path :favorites, :food\nuser_snap.get(nested_field_path) #=> \"Pizza\""}],"params":[{"name":"field_path","types":["FieldPath","String","Symbol"],"description":"A field path\nrepresenting the path of the data to select. A field path can\nrepresent as a string of individual fields joined by “.”. Fields\ncontaining <code>~</code>, <code>*</code>, <code>/</code>, <code>[</code>, <code>]</code>, and <code>.</code> cannot be in a dotted\nstring, and should provided using a <a data-custom-type=\"google/cloud/firestore/fieldpath\">FieldPath</a> object instead.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Object"],"description":"The data at the field path."}]},{"id":"created_at-instance","type":"instance","name":"created_at","title":["Google","Cloud","Firestore","DocumentSnapshot#created_at"],"description":"<p>The time at which the document was created.</p>\n\n<p>This value increases when a document is deleted then recreated.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_snapshot.rb#L217","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Time"],"description":"The time the document was was created"}]},{"id":"updated_at-instance","type":"instance","name":"updated_at","title":["Google","Cloud","Firestore","DocumentSnapshot#updated_at"],"description":"<p>The time at which the document was last changed.</p>\n\n<p>This value is initally set to the <code>created_at</code> on document creation,\nand increases each time the document is updated.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_snapshot.rb#L231","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Time"],"description":"The time the document was was last changed"}]},{"id":"read_at-instance","type":"instance","name":"read_at","title":["Google","Cloud","Firestore","DocumentSnapshot#read_at"],"description":"<p>The time at which the document was read.</p>\n\n<p>This value is set even if the document does not exist.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_snapshot.rb#L244","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Time"],"description":"The time the document was read"}]},{"id":"exists?-instance","type":"instance","name":"exists?","title":["Google","Cloud","Firestore","DocumentSnapshot#exists?"],"description":"<p>Determines whether the document exists.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_snapshot.rb#L264","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nnyc_snap = firestore.doc(\"cities/NYC\").get\n\n# Does NYC exist?\nnyc_snap.exists? #=> true"}],"params":[],"exceptions":[],"returns":[{"types":["Boolean"],"description":"Whether the document exists."}]},{"id":"missing?-instance","type":"instance","name":"missing?","title":["Google","Cloud","Firestore","DocumentSnapshot#missing?"],"description":"<p>Determines whether the document is missing.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_snapshot.rb#L283","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\natlantis_snap = firestore.doc(\"cities/Atlantis\").get\n\n# Does Atlantis exist?\natlantis_snap.missing? #=> true"}],"params":[],"exceptions":[],"returns":[{"types":["Boolean"],"description":"Whether the document is missing."}]}]}