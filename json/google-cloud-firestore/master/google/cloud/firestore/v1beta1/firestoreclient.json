{"id":"google/cloud/firestore/v1beta1/firestoreclient","name":"FirestoreClient","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient"],"description":"<p>The Cloud Firestore service.</p>\n\n<p>This service exposes several types of comparable timestamps:</p>\n\n<ul>\n  <li>+create_time+ - The time at which a document was created. Changes only\nwhen a document is deleted, then re-created. Increases in a strict\nmonotonic fashion.</li>\n  <li>+update_time+ - The time at which a document was last updated. Changes\nevery time a document is modified. Does not change when a write results\nin no modifications. Increases in a strict monotonic fashion.</li>\n  <li>+read_time+ - The time at which a particular state was observed. Used\nto denote a consistent snapshot of the database or the time at which a\nDocument was observed to not exist.</li>\n  <li>+commit_time+ - The time at which the writes in a transaction were\ncommitted. Any read with an equal or greater +read_time+ is guaranteed\nto see the effects of the transaction.</li>\n</ul>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L53","resources":[],"examples":[],"methods":[{"id":"database_root_path-class","type":"class","name":"database_root_path","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient.database_root_path"],"description":"<p>Returns a fully-qualified database_root resource name string.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L117","resources":[],"examples":[],"params":[{"name":"project","types":["String"],"description":"","optional":false,"nullable":false},{"name":"database","types":["String"],"description":"","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["String"],"description":""}]},{"id":"document_root_path-class","type":"class","name":"document_root_path","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient.document_root_path"],"description":"<p>Returns a fully-qualified document_root resource name string.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L128","resources":[],"examples":[],"params":[{"name":"project","types":["String"],"description":"","optional":false,"nullable":false},{"name":"database","types":["String"],"description":"","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["String"],"description":""}]},{"id":"document_path_path-class","type":"class","name":"document_path_path","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient.document_path_path"],"description":"<p>Returns a fully-qualified document_path resource name string.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L140","resources":[],"examples":[],"params":[{"name":"project","types":["String"],"description":"","optional":false,"nullable":false},{"name":"database","types":["String"],"description":"","optional":false,"nullable":false},{"name":"document_path","types":["String"],"description":"","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["String"],"description":""}]},{"id":"any_path_path-class","type":"class","name":"any_path_path","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient.any_path_path"],"description":"<p>Returns a fully-qualified any_path resource name string.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L154","resources":[],"examples":[],"params":[{"name":"project","types":["String"],"description":"","optional":false,"nullable":false},{"name":"database","types":["String"],"description":"","optional":false,"nullable":false},{"name":"document","types":["String"],"description":"","optional":false,"nullable":false},{"name":"any_path","types":["String"],"description":"","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["String"],"description":""}]},{"id":"initialize-constructor","type":"constructor","name":"initialize","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient#initialize"],"description":"","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L192","resources":[],"examples":[],"params":[{"name":"credentials","types":["Google::Auth::Credentials","String","Hash","GRPC::Core::Channel","GRPC::Core::ChannelCredentials","Proc"],"description":"Provides the means for authenticating requests made by the client. This parameter can\nbe many types.\nA <code>Google::Auth::Credentials</code> uses a the properties of its represented keyfile for\nauthenticating requests made by this client.\nA <code>String</code> will be treated as the path to the keyfile to be used for the construction of\ncredentials for this client.\nA <code>Hash</code> will be treated as the contents of a keyfile to be used for the construction of\ncredentials for this client.\nA <code>GRPC::Core::Channel</code> will be used to make calls through.\nA <code>GRPC::Core::ChannelCredentials</code> for the setting up the RPC client. The channel credentials\nshould already be composed with a <code>GRPC::Core::CallCredentials</code> object.\nA <code>Proc</code> will be used as an updater_proc for the Grpc channel. The proc transforms the\nmetadata for requests, generally, to give OAuth credentials.","optional":true,"default":"nil","nullable":true},{"name":"scopes","types":["Array<String>"],"description":"The OAuth scopes for this service. This parameter is ignored if\nan updater_proc is supplied.","optional":true,"default":"ALL_SCOPES","nullable":false},{"name":"client_config","types":["Hash"],"description":"A Hash for call options for each method. See\nGoogle::Gax#construct_settings for the structure of\nthis data. Falls back to the default config if not specified\nor the specified config is missing data points.","optional":true,"default":"{}","nullable":false},{"name":"timeout","types":["Numeric"],"description":"The default timeout, in seconds, for calls made through this client.","optional":true,"default":"DEFAULT_TIMEOUT","nullable":false},{"name":"metadata","types":["Hash"],"description":"Default metadata to be sent with each request. This can be overridden on a per call basis.","optional":true,"default":"nil","nullable":true},{"name":"exception_transformer","types":["Proc"],"description":"An optional proc that intercepts any exceptions raised during an API call to inject\ncustom error handling.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/firestore/v1beta1/firestoreclient\">FirestoreClient</a>"],"description":"a new instance of FirestoreClient"}]},{"id":"get_document-instance","type":"instance","name":"get_document","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient#get_document"],"description":"<p>Gets a single document.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L369","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore/v1beta1\"\n\nfirestore_client = Google::Cloud::Firestore::V1beta1.new\nformatted_name = Google::Cloud::Firestore::V1beta1::FirestoreClient.any_path_path(\"[PROJECT]\", \"[DATABASE]\", \"[DOCUMENT]\", \"[ANY_PATH]\")\nresponse = firestore_client.get_document(formatted_name)"}],"params":[{"name":"name","types":["String"],"description":"The resource name of the Document to get. In the format:\n+projects/{project_id}/databases/{database_id}/documents/{document_path}+.","optional":false,"nullable":false},{"name":"mask","types":["Google::Firestore::V1beta1::DocumentMask | Hash"],"description":"The fields to return. If not set, returns all fields.</p>\n\n<p>If the document has a field that is not present in this mask, that field\nwill not be returned in the response.\nA hash of the same form as <code>Google::Firestore::V1beta1::DocumentMask</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"transaction","types":["String"],"description":"Reads the document in a transaction.","optional":true,"default":"nil","nullable":true},{"name":"read_time","types":["Google::Protobuf::Timestamp | Hash"],"description":"Reads the version of the document at the given time.\nThis may not be older than 60 seconds.\nA hash of the same form as <code>Google::Protobuf::Timestamp</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"Access the result along with the RPC operation","optional":true,"nullable":false},{"name":"yield.result","types":["Google::Firestore::V1beta1::Document"],"description":"","optional":false,"nullable":false},{"name":"yield.operation","types":["GRPC::ActiveCall::Operation"],"description":"","optional":false,"nullable":false}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["<a data-custom-type=\"google/firestore/v1beta1/document\">Google::Firestore::V1beta1::Document</a>"],"description":""}]},{"id":"list_documents-instance","type":"instance","name":"list_documents","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient#list_documents"],"description":"<p>Lists documents.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L462","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore/v1beta1\"\n\nfirestore_client = Google::Cloud::Firestore::V1beta1.new\nformatted_parent = Google::Cloud::Firestore::V1beta1::FirestoreClient.any_path_path(\"[PROJECT]\", \"[DATABASE]\", \"[DOCUMENT]\", \"[ANY_PATH]\")\n\n# TODO: Initialize +collection_id+:\ncollection_id = ''\n\n# Iterate over all results.\nfirestore_client.list_documents(formatted_parent, collection_id).each do |element|\n  # Process element.\nend\n\n# Or iterate over results one page at a time.\nfirestore_client.list_documents(formatted_parent, collection_id).each_page do |page|\n  # Process each page at a time.\n  page.each do |element|\n    # Process element.\n  end\nend"}],"params":[{"name":"parent","types":["String"],"description":"The parent resource name. In the format:\n+projects/{project_id}/databases/{database_id}/documents+ or\n+projects/{project_id}/databases/{database_id}/documents/{document_path}+.\nFor example:\n+projects/my-project/databases/my-database/documents+ or\n+projects/my-project/databases/my-database/documents/chatrooms/my-chatroom+","optional":false,"nullable":false},{"name":"collection_id","types":["String"],"description":"The collection ID, relative to +parent+, to list. For example: +chatrooms+\nor +messages+.","optional":false,"nullable":false},{"name":"page_size","types":["Integer"],"description":"The maximum number of resources contained in the underlying API\nresponse. If page streaming is performed per-resource, this\nparameter does not affect the return value. If page streaming is\nperformed per-page, this determines the maximum number of\nresources in a page.","optional":true,"default":"nil","nullable":true},{"name":"order_by","types":["String"],"description":"The order to sort results by. For example: +priority desc, name+.","optional":true,"default":"nil","nullable":true},{"name":"mask","types":["Google::Firestore::V1beta1::DocumentMask | Hash"],"description":"The fields to return. If not set, returns all fields.</p>\n\n<p>If a document has a field that is not present in this mask, that field\nwill not be returned in the response.\nA hash of the same form as <code>Google::Firestore::V1beta1::DocumentMask</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"transaction","types":["String"],"description":"Reads documents in a transaction.","optional":true,"default":"nil","nullable":true},{"name":"read_time","types":["Google::Protobuf::Timestamp | Hash"],"description":"Reads documents as they were at the given time.\nThis may not be older than 60 seconds.\nA hash of the same form as <code>Google::Protobuf::Timestamp</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"show_missing","types":["true","false"],"description":"If the list should show missing documents. A missing document is a\ndocument that does not exist but has sub-documents. These documents will\nbe returned with a key but will not have fields, Google::Firestore::V1beta1::Document#create_time,\nor Google::Firestore::V1beta1::Document#update_time set.</p>\n\n<p>Requests with +show_missing+ may not specify +where+ or\n+order_by+.","optional":true,"default":"nil","nullable":true},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"Access the result along with the RPC operation","optional":true,"nullable":false},{"name":"yield.result","types":["Google::Gax::PagedEnumerable<Google::Firestore::V1beta1::Document>"],"description":"","optional":false,"nullable":false},{"name":"yield.operation","types":["GRPC::ActiveCall::Operation"],"description":"","optional":false,"nullable":false}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["Google::Gax::PagedEnumerable&lt;<a data-custom-type=\"google/firestore/v1beta1/document\">Google::Firestore::V1beta1::Document</a>&gt;"],"description":"An enumerable of Google::Firestore::V1beta1::Document instances.\nSee Google::Gax::PagedEnumerable documentation for other\noperations such as per-page iteration or access to the response\nobject."}]},{"id":"create_document-instance","type":"instance","name":"create_document","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient#create_document"],"description":"<p>Creates a new document.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L534","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore/v1beta1\"\n\nfirestore_client = Google::Cloud::Firestore::V1beta1.new\nformatted_parent = Google::Cloud::Firestore::V1beta1::FirestoreClient.any_path_path(\"[PROJECT]\", \"[DATABASE]\", \"[DOCUMENT]\", \"[ANY_PATH]\")\n\n# TODO: Initialize +collection_id+:\ncollection_id = ''\n\n# TODO: Initialize +document_id+:\ndocument_id = ''\n\n# TODO: Initialize +document+:\ndocument = {}\nresponse = firestore_client.create_document(formatted_parent, collection_id, document_id, document)"}],"params":[{"name":"parent","types":["String"],"description":"The parent resource. For example:\n+projects/{project_id}/databases/{database_id}/documents+ or\n+projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}+","optional":false,"nullable":false},{"name":"collection_id","types":["String"],"description":"The collection ID, relative to +parent+, to list. For example: +chatrooms+.","optional":false,"nullable":false},{"name":"document_id","types":["String"],"description":"The client-assigned document ID to use for this document.</p>\n\n<p>Optional. If not specified, an ID will be assigned by the service.","optional":false,"nullable":false},{"name":"document","types":["Google::Firestore::V1beta1::Document | Hash"],"description":"The document to create. +name+ must not be set.\nA hash of the same form as <code>Google::Firestore::V1beta1::Document</code>\ncan also be provided.","optional":false,"nullable":false},{"name":"mask","types":["Google::Firestore::V1beta1::DocumentMask | Hash"],"description":"The fields to return. If not set, returns all fields.</p>\n\n<p>If the document has a field that is not present in this mask, that field\nwill not be returned in the response.\nA hash of the same form as <code>Google::Firestore::V1beta1::DocumentMask</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"Access the result along with the RPC operation","optional":true,"nullable":false},{"name":"yield.result","types":["Google::Firestore::V1beta1::Document"],"description":"","optional":false,"nullable":false},{"name":"yield.operation","types":["GRPC::ActiveCall::Operation"],"description":"","optional":false,"nullable":false}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["<a data-custom-type=\"google/firestore/v1beta1/document\">Google::Firestore::V1beta1::Document</a>"],"description":""}]},{"id":"update_document-instance","type":"instance","name":"update_document","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient#update_document"],"description":"<p>Updates or inserts a document.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L602","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore/v1beta1\"\n\nfirestore_client = Google::Cloud::Firestore::V1beta1.new\n\n# TODO: Initialize +document+:\ndocument = {}\n\n# TODO: Initialize +update_mask+:\nupdate_mask = {}\nresponse = firestore_client.update_document(document, update_mask)"}],"params":[{"name":"document","types":["Google::Firestore::V1beta1::Document | Hash"],"description":"The updated document.\nCreates the document if it does not already exist.\nA hash of the same form as <code>Google::Firestore::V1beta1::Document</code>\ncan also be provided.","optional":false,"nullable":false},{"name":"update_mask","types":["Google::Firestore::V1beta1::DocumentMask | Hash"],"description":"The fields to update.\nNone of the field paths in the mask may contain a reserved name.</p>\n\n<p>If the document exists on the server and has fields not referenced in the\nmask, they are left unchanged.\nFields referenced in the mask, but not present in the input document, are\ndeleted from the document on the server.\nA hash of the same form as <code>Google::Firestore::V1beta1::DocumentMask</code>\ncan also be provided.","optional":false,"nullable":false},{"name":"mask","types":["Google::Firestore::V1beta1::DocumentMask | Hash"],"description":"The fields to return. If not set, returns all fields.</p>\n\n<p>If the document has a field that is not present in this mask, that field\nwill not be returned in the response.\nA hash of the same form as <code>Google::Firestore::V1beta1::DocumentMask</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"current_document","types":["Google::Firestore::V1beta1::Precondition | Hash"],"description":"An optional precondition on the document.\nThe request will fail if this is set and not met by the target document.\nA hash of the same form as <code>Google::Firestore::V1beta1::Precondition</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"Access the result along with the RPC operation","optional":true,"nullable":false},{"name":"yield.result","types":["Google::Firestore::V1beta1::Document"],"description":"","optional":false,"nullable":false},{"name":"yield.operation","types":["GRPC::ActiveCall::Operation"],"description":"","optional":false,"nullable":false}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["<a data-custom-type=\"google/firestore/v1beta1/document\">Google::Firestore::V1beta1::Document</a>"],"description":""}]},{"id":"delete_document-instance","type":"instance","name":"delete_document","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient#delete_document"],"description":"<p>Deletes a document.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L643","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore/v1beta1\"\n\nfirestore_client = Google::Cloud::Firestore::V1beta1.new\nformatted_name = Google::Cloud::Firestore::V1beta1::FirestoreClient.any_path_path(\"[PROJECT]\", \"[DATABASE]\", \"[DOCUMENT]\", \"[ANY_PATH]\")\nfirestore_client.delete_document(formatted_name)"}],"params":[{"name":"name","types":["String"],"description":"The resource name of the Document to delete. In the format:\n+projects/{project_id}/databases/{database_id}/documents/{document_path}+.","optional":false,"nullable":false},{"name":"current_document","types":["Google::Firestore::V1beta1::Precondition | Hash"],"description":"An optional precondition on the document.\nThe request will fail if this is set and not met by the target document.\nA hash of the same form as <code>Google::Firestore::V1beta1::Precondition</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"Access the result along with the RPC operation","optional":true,"nullable":false},{"name":"yield.result","types":null,"description":"[]","optional":false,"nullable":false},{"name":"yield.operation","types":["GRPC::ActiveCall::Operation"],"description":"","optional":false,"nullable":false}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[]},{"id":"batch_get_documents-instance","type":"instance","name":"batch_get_documents","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient#batch_get_documents"],"description":"<p>Gets multiple documents.</p>\n\n<p>Documents returned by this method are not guaranteed to be returned in the\nsame order that they were requested.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L710","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore/v1beta1\"\n\nfirestore_client = Google::Cloud::Firestore::V1beta1.new\nformatted_database = Google::Cloud::Firestore::V1beta1::FirestoreClient.database_root_path(\"[PROJECT]\", \"[DATABASE]\")\n\n# TODO: Initialize +documents+:\ndocuments = []\nfirestore_client.batch_get_documents(formatted_database, documents).each do |element|\n  # Process element.\nend"}],"params":[{"name":"database","types":["String"],"description":"The database name. In the format:\n+projects/{project_id}/databases/{database_id}+.","optional":false,"nullable":false},{"name":"documents","types":["Array<String>"],"description":"The names of the documents to retrieve. In the format:\n+projects/{project_id}/databases/{database_id}/documents/{document_path}+.\nThe request will fail if any of the document is not a child resource of the\ngiven +database+. Duplicate names will be elided.","optional":false,"nullable":false},{"name":"mask","types":["Google::Firestore::V1beta1::DocumentMask | Hash"],"description":"The fields to return. If not set, returns all fields.</p>\n\n<p>If a document has a field that is not present in this mask, that field will\nnot be returned in the response.\nA hash of the same form as <code>Google::Firestore::V1beta1::DocumentMask</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"transaction","types":["String"],"description":"Reads documents in a transaction.","optional":true,"default":"nil","nullable":true},{"name":"new_transaction","types":["Google::Firestore::V1beta1::TransactionOptions | Hash"],"description":"Starts a new transaction and reads the documents.\nDefaults to a read-only transaction.\nThe new transaction ID will be returned as the first response in the\nstream.\nA hash of the same form as <code>Google::Firestore::V1beta1::TransactionOptions</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"read_time","types":["Google::Protobuf::Timestamp | Hash"],"description":"Reads documents as they were at the given time.\nThis may not be older than 60 seconds.\nA hash of the same form as <code>Google::Protobuf::Timestamp</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["Enumerable&lt;<a data-custom-type=\"google/firestore/v1beta1/batchgetdocumentsresponse\">Google::Firestore::V1beta1::BatchGetDocumentsResponse</a>&gt;"],"description":"An enumerable of Google::Firestore::V1beta1::BatchGetDocumentsResponse instances."}]},{"id":"begin_transaction-instance","type":"instance","name":"begin_transaction","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient#begin_transaction"],"description":"<p>Starts a new transaction.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L755","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore/v1beta1\"\n\nfirestore_client = Google::Cloud::Firestore::V1beta1.new\nformatted_database = Google::Cloud::Firestore::V1beta1::FirestoreClient.database_root_path(\"[PROJECT]\", \"[DATABASE]\")\nresponse = firestore_client.begin_transaction(formatted_database)"}],"params":[{"name":"database","types":["String"],"description":"The database name. In the format:\n+projects/{project_id}/databases/{database_id}+.","optional":false,"nullable":false},{"name":"options_","types":["Google::Firestore::V1beta1::TransactionOptions | Hash"],"description":"The options for the transaction.\nDefaults to a read-write transaction.\nA hash of the same form as <code>Google::Firestore::V1beta1::TransactionOptions</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"Access the result along with the RPC operation","optional":true,"nullable":false},{"name":"yield.result","types":["Google::Firestore::V1beta1::BeginTransactionResponse"],"description":"","optional":false,"nullable":false},{"name":"yield.operation","types":["GRPC::ActiveCall::Operation"],"description":"","optional":false,"nullable":false}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["<a data-custom-type=\"google/firestore/v1beta1/begintransactionresponse\">Google::Firestore::V1beta1::BeginTransactionResponse</a>"],"description":""}]},{"id":"commit-instance","type":"instance","name":"commit","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient#commit"],"description":"<p>Commits a transaction, while optionally updating documents.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L799","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore/v1beta1\"\n\nfirestore_client = Google::Cloud::Firestore::V1beta1.new\nformatted_database = Google::Cloud::Firestore::V1beta1::FirestoreClient.database_root_path(\"[PROJECT]\", \"[DATABASE]\")\n\n# TODO: Initialize +writes+:\nwrites = []\nresponse = firestore_client.commit(formatted_database, writes)"}],"params":[{"name":"database","types":["String"],"description":"The database name. In the format:\n+projects/{project_id}/databases/{database_id}+.","optional":false,"nullable":false},{"name":"writes","types":["Array<Google::Firestore::V1beta1::Write | Hash>"],"description":"The writes to apply.</p>\n\n<p>Always executed atomically and in order.\nA hash of the same form as <code>Google::Firestore::V1beta1::Write</code>\ncan also be provided.","optional":false,"nullable":false},{"name":"transaction","types":["String"],"description":"If set, applies all writes in this transaction, and commits it.","optional":true,"default":"nil","nullable":true},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"Access the result along with the RPC operation","optional":true,"nullable":false},{"name":"yield.result","types":["Google::Firestore::V1beta1::CommitResponse"],"description":"","optional":false,"nullable":false},{"name":"yield.operation","types":["GRPC::ActiveCall::Operation"],"description":"","optional":false,"nullable":false}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["<a data-custom-type=\"google/firestore/v1beta1/commitresponse\">Google::Firestore::V1beta1::CommitResponse</a>"],"description":""}]},{"id":"rollback-instance","type":"instance","name":"rollback","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient#rollback"],"description":"<p>Rolls back a transaction.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L838","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore/v1beta1\"\n\nfirestore_client = Google::Cloud::Firestore::V1beta1.new\nformatted_database = Google::Cloud::Firestore::V1beta1::FirestoreClient.database_root_path(\"[PROJECT]\", \"[DATABASE]\")\n\n# TODO: Initialize +transaction+:\ntransaction = ''\nfirestore_client.rollback(formatted_database, transaction)"}],"params":[{"name":"database","types":["String"],"description":"The database name. In the format:\n+projects/{project_id}/databases/{database_id}+.","optional":false,"nullable":false},{"name":"transaction","types":["String"],"description":"The transaction to roll back.","optional":false,"nullable":false},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"Access the result along with the RPC operation","optional":true,"nullable":false},{"name":"yield.result","types":null,"description":"[]","optional":false,"nullable":false},{"name":"yield.operation","types":["GRPC::ActiveCall::Operation"],"description":"","optional":false,"nullable":false}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[]},{"id":"run_query-instance","type":"instance","name":"run_query","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient#run_query"],"description":"<p>Runs a query.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L895","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore/v1beta1\"\n\nfirestore_client = Google::Cloud::Firestore::V1beta1.new\nformatted_parent = Google::Cloud::Firestore::V1beta1::FirestoreClient.any_path_path(\"[PROJECT]\", \"[DATABASE]\", \"[DOCUMENT]\", \"[ANY_PATH]\")\nfirestore_client.run_query(formatted_parent).each do |element|\n  # Process element.\nend"}],"params":[{"name":"parent","types":["String"],"description":"The parent resource name. In the format:\n+projects/{project_id}/databases/{database_id}/documents+ or\n+projects/{project_id}/databases/{database_id}/documents/{document_path}+.\nFor example:\n+projects/my-project/databases/my-database/documents+ or\n+projects/my-project/databases/my-database/documents/chatrooms/my-chatroom+","optional":false,"nullable":false},{"name":"structured_query","types":["Google::Firestore::V1beta1::StructuredQuery | Hash"],"description":"A structured query.\nA hash of the same form as <code>Google::Firestore::V1beta1::StructuredQuery</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"transaction","types":["String"],"description":"Reads documents in a transaction.","optional":true,"default":"nil","nullable":true},{"name":"new_transaction","types":["Google::Firestore::V1beta1::TransactionOptions | Hash"],"description":"Starts a new transaction and reads the documents.\nDefaults to a read-only transaction.\nThe new transaction ID will be returned as the first response in the\nstream.\nA hash of the same form as <code>Google::Firestore::V1beta1::TransactionOptions</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"read_time","types":["Google::Protobuf::Timestamp | Hash"],"description":"Reads documents as they were at the given time.\nThis may not be older than 60 seconds.\nA hash of the same form as <code>Google::Protobuf::Timestamp</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["Enumerable&lt;<a data-custom-type=\"google/firestore/v1beta1/runqueryresponse\">Google::Firestore::V1beta1::RunQueryResponse</a>&gt;"],"description":"An enumerable of Google::Firestore::V1beta1::RunQueryResponse instances."}]},{"id":"write-instance","type":"instance","name":"write","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient#write"],"description":"<p>Streams batches of document updates and deletes, in order.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L941","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore/v1beta1\"\n\nfirestore_client = Google::Cloud::Firestore::V1beta1.new\nformatted_database = Google::Cloud::Firestore::V1beta1::FirestoreClient.database_root_path(\"[PROJECT]\", \"[DATABASE]\")\nrequest = { database: formatted_database }\nrequests = [request]\nfirestore_client.write(requests).each do |element|\n  # Process element.\nend"}],"params":[{"name":"reqs","types":["Enumerable<Google::Firestore::V1beta1::WriteRequest>"],"description":"The input requests.","optional":false,"nullable":false},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["Enumerable&lt;<a data-custom-type=\"google/firestore/v1beta1/writeresponse\">Google::Firestore::V1beta1::WriteResponse</a>&gt;"],"description":"An enumerable of Google::Firestore::V1beta1::WriteResponse instances."}]},{"id":"listen-instance","type":"instance","name":"listen","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient#listen"],"description":"<p>Listens to changes.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L976","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore/v1beta1\"\n\nfirestore_client = Google::Cloud::Firestore::V1beta1.new\nformatted_database = Google::Cloud::Firestore::V1beta1::FirestoreClient.database_root_path(\"[PROJECT]\", \"[DATABASE]\")\nrequest = { database: formatted_database }\nrequests = [request]\nfirestore_client.listen(requests).each do |element|\n  # Process element.\nend"}],"params":[{"name":"reqs","types":["Enumerable<Google::Firestore::V1beta1::ListenRequest>"],"description":"The input requests.","optional":false,"nullable":false},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["Enumerable&lt;<a data-custom-type=\"google/firestore/v1beta1/listenresponse\">Google::Firestore::V1beta1::ListenResponse</a>&gt;"],"description":"An enumerable of Google::Firestore::V1beta1::ListenResponse instances."}]},{"id":"list_collection_ids-instance","type":"instance","name":"list_collection_ids","title":["Google","Cloud","Firestore","V1beta1","FirestoreClient#list_collection_ids"],"description":"<p>Lists all the collection IDs underneath a document.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/v1beta1/firestore_client.rb#L1027","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore/v1beta1\"\n\nfirestore_client = Google::Cloud::Firestore::V1beta1.new\nformatted_parent = Google::Cloud::Firestore::V1beta1::FirestoreClient.any_path_path(\"[PROJECT]\", \"[DATABASE]\", \"[DOCUMENT]\", \"[ANY_PATH]\")\n\n# Iterate over all results.\nfirestore_client.list_collection_ids(formatted_parent).each do |element|\n  # Process element.\nend\n\n# Or iterate over results one page at a time.\nfirestore_client.list_collection_ids(formatted_parent).each_page do |page|\n  # Process each page at a time.\n  page.each do |element|\n    # Process element.\n  end\nend"}],"params":[{"name":"parent","types":["String"],"description":"The parent document. In the format:\n+projects/{project_id}/databases/{database_id}/documents/{document_path}+.\nFor example:\n+projects/my-project/databases/my-database/documents/chatrooms/my-chatroom+","optional":false,"nullable":false},{"name":"page_size","types":["Integer"],"description":"The maximum number of resources contained in the underlying API\nresponse. If page streaming is performed per-resource, this\nparameter does not affect the return value. If page streaming is\nperformed per-page, this determines the maximum number of\nresources in a page.","optional":true,"default":"nil","nullable":true},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"Access the result along with the RPC operation","optional":true,"nullable":false},{"name":"yield.result","types":["Google::Gax::PagedEnumerable<String>"],"description":"","optional":false,"nullable":false},{"name":"yield.operation","types":["GRPC::ActiveCall::Operation"],"description":"","optional":false,"nullable":false}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["Google::Gax::PagedEnumerable&lt;String&gt;"],"description":"An enumerable of String instances.\nSee Google::Gax::PagedEnumerable documentation for other\noperations such as per-page iteration or access to the response\nobject."}]}]}