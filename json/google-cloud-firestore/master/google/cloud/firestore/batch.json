{"id":"google/cloud/firestore/batch","name":"Batch","title":["Google","Cloud","Firestore","Batch"],"description":"<h1 id=\"batch\">Batch</h1>\n\n<p>A batch in Cloud Firestore is a set of writes that execute\natomically at a single logical point in time in a database.</p>\n\n<p>All changes are accumulated in memory until the block passed to\n<a data-custom-type=\"google/cloud/firestore/client\" data-method=\"batch-instance\">Client#batch</a> completes. Unlike transactions, batches don’t lock on\ndocument reads, should only fail if users provide preconditions, and are\nnot automatically retried.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/batch.rb#L56","resources":[{"title":"Transactions and Batched Writes","link":"https://firebase.google.com/docs/firestore/manage-data/transactions"}],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.batch do |b|\n  # Set the data for NYC\n  b.set(\"cities/NYC\", { name: \"New York City\" })\n\n  # Update the population for SF\n  b.update(\"cities/SF\", { population: 1000000 })\n\n  # Delete LA\n  b.delete(\"cities/LA\")\nend"}],"methods":[{"id":"firestore-instance","type":"instance","name":"firestore","title":["Google","Cloud","Firestore","Batch#firestore"],"description":"<p>The client the Cloud Firestore batch belongs to.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/batch.rb#L67","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/firestore/client\">Client</a>"],"description":"firestore client."}]},{"id":"create-instance","type":"instance","name":"create","title":["Google","Cloud","Firestore","Batch#create"],"description":"<p>Create a document with the provided data (fields and values).</p>\n\n<p>The batch will fail if the document already exists.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/batch.rb#L117","resources":[],"examples":[{"caption":"<p>Create a document using a document path:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.batch do |b|\n  b.create(\"cities/NYC\", { name: \"New York City\" })\nend"},{"caption":"<p>Create a document using a document reference:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nfirestore.batch do |b|\n  b.create(nyc_ref, { name: \"New York City\" })\nend"},{"caption":"<p>Create a document and set a field to server_time:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nfirestore.batch do |b|\n  b.create(nyc_ref, { name: \"New York City\",\n                      updated_at: firestore.field_server_time })\nend"}],"params":[{"name":"doc","types":["String","DocumentReference"],"description":"A string representing the\npath of the document, or a document reference object.","optional":false,"nullable":false},{"name":"data","types":["Hash"],"description":"The document’s fields and values.","optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"set-instance","type":"instance","name":"set","title":["Google","Cloud","Firestore","Batch#set"],"description":"<p>Write the provided data (fields and values) to the provided document.\nIf the document does not exist, it will be created. By default, the\nprovided data overwrites existing data, but the provided data can be\nmerged into the existing document using the <code>merge</code> argument.</p>\n\n<p>If you’re not sure whether the document exists, use the <code>merge</code>\nargument to merge the new data with any existing document data to\navoid overwriting entire documents.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/batch.rb#L216","resources":[],"examples":[{"caption":"<p>Set a document using a document path:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.batch do |b|\n  b.set(\"cities/NYC\", { name: \"New York City\" })\nend"},{"caption":"<p>Create a document using a document reference:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nfirestore.batch do |b|\n  b.set(nyc_ref, { name: \"New York City\" })\nend"},{"caption":"<p>Set a document and merge all data:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.batch do |b|\n  b.set(\"cities/NYC\", { name: \"New York City\" }, merge: true)\nend"},{"caption":"<p>Set a document and merge only name:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.batch do |b|\n  b.set(\"cities/NYC\", { name: \"New York City\" }, merge: :name)\nend"},{"caption":"<p>Set a document and deleting a field using merge:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_data = { name: \"New York City\",\n             trash: firestore.field_delete }\n\nfirestore.batch do |b|\n  b.set(nyc_ref, nyc_data, merge: true)\nend"},{"caption":"<p>Set a document and set a field to server_time:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_data = { name: \"New York City\",\n             updated_at: firestore.field_server_time }\n\nfirestore.batch do |b|\n  b.set(nyc_ref, nyc_data, merge: true)\nend"}],"params":[{"name":"doc","types":["String","DocumentReference"],"description":"A string representing the\npath of the document, or a document reference object.","optional":false,"nullable":false},{"name":"data","types":["Hash"],"description":"The document’s fields and values.","optional":false,"nullable":false},{"name":"merge","types":["Boolean","FieldPath","String","Symbol"],"description":"When\n<code>true</code>, all provided data is merged with the existing document data.\nWhen the argument is one or more field path, only the data for\nfields in this argument is merged with the existing document data.\nThe default is to not merge, but to instead overwrite the existing\ndocument data.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[]},{"id":"update-instance","type":"instance","name":"update","title":["Google","Cloud","Firestore","Batch#update"],"description":"<p>Update the document with the provided data (fields and values). The\nprovided data is merged into the existing document data.</p>\n\n<p>The batch will fail if the document does not exist.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/batch.rb#L320","resources":[],"examples":[{"caption":"<p>Update a document using a document path:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.batch do |b|\n  b.update(\"cities/NYC\", { name: \"New York City\" })\nend"},{"caption":"<p>Directly update a deeply-nested field with a <code>FieldPath</code>:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nnested_field_path = firestore.field_path :favorites, :food\n\nfirestore.batch do |b|\n  b.update(\"users/frank\", { nested_field_path => \"Pasta\" })\nend"},{"caption":"<p>Update a document using a document reference:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nfirestore.batch do |b|\n  b.update(nyc_ref, { name: \"New York City\" })\nend"},{"caption":"<p>Update a document using the <code>update_time</code> precondition:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nlast_updated_at = Time.now - 42 # 42 seconds ago\n\nfirestore.batch do |b|\n  b.update(\"cities/NYC\", { name: \"New York City\" },\n           update_time: last_updated_at)\nend"},{"caption":"<p>Update a document and deleting a field:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_data = { name: \"New York City\",\n             trash: firestore.field_delete }\n\nfirestore.batch do |b|\n  b.update(nyc_ref, nyc_data)\nend"},{"caption":"<p>Update a document and set a field to server_time:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_data = { name: \"New York City\",\n             updated_at: firestore.field_server_time }\n\nfirestore.batch do |b|\n  b.update(nyc_ref, nyc_data)\nend"}],"params":[{"name":"doc","types":["String","DocumentReference"],"description":"A string representing the\npath of the document, or a document reference object.","optional":false,"nullable":false},{"name":"data","types":["Hash<FieldPath|String|Symbol, Object>"],"description":"The document’s\nfields and values.</p>\n\n<p>The top-level keys in the data hash are considered field paths, and\ncan either be a FieldPath object, or a string representing the\nnested fields. In other words the string represents individual\nfields joined by “.”. Fields containing <code>~</code>, <code>*</code>, <code>/</code>, <code>[</code>, <code>]</code>, and\n<code>.</code> cannot be in a dotted string, and should provided using a\n<a data-custom-type=\"google/cloud/firestore/fieldpath\">FieldPath</a> object instead.","optional":false,"nullable":false},{"name":"update_time","types":["Time"],"description":"When set, the document must have been last\nupdated at that time. Optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[]},{"id":"delete-instance","type":"instance","name":"delete","title":["Google","Cloud","Firestore","Batch#delete"],"description":"<p>Deletes a document from the database.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/batch.rb#L383","resources":[],"examples":[{"caption":"<p>Delete a document using a document path:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.batch do |b|\n  b.delete \"cities/NYC\"\nend"},{"caption":"<p>Delete a document using a document reference:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nfirestore.batch do |b|\n  b.delete nyc_ref\nend"},{"caption":"<p>Delete a document using <code>exists</code>:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.batch do |b|\n  b.delete \"cities/NYC\", exists: true\nend"},{"caption":"<p>Delete a document using the <code>update_time</code> precondition:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nlast_updated_at = Time.now - 42 # 42 seconds ago\n\nfirestore.batch do |b|\n  b.delete \"cities/NYC\", update_time: last_updated_at\nend"}],"params":[{"name":"doc","types":["String","DocumentReference"],"description":"A string representing the\npath of the document, or a document reference object.","optional":false,"nullable":false},{"name":"exists","types":["Boolean"],"description":"Whether the document must exist. When <code>true</code>,\nthe document must exist or an error is raised. Default is <code>false</code>.\nOptional.","optional":true,"default":"nil","nullable":true},{"name":"update_time","types":["Time"],"description":"When set, the document must have been last\nupdated at that time. Optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[]}]}