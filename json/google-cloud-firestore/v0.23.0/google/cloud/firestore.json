{"id":"google/cloud/firestore","name":"Firestore","title":["Google","Cloud","Firestore"],"description":"<h1 id=\"cloud-firestore\">Cloud Firestore</h1>\n\n<p>Cloud Firestore is a NoSQL document database built for automatic scaling,\nhigh performance, and ease of application development. While the Cloud\nFirestore interface has many of the same features as traditional\ndatabases, as a NoSQL database it differs from them in the way it\ndescribes relationships between data objects.</p>\n\n<p>For more information about Cloud Firestore, read the <a href=\"https://cloud.google.com/firestore/docs/\">Cloud\nFirestore Documentation</a>.</p>\n\n<p>The goal of google-cloud is to provide an API that is comfortable to\nRubyists. Authentication is handled by Google::Cloud#firestore. You can\nprovide the project and credential information to connect to the Cloud\nFirestore service, or if you are running on Google Compute Engine this\nconfiguration is taken care of for you. You can read more about the\noptions for connecting in the <a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>\n\n<h2 id=\"enabling-logging\">Enabling Logging</h2>\n\n<p>To enable logging for this library, set the logger for the underlying\n<a href=\"https://github.com/grpc/grpc/tree/master/src/ruby\">gRPC</a> library. The\nlogger that you set may be a Ruby stdlib\n<a href=\"https://ruby-doc.org/stdlib-2.5.0/libdoc/logger/rdoc/Logger.html\"><code>Logger</code></a>\nas shown below, or a\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/google-cloud-logging/latest/google/cloud/logging/logger\"><code>Google::Cloud::Logging::Logger</code></a>\nthat will write logs to <a href=\"https://cloud.google.com/logging/\">Stackdriver\nLogging</a>. See\n<a href=\"https://github.com/grpc/grpc/blob/master/src/ruby/lib/grpc/logconfig.rb\">grpc/logconfig.rb</a>\nand the gRPC\n<a href=\"https://github.com/grpc/grpc/blob/master/src/ruby/spec/spec_helper.rb\">spec_helper.rb</a>\nfor additional information.</p>\n\n<p>Configuring a Ruby stdlib logger:</p>\n\n<pre><code class=\"language-ruby\">require \"logger\"\n\nmodule MyLogger\n  LOGGER = Logger.new $stderr, level: Logger::WARN\n  def logger\n    LOGGER\n  end\nend\n\n# Define a gRPC module-level logger method before grpc/logconfig.rb loads.\nmodule GRPC\n  extend MyLogger\nend\n</code></pre>\n\n<h2 id=\"adding-data\">Adding data</h2>\n\n<p>Cloud Firestore stores data in Documents, which are stored in Collections.\nCloud Firestore creates collections and documents implicitly the first\ntime you add data to the document. (For more information, see <a href=\"https://cloud.google.com/firestore/docs/manage-data/add-data\">Adding Data\nto Cloud Firestore</a>.</p>\n\n<p>To create or overwrite a single document, use <a data-custom-type=\"google/cloud/firestore/client\" data-method=\"doc-instance\">Firestore::Client#doc</a> to\nobtain a document reference. (This does not create a document in Cloud\nFirestore.) Then, call <a data-custom-type=\"google/cloud/firestore/documentreference\" data-method=\"set-instance\">Firestore::DocumentReference#set</a> to create the\ndocument or overwrite an existing document:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.set({ name: \"New York City\" }) # Document created\n</code></pre>\n\n<p>When you use this combination of <code>doc</code> and <code>set</code> to create a new document,\nyou must specify an ID for the document. (In the example above, the ID is\n“NYC”.) However, if you do not have a meaningful ID for the document, you\nmay omit the ID from a call to <a data-custom-type=\"google/cloud/firestore/collectionreference\" data-method=\"doc-instance\">Firestore::CollectionReference#doc</a>, and\nCloud Firestore will auto-generate an ID for you.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a collection reference\ncities_col = firestore.col \"cities\"\n\n# Get a document reference with data\nrandom_ref = cities_col.doc\nrandom_ref.set({ name: \"New York City\" })\n\n# The document ID is randomly generated\nrandom_ref.document_id #=&gt; \"RANDOMID123XYZ\"\n</code></pre>\n\n<p>You can perform both of the operations shown above, auto-generating\nan ID and creating the document, in a single call to\n<a data-custom-type=\"google/cloud/firestore/collectionreference\" data-method=\"add-instance\">Firestore::CollectionReference#add</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a collection reference\ncities_col = firestore.col \"cities\"\n\n# Get a document reference with data\nrandom_ref = cities_col.add({ name: \"New York City\" })\n\n# The document ID is randomly generated\nrandom_ref.document_id #=&gt; \"RANDOMID123XYZ\"\n</code></pre>\n\n<p>You can also use <code>add</code> to create an empty document:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a collection reference\ncities_col = firestore.col \"cities\"\n\n# Create a document without data\nrandom_ref = cities_col.add\n\n# The document ID is randomly generated\nrandom_ref.document_id #=&gt; \"RANDOMID123XYZ\"\n</code></pre>\n\n<h2 id=\"retrieving-collection-references\">Retrieving collection references</h2>\n\n<p>Collections are simply named containers for documents. A collection\ncontains documents and nothing else. It can’t directly contain raw fields\nwith values, and it can’t contain other collections. You do not need to\n“create” or “delete” collections. After you create the first document in a\ncollection, the collection exists. If you delete all of the documents in a\ncollection, it no longer exists. (For more information, see <a href=\"https://cloud.google.com/firestore/docs/data-model\">Cloud\nFirestore Data Model</a>.</p>\n\n<p>Use <a data-custom-type=\"google/cloud/firestore/client\" data-method=\"cols-instance\">Firestore::Client#cols</a> to list the root-level collections:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get the root collections\nfirestore.cols.each do |col|\n  puts col.collection_id\nend\n</code></pre>\n\n<p>Retrieving a reference to a single root-level collection is similar:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get the cities collection\ncities_col = firestore.col \"cities\"\n</code></pre>\n\n<p>To list the collections in a document, first get the document reference,\nthen use <a data-custom-type=\"google/cloud/firestore/documentreference\" data-method=\"cols-instance\">Firestore::DocumentReference#cols</a>:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.cols.each do |col|\n  puts col.collection_id\nend\n</code></pre>\n\n<p>Again, retrieving a reference to a single collection is similar::</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\n# Get precincts sub-collection\nprecincts_col = nyc_ref.col \"precincts\"\n</code></pre>\n\n<h2 id=\"reading-data\">Reading data</h2>\n\n<p>You can retrieve a snapshot of the data in a single document with\n<a data-custom-type=\"google/cloud/firestore/documentreference\" data-method=\"get-instance\">Firestore::DocumentReference#get</a>, which returns an instance of\n<a data-custom-type=\"google/cloud/firestore/documentsnapshot\">Firestore::DocumentSnapshot</a>:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_snap = nyc_ref.get\nnyc_snap[:population] #=&gt; 1000000\n</code></pre>\n<p>In the example above, <a data-custom-type=\"google/cloud/firestore/documentsnapshot\" data-method=\"[]-instance\">Firestore::DocumentSnapshot#[]</a> is used to access a\ntop-level field. To access nested fields, use <a data-custom-type=\"google/cloud/firestore/fieldpath\">Firestore::FieldPath</a>:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nuser_snap = firestore.doc(\"users/frank\").get\n\nnested_field_path = firestore.field_path :favorites, :food\nuser_snap.get(nested_field_path) #=&gt; \"Pizza\"\n</code></pre>\n\n<p>Or, use <a data-custom-type=\"google/cloud/firestore/client\" data-method=\"get_all-instance\">Firestore::Client#get_all</a> to retrieve a list of document\nsnapshots (data):</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get and print city documents\ncities = [\"cities/NYC\", \"cities/SF\", \"cities/LA\"]\nfirestore.get_all(cities).each do |city|\n  puts \"#{city.document_id} has #{city[:population]} residents.\"\nend\n</code></pre>\n\n<p>To retrieve all of the document snapshots in a collection, use\n<a data-custom-type=\"google/cloud/firestore/query\" data-method=\"get-instance\">Firestore::CollectionReference#get</a>:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a collection reference\ncities_col = firestore.col \"cities\"\n\n# Get and print all city documents\ncities_col.get do |city|\n  puts \"#{city.document_id} has #{city[:population]} residents.\"\nend\n</code></pre>\n\n<p>The example above is actually a simple query without filters. Let’s look\nat some other queries for Cloud Firestore.</p>\n\n<h2 id=\"querying-data\">Querying data</h2>\n\n<p>Use <a data-custom-type=\"google/cloud/firestore/query\" data-method=\"where-instance\">Firestore::Query#where</a> to filter queries on a field:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a collection reference\ncities_col = firestore.col \"cities\"\n\n# Create a query\nquery = cities_col.where(:population, :&gt;=, 1000000)\n\nquery.get do |city|\n  puts \"#{city.document_id} has #{city[:population]} residents.\"\nend\n</code></pre>\n\n<p>You can order the query results with <a data-custom-type=\"google/cloud/firestore/query\" data-method=\"order-instance\">Firestore::Query#order</a>:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a collection reference\ncities_col = firestore.col \"cities\"\n\n# Create a query\nquery = cities_col.order(:name, :desc)\n\nquery.get do |city|\n  puts \"#{city.document_id} has #{city[:population]} residents.\"\nend\n</code></pre>\n\n<p>Query methods may be chained, as in this example using\n<a data-custom-type=\"google/cloud/firestore/query\" data-method=\"limit-instance\">Firestore::Query#limit</a> and  <a data-custom-type=\"google/cloud/firestore/query\" data-method=\"offset-instance\">Firestore::Query#offset</a> to perform\npagination:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a collection reference\ncities_col = firestore.col \"cities\"\n\n# Create a query\nquery = cities_col.limit(5).offset(10)\n\nquery.get do |city|\n  puts \"#{city.document_id} has #{city[:population]} residents.\"\nend\n</code></pre>\n\n<p>See <a href=\"https://cloud.google.com/firestore/docs/query-data/indexing\">Managing Indexes in Cloud\nFirestore</a> to\nensure the best performance for your queries.</p>\n\n<h2 id=\"updating-data\">Updating data</h2>\n\n<p>You can use <a data-custom-type=\"google/cloud/firestore/documentreference\" data-method=\"set-instance\">Firestore::DocumentReference#set</a> to completely overwrite an\nexisting document:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.set({ name: \"New York City\" })\n</code></pre>\n\n<p>Or, to selectively update only the fields appearing in your <code>data</code>\nargument, set the <code>merge</code> option to <code>true</code>:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.set({ name: \"New York City\" }, merge: true)\n</code></pre>\n\n<p>Use <a data-custom-type=\"google/cloud/firestore/documentreference\" data-method=\"update-instance\">Firestore::DocumentReference#update</a> to directly update a\ndeeply-nested field with a <a data-custom-type=\"google/cloud/firestore/fieldpath\">Firestore::FieldPath</a>:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nuser_ref = firestore.doc \"users/frank\"\n\nnested_field_path = firestore.field_path :favorites, :food\nuser_ref.update({ nested_field_path =&gt; \"Pasta\" })\n</code></pre>\n\n<h3 id=\"listening-for-changes\">Listening for changes</h3>\n\n<p>You can listen to a document reference or a collection reference/query for\nchanges. The current document snapshot or query results snapshot will be\nyielded first, and each time the contents change.</p>\n\n<p>You can use <a data-custom-type=\"google/cloud/firestore/documentreference\" data-method=\"listen-instance\">Firestore::DocumentReference#listen</a> to be notified of\nchanges to a single document:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nlistener = nyc_ref.listen do |snapshot|\n  puts \"The population of #{snapshot[:name]} \"\n  puts \"is #{snapshot[:population]}.\"\nend\n\n# When ready, stop the listen operation and close the stream.\nlistener.stop\n</code></pre>\n\n<p>You can use <a data-custom-type=\"google/cloud/firestore/query\" data-method=\"listen-instance\">Firestore::Query#listen</a> to be notified of changes to any\ndocument contained in the query:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Create a query\nquery = firestore.col(:cities).order(:population, :desc)\n\nlistener = query.listen do |snapshot|\n  puts \"The query snapshot has #{snapshot.docs.count} documents \"\n  puts \"and has #{snapshot.changes.count} changes.\"\nend\n\n# When ready, stop the listen operation and close the stream.\nlistener.stop\n</code></pre>\n\n<h2 id=\"using-transactions-and-batched-writes\">Using transactions and batched writes</h2>\n\n<p>Cloud Firestore supports atomic operations for reading and writing data.\nIn a set of atomic operations, either all of the operations succeed, or\nnone of them are applied. There are two types of atomic operations in\nCloud Firestore: A transaction is a set of read and write operations on\none or more documents, while a batched write is a set of only write\noperations on one or more documents. (For more information, see\n<a href=\"https://cloud.google.com/firestore/docs/manage-data/transactions\">Transactions and Batched Writes</a>.</p>\n\n<h3 id=\"transactions\">Transactions</h3>\n\n<p>A transaction consists of any number of read operations followed by any\nnumber of write operations. (Read operations must always come before write\noperations.) In the case of a concurrent update by another client, Cloud\nFirestore runs the entire transaction again. Therefore, transaction blocks\nshould be idempotent and should not not directly modify application state.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\ncity = firestore.col(\"cities\").doc(\"SF\")\ncity.set({ name: \"San Francisco\",\n           state: \"CA\",\n           country: \"USA\",\n           capital: false,\n           population: 860000 })\n\nfirestore.transaction do |tx|\n  new_population = tx.get(city).data[:population] + 1\n  tx.update(city, { population: new_population })\nend\n</code></pre>\n\n<h3 id=\"batched-writes\">Batched writes</h3>\n\n<p>If you do not need to read any documents in your operation set, you can\nexecute multiple write operations as a single batch. A batch of writes\ncompletes atomically and can write to multiple documents. Batched writes\nare also useful for migrating large data sets to Cloud Firestore.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.batch do |b|\n  # Set the data for NYC\n  b.set(\"cities/NYC\", { name: \"New York City\" })\n\n  # Update the population for SF\n  b.update(\"cities/SF\", { population: 1000000 })\n\n  # Delete LA\n  b.delete(\"cities/LA\")\nend\n</code></pre>\n\n<h2 id=\"deleting-data\">Deleting data</h2>\n\n<p>Use <a data-custom-type=\"google/cloud/firestore/documentreference\" data-method=\"delete-instance\">Firestore::DocumentReference#delete</a> to delete a document from Cloud\nFirestore:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.delete\n</code></pre>\n\n<p>To delete specific fields from a document, use the\n<a data-custom-type=\"google/cloud/firestore/client\" data-method=\"field_delete-instance\">Firestore::Client.field_delete</a> method when you update a document:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.update({ name: \"New York City\",\n                 trash: firestore.field_delete })\n</code></pre>\n\n<p>To delete an entire collection or sub-collection in Cloud Firestore,\nretrieve all the documents within the collection or sub-collection and\ndelete them. If you have larger collections, you may want to delete the\ndocuments in smaller batches to avoid out-of-memory errors. Repeat the\nprocess until you’ve deleted the entire collection or sub-collection.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore.rb#L536","resources":[],"examples":[],"methods":[{"id":"new-class","type":"class","name":"new","title":["Google","Cloud","Firestore.new"],"description":"<p>Creates a new object for connecting to the Firestore service.\nEach call creates a new connection.</p>\n\n<p>For more information on connecting to Google Cloud see the\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore.rb#L572","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new"}],"params":[{"name":"project_id","types":["String"],"description":"Identifier for a Firestore project. If not\npresent, the default project for the credentials is used.","optional":true,"default":"nil","nullable":true},{"name":"credentials","types":["String","Hash","Google::Auth::Credentials"],"description":"The path to\nthe keyfile as a String, the contents of the keyfile as a Hash, or a\nGoogle::Auth::Credentials object. (See <a data-custom-type=\"google/cloud/firestore/credentials\">Firestore::Credentials</a>)","optional":true,"default":"nil","nullable":true},{"name":"scope","types":["String","Array<String>"],"description":"The OAuth 2.0 scopes controlling\nthe set of resources and operations that the connection can access.\nSee <a href=\"https://developers.google.com/identity/protocols/OAuth2\">Using OAuth 2.0 to Access Google\nAPIs</a>.</p>\n\n<p>The default scope is:</p>\n\n<ul>\n  <li><code>https://www.googleapis.com/auth/datastore</code></li>\n</ul>","optional":true,"default":"nil","nullable":true},{"name":"timeout","types":["Integer"],"description":"Default timeout to use in requests. Optional.","optional":true,"default":"nil","nullable":true},{"name":"client_config","types":["Hash"],"description":"A hash of values to override the default\nbehavior of the API client. Optional.","optional":true,"default":"nil","nullable":true},{"name":"project","types":["String"],"description":"Alias for the <code>project_id</code> argument. Deprecated.","optional":true,"default":"nil","nullable":true},{"name":"keyfile","types":["String"],"description":"Alias for the <code>credentials</code> argument.\nDeprecated.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"ArgumentError","description":""}],"returns":[{"types":["<a data-custom-type=\"google/cloud/firestore/client\">Google::Cloud::Firestore::Client</a>"],"description":""}]},{"id":"configure-class","type":"class","name":"configure","title":["Google","Cloud","Firestore.configure"],"description":"<p>Configure the Google Cloud Firestore library.</p>\n\n<p>The following Firestore configuration parameters are supported:</p>\n\n<ul>\n  <li><code>project_id</code> - (String) Identifier for a Firestore project. (The\nparameter <code>project</code> is considered deprecated, but may also be used.)</li>\n  <li><code>credentials</code> - (String, Hash, Google::Auth::Credentials) The path to\nthe keyfile as a String, the contents of the keyfile as a Hash, or a\nGoogle::Auth::Credentials object. (See <a data-custom-type=\"google/cloud/firestore/credentials\">Firestore::Credentials</a>) (The\nparameter <code>keyfile</code> is considered deprecated, but may also be used.)</li>\n  <li><code>scope</code> - (String, Array<String>) The OAuth 2.0 scopes controlling\nthe set of resources and operations that the connection can access.</String></li>\n  <li><code>timeout</code> - (Integer) Default timeout to use in requests.</li>\n  <li><code>client_config</code> - (Hash) A hash of values to override the default\nbehavior of the API client.</li>\n</ul>","source":"google-cloud-firestore/lib/google/cloud/firestore.rb#L615","resources":[],"examples":[],"params":[{"name":"yield","types":["block"],"description":"","optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Google::Cloud::Config"],"description":"The configuration object the\nGoogle::Cloud::Firestore library uses."}]}]}