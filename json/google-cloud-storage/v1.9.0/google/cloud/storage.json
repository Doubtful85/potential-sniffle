{"id":"google/cloud/storage","name":"Storage","title":["Google","Cloud","Storage"],"description":"<h1 id=\"google-cloud-storage\">Google Cloud Storage</h1>\n\n<p>Google Cloud Storage is an Internet service to store data in Google’s\ncloud. It allows world-wide storage and retrieval of any amount of data\nand at any time, taking advantage of Google’s own reliable and fast\nnetworking infrastructure to perform data operations in a cost effective\nmanner.</p>\n\n<p>The goal of google-cloud is to provide a API that is comfortable to\nRubyists. Authentication is handled by Google::Cloud#storage. You can\nprovide the project and credential information to connect to the Storage\nservice, or if you are running on Google Compute Engine this configuration\nis taken care of for you.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new(\n  project_id: \"my-project\",\n  credentials: \"/path/to/keyfile.json\"\n)\n\nbucket = storage.bucket \"my-bucket\"\nfile = bucket.file \"path/to/my-file.ext\"\n</code></pre>\n\n<p>You can learn more about various options for connection on the\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>\n\n<p>To learn more about Cloud Storage, read the\n<a href=\"https://cloud.google.com/storage/docs/overview\">Google Cloud Storage Overview\n</a>.</p>\n\n<h2 id=\"retrieving-buckets\">Retrieving Buckets</h2>\n\n<p>A <a data-custom-type=\"google/cloud/storage/bucket\">Google::Cloud::Storage::Bucket</a> instance is a container for your data.\nThere is no limit on the number of buckets that you can create in a\nproject. You can use buckets to organize and control access to your data.\nFor more information, see <a href=\"https://cloud.google.com/storage/docs/creating-buckets\">Working with\nBuckets</a>.</p>\n\n<p>Each bucket has a globally unique name, which is how they are retrieved:\n(See Google::Cloud::Storage::Project#bucket)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"my-todo-app\"\n</code></pre>\n\n<p>You can also retrieve all buckets on a project: (See\nGoogle::Cloud::Storage::Project#buckets)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nall_buckets = storage.buckets\n</code></pre>\n\n<p>If you have a significant number of buckets, you may need to fetch them\nin multiple service requests.</p>\n\n<p>Iterating over each bucket, potentially with multiple API calls, by\ninvoking <code>all</code> with a block:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbuckets = storage.buckets\nbuckets.all do |bucket|\n  puts bucket.name\nend\n</code></pre>\n\n<p>Limiting the number of API calls made:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbuckets = storage.buckets\nbuckets.all(request_limit: 10) do |bucket|\n  puts bucket.name\nend\n</code></pre>\n\n<p>See <a data-custom-type=\"google/cloud/storage/bucket/list\">Google::Cloud::Storage::Bucket::List</a> for details.</p>\n\n<h2 id=\"creating-a-bucket\">Creating a Bucket</h2>\n\n<p>A unique name is all that is needed to create a new bucket: (See\nGoogle::Cloud::Storage::Project#create_bucket)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.create_bucket \"my-todo-app-attachments\"\n</code></pre>\n\n<h2 id=\"retrieving-files\">Retrieving Files</h2>\n\n<p>A <a data-custom-type=\"google/cloud/storage/file\">Google::Cloud::Storage::File</a> instance is an individual data object\nthat you store in Google Cloud Storage. Files contain the data stored as\nwell as metadata describing the data. Files belong to a bucket and cannot\nbe shared among buckets. There is no limit on the number of files that\nyou can create in a bucket. For more information, see <a href=\"https://cloud.google.com/storage/docs/object-basics\">Working with\nObjects</a>.</p>\n\n<p>Files are retrieved by their name, which is the path of the file in the\nbucket: (See Google::Cloud::Storage::Bucket#file)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"my-todo-app\"\nfile = bucket.file \"avatars/heidi/400x400.png\"\n</code></pre>\n\n<p>You can also retrieve all files in a bucket: (See Bucket#files)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"my-todo-app\"\nall_files = bucket.files\n</code></pre>\n\n<p>Or you can retrieve all files in a specified path:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"my-todo-app\"\navatar_files = bucket.files prefix: \"avatars/\"\n</code></pre>\n\n<p>If you have a significant number of files, you may need to fetch them\nin multiple service requests.</p>\n\n<p>Iterating over each file, potentially with multiple API calls, by\ninvoking <code>all</code> with a block:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\nbucket = storage.bucket \"my-todo-app\"\n\nfiles = storage.files\nfiles.all do |file|\n  puts file.name\nend\n</code></pre>\n\n<p>Limiting the number of API calls made:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nfiles = storage.files\nfiles.all(request_limit: 10) do |file|\n  puts bucket.name\nend\n</code></pre>\n\n<p>See <a data-custom-type=\"google/cloud/storage/file/list\">Google::Cloud::Storage::File::List</a> for details.</p>\n\n<h2 id=\"creating-a-file\">Creating a File</h2>\n\n<p>A new file can be uploaded by specifying the location of a file on the\nlocal file system, and the name/path that the file should be stored in the\nbucket. (See Google::Cloud::Storage::Bucket#create_file)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"my-todo-app\"\nbucket.create_file \"/var/todo-app/avatars/heidi/400x400.png\",\n                   \"avatars/heidi/400x400.png\"\n</code></pre>\n\n<p>Files can also be created from an in-memory StringIO object:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"my-todo-app\"\nbucket.create_file StringIO.new(\"Hello world!\"), \"hello-world.txt\"\n</code></pre>\n\n<h3 id=\"customer-supplied-encryption-keys\">Customer-supplied encryption keys</h3>\n\n<p>By default, Google Cloud Storage manages server-side encryption keys on\nyour behalf. However, a <a href=\"https://cloud.google.com/storage/docs/encryption#customer-supplied\">customer-supplied encryption\nkey</a>\ncan be provided with the <code>encryption_key</code> option. If given, the same key\nmust be provided to subsequently download or copy the file. If you use\ncustomer-supplied encryption keys, you must securely manage your keys and\nensure that they are not lost. Also, please note that file metadata is not\nencrypted, with the exception of the CRC32C checksum and MD5 hash. The\nnames of files and buckets are also not encrypted, and you can read or\nupdate the metadata of an encrypted file without providing the encryption\nkey.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\nbucket = storage.bucket \"my-todo-app\"\n\n# Key generation shown for example purposes only. Write your own.\ncipher = OpenSSL::Cipher.new \"aes-256-cfb\"\ncipher.encrypt\nkey = cipher.random_key\n\nbucket.create_file \"/var/todo-app/avatars/heidi/400x400.png\",\n                   \"avatars/heidi/400x400.png\",\n                   encryption_key: key\n\n# Store your key and hash securely for later use.\nfile = bucket.file \"avatars/heidi/400x400.png\",\n                   encryption_key: key\n</code></pre>\n\n<p>Use Google::Cloud::Storage::File#rotate to rotate customer-supplied\nencryption keys.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\nbucket = storage.bucket \"my-todo-app\"\n\n# Old key was stored securely for later use.\nold_key = \"y\\x03\\\"\\x0E\\xB6\\xD3\\x9B\\x0E\\xAB*\\x19\\xFAv\\xDEY\\xBEI...\"\n\nfile = bucket.file \"path/to/my-file.ext\", encryption_key: old_key\n\n# Key generation shown for example purposes only. Write your own.\ncipher = OpenSSL::Cipher.new \"aes-256-cfb\"\ncipher.encrypt\nnew_key = cipher.random_key\n\nfile.rotate encryption_key: old_key, new_encryption_key: new_key\n</code></pre>\n\n<h2 id=\"downloading-a-file\">Downloading a File</h2>\n\n<p>Files can be downloaded to the local file system. (See\nGoogle::Cloud::Storage::File#download)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"my-todo-app\"\nfile = bucket.file \"avatars/heidi/400x400.png\"\nfile.download \"/var/todo-app/avatars/heidi/400x400.png\"\n</code></pre>\n\n<p>Files can also be downloaded to an in-memory StringIO object:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"my-todo-app\"\nfile = bucket.file \"hello-world.txt\"\n\ndownloaded = file.download\ndownloaded.rewind\ndownloaded.read #=&gt; \"Hello world!\"\n</code></pre>\n\n<p>Download a public file with an anonymous, unauthenticated client. Use\n<code>skip_lookup</code> to avoid errors retrieving non-public bucket and file\nmetadata.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.anonymous\n\nbucket = storage.bucket \"public-bucket\", skip_lookup: true\nfile = bucket.file \"path/to/public-file.ext\", skip_lookup: true\n\ndownloaded = file.download\ndownloaded.rewind\ndownloaded.read #=&gt; \"Hello world!\"\n</code></pre>\n\n<h2 id=\"using-signed-urls\">Using Signed URLs</h2>\n\n<p>Access without authentication can be granted to a file for a specified\nperiod of time. This URL uses a cryptographic signature of your\ncredentials to access the file. (See\nGoogle::Cloud::Storage::File#signed_url)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"my-todo-app\"\nfile = bucket.file \"avatars/heidi/400x400.png\"\nshared_url = file.signed_url method: \"GET\",\n                             expires: 300 # 5 minutes from now\n</code></pre>\n\n<h2 id=\"controlling-access-to-a-bucket\">Controlling Access to a Bucket</h2>\n\n<p>Access to a bucket is controlled with\nGoogle::Cloud::Storage::Bucket#acl. A bucket has owners, writers, and\nreaders. Permissions can be granted to an individual user’s email address,\na group’s email address, as well as many predefined lists. See the <a href=\"https://cloud.google.com/storage/docs/access-control\">Access\nControl guide</a> for\nmore.</p>\n\n<p>Access to a bucket can be granted to a user by appending <code>\"user-\"</code> to the\nemail address:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"my-todo-app\"\n\nemail = \"heidi@example.net\"\nbucket.acl.add_reader \"user-#{email}\"\n</code></pre>\n\n<p>Access to a bucket can be granted to a group by appending <code>\"group-\"</code> to\nthe email address:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"my-todo-app\"\n\nemail = \"authors@example.net\"\nbucket.acl.add_reader \"group-#{email}\"\n</code></pre>\n\n<p>Access to a bucket can also be granted to a predefined list of\npermissions:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"my-todo-app\"\n\nbucket.acl.public!\n</code></pre>\n\n<h2 id=\"controlling-access-to-a-file\">Controlling Access to a File</h2>\n\n<p>Access to a file is controlled in two ways, either by the setting the\ndefault permissions to all files in a bucket with\nGoogle::Cloud::Storage::Bucket#default_acl, or by setting permissions to\nan individual file with Google::Cloud::Storage::File#acl.</p>\n\n<p>Access to a file can be granted to a user by appending <code>\"user-\"</code> to the\nemail address:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"my-todo-app\"\nfile = bucket.file \"avatars/heidi/400x400.png\"\n\nemail = \"heidi@example.net\"\nfile.acl.add_reader \"user-#{email}\"\n</code></pre>\n\n<p>Access to a file can be granted to a group by appending <code>\"group-\"</code> to the\nemail address:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"my-todo-app\"\nfile = bucket.file \"avatars/heidi/400x400.png\"\n\nemail = \"authors@example.net\"\nfile.acl.add_reader \"group-#{email}\"\n</code></pre>\n\n<p>Access to a file can also be granted to a predefined list of permissions:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"my-todo-app\"\nfile = bucket.file \"avatars/heidi/400x400.png\"\n\nfile.acl.public!\n</code></pre>\n\n<h2 id=\"assigning-payment-to-the-requester\">Assigning payment to the requester</h2>\n\n<p>The requester pays feature enables the owner of a bucket to indicate that\na client accessing the bucket or a file it contains must assume the\ntransit costs related to the access.</p>\n\n<p>Assign transit costs for bucket and file operations to requesting clients\nwith the <code>requester_pays</code> flag:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"my-bucket\"\n\nbucket.requester_pays = true # API call\n# Clients must now provide `user_project` option when calling\n# Project#bucket to access this bucket.\n</code></pre>\n\n<p>Once the <code>requester_pays</code> flag is enabled for a bucket, a client\nattempting to access the bucket and its files must provide the\n<code>user_project</code> option to Project#bucket. If the argument given is\n<code>true</code>, transit costs for operations on the requested bucket or a file it\ncontains will be billed to the current project for the client. (See\nProject#project for the ID of the current project.)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"other-project-bucket\", user_project: true\n\nfiles = bucket.files # Billed to current project\n</code></pre>\n\n<p>If the argument is a project ID string, and the indicated project is\nauthorized for the currently authenticated service account, transit costs\nwill be billed to the indicated project.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.bucket \"other-project-bucket\",\n                        user_project: \"my-other-project\"\nfiles = bucket.files # Billed to \"my-other-project\"\n</code></pre>\n\n<h2 id=\"configuring-pubsub-notification-subscriptions\">Configuring Pub/Sub notification subscriptions</h2>\n\n<p>You can configure notifications to send Google Cloud Pub/Sub messages\nabout changes to files in your buckets. For example, you can track files\nthat are created and deleted in your bucket. Each notification contains\ninformation describing both the event that triggered it and the file that\nchanged.</p>\n\n<p>You can send notifications to any Cloud Pub/Sub topic in any project for\nwhich your service account has sufficient permissions. As shown below, you\nneed to explicitly grant permission to your service account to enable\nGoogle Cloud Storage to publish on behalf of your account. (Even if your\ncurrent project created and owns the topic.)</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/pubsub\"\nrequire \"google/cloud/storage\"\n\npubsub = Google::Cloud::Pubsub.new\ntopic = pubsub.create_topic \"my-topic\"\ntopic.policy do |p|\n  p.add \"roles/pubsub.publisher\",\n        \"serviceAccount:my-project\" \\\n        \"@gs-project-accounts.iam.gserviceaccount.com\"\nend\n\nstorage = Google::Cloud::Storage.new\nbucket = storage.bucket \"my-bucket\"\n\nnotification = bucket.create_notification topic.name\n</code></pre>\n\n<h2 id=\"configuring-retries-and-timeout\">Configuring retries and timeout</h2>\n\n<p>You can configure how many times API requests may be automatically\nretried. When an API request fails, the response will be inspected to see\nif the request meets criteria indicating that it may succeed on retry,\nsuch as <code>500</code> and <code>503</code> status codes or a specific internal error code\nsuch as <code>rateLimitExceeded</code>. If it meets the criteria, the request will be\nretried after a delay. If another error occurs, the delay will be\nincreased before a subsequent attempt, until the <code>retries</code> limit is\nreached.</p>\n\n<p>You can also set the request <code>timeout</code> value in seconds.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new retries: 10, timeout: 120\n</code></pre>\n\n<p>See the <a href=\"https://cloud.google.com/storage/docs/json_api/v1/status-codes\">Storage status and error\ncodes</a>\nfor a list of error conditions.</p>","source":"google-cloud-storage/lib/google/cloud/storage.rb#L562","resources":[],"examples":[],"methods":[{"id":"new-class","type":"class","name":"new","title":["Google","Cloud","Storage.new"],"description":"<p>Creates a new object for connecting to the Storage service.\nEach call creates a new connection.</p>\n\n<p>For more information on connecting to Google Cloud see the\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>","source":"google-cloud-storage/lib/google/cloud/storage.rb#L605","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.new(\n  project_id: \"my-project\",\n  credentials: \"/path/to/keyfile.json\"\n)\n\nbucket = storage.bucket \"my-bucket\"\nfile = bucket.file \"path/to/my-file.ext\""}],"params":[{"name":"project_id","types":["String"],"description":"Project identifier for the Storage service\nyou are connecting to. If not present, the default project for the\ncredentials is used.","optional":true,"default":"nil","nullable":true},{"name":"credentials","types":["String","Hash","Google::Auth::Credentials"],"description":"The path to\nthe keyfile as a String, the contents of the keyfile as a Hash, or a\nGoogle::Auth::Credentials object. (See <a data-custom-type=\"google/cloud/storage/credentials\">Storage::Credentials</a>)","optional":true,"default":"nil","nullable":true},{"name":"scope","types":["String","Array<String>"],"description":"The OAuth 2.0 scopes controlling\nthe set of resources and operations that the connection can access.\nSee <a href=\"https://developers.google.com/identity/protocols/OAuth2\">Using OAuth 2.0 to Access Google\nAPIs</a>.</p>\n\n<p>The default scope is:</p>\n\n<ul>\n  <li><code>https://www.googleapis.com/auth/devstorage.full_control</code></li>\n</ul>","optional":true,"default":"nil","nullable":true},{"name":"retries","types":["Integer"],"description":"Number of times to retry requests on server\nerror. The default value is <code>3</code>. Optional.","optional":true,"default":"nil","nullable":true},{"name":"timeout","types":["Integer"],"description":"Default timeout to use in requests. Optional.","optional":true,"default":"nil","nullable":true},{"name":"project","types":["String"],"description":"Alias for the <code>project_id</code> argument. Deprecated.","optional":true,"default":"nil","nullable":true},{"name":"keyfile","types":["String"],"description":"Alias for the <code>credentials</code> argument.\nDeprecated.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/storage/project\">Google::Cloud::Storage::Project</a>"],"description":""}]},{"id":"anonymous-class","type":"class","name":"anonymous","title":["Google","Cloud","Storage.anonymous"],"description":"<p>Creates an unauthenticated, anonymous client for retrieving public data\nfrom the Storage service. Each call creates a new connection.</p>","source":"google-cloud-storage/lib/google/cloud/storage.rb#L643","resources":[],"examples":[{"caption":"<p>Use <code>skip_lookup</code> to avoid retrieving non-public metadata:</p>","code":"require \"google/cloud/storage\"\n\nstorage = Google::Cloud::Storage.anonymous\n\nbucket = storage.bucket \"public-bucket\", skip_lookup: true\nfile = bucket.file \"path/to/public-file.ext\", skip_lookup: true\n\ndownloaded = file.download\ndownloaded.rewind\ndownloaded.read #=> \"Hello world!\""}],"params":[{"name":"retries","types":["Integer"],"description":"Number of times to retry requests on server\nerror. The default value is <code>3</code>. Optional.","optional":true,"default":"nil","nullable":true},{"name":"timeout","types":["Integer"],"description":"Default timeout to use in requests. Optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/storage/project\">Google::Cloud::Storage::Project</a>"],"description":""}]}]}