{"id":"google/cloud/firestore/transaction","name":"Transaction","title":["Google","Cloud","Firestore","Transaction"],"description":"<h1 id=\"transaction\">Transaction</h1>\n\n<p>A transaction in Cloud Firestore is a set of reads and writes that\nexecute atomically at a single logical point in time.</p>\n\n<p>All changes are accumulated in memory until the block passed to\nDatabase#transaction completes. Transactions will be automatically\nretried when documents change before the transaction is committed. See\nDatabase#transaction.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/transaction.rb#L53","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\ncity = firestore.col(\"cities\").doc(\"SF\")\ncity.set({ name: \"San Francisco\",\n           state: \"CA\",\n           country: \"USA\",\n           capital: false,\n           population: 860000 })\n\nfirestore.transaction do |tx|\n  new_population = tx.get(city).data[:population] + 1\n  tx.update(city, { population: new_population })\nend"}],"methods":[{"id":"transaction_id-instance","type":"instance","name":"transaction_id","title":["Google","Cloud","Firestore","Transaction#transaction_id"],"description":"<p>The transaction identifier.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/transaction.rb#L66","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"transaction identifier."}]},{"id":"firestore-instance","type":"instance","name":"firestore","title":["Google","Cloud","Firestore","Transaction#firestore"],"description":"<p>The client the Cloud Firestore transaction belongs to.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/transaction.rb#L74","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/firestore/client\">Client</a>"],"description":"firestore client."}]},{"id":"get_all-instance","type":"instance","name":"get_all","title":["Google","Cloud","Firestore","Transaction#get_all"],"description":"<p>Retrieves a list of document snapshots.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/transaction.rb#L105","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.transaction do |tx|\n  # Get and print city documents\n  tx.get_all(\"cities/NYC\", \"cities/SF\", \"cities/LA\").each do |city|\n    puts \"#{city.document_id} has #{city[:population]} residents.\"\n  end\nend"}],"params":[{"name":"docs","types":["String","DocumentReference"],"description":"One or more strings\nrepresenting the path of the document, or document reference\nobjects.","optional":false,"nullable":false},{"name":"yield","types":["block"],"description":"The block for accessing the document snapshots.","optional":true,"nullable":false},{"name":"yield.document","types":["DocumentSnapshot"],"description":"A document snapshot.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Enumerator&lt;<a data-custom-type=\"google/cloud/firestore/documentsnapshot\">DocumentSnapshot</a>&gt;"],"description":"document snapshots list."}]},{"id":"get-instance","type":"instance","name":"get","title":["Google","Cloud","Firestore","Transaction#get"],"description":"<p>Retrieves document snapshots for the given value. Valid values can be\na string representing either a document or a collection of documents,\na document reference object, a collection reference object, or a query\nto be run.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/transaction.rb#L214","resources":[],"examples":[{"caption":"<p>Get a document snapshot given a document path:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.transaction do |tx|\n  # Get a document snapshot\n  nyc_snap = tx.get \"cities/NYC\"\nend"},{"caption":"<p>Get a document snapshot given a document reference:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nfirestore.transaction do |tx|\n  # Get a document snapshot\n  nyc_snap = tx.get nyc_ref\nend"},{"caption":"<p>Get document snapshots given a collection path:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.transaction do |tx|\n  # Get documents for a collection path\n  tx.get(\"cities\").each do |city|\n    # Update the city population by 1\n    tx.update(city, { population: city[:population] + 1})\n  end\nend"},{"caption":"<p>Get document snapshots given a collection reference:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a collection reference\ncities_col = firestore.col :cities\n\nfirestore.transaction do |tx|\n  # Get documents for a collection\n  tx.get(cities_col).each do |city|\n    # Update the city population by 1\n    tx.update(city, { population: city[:population] + 1})\n  end\nend"},{"caption":"<p>Get document snapshots given a query:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Create a query\nquery = firestore.col(:cities).select(:population)\n\nfirestore.transaction do |tx|\n  # Get/run a query\n  tx.get(query).each do |city|\n    # Update the city population by 1\n    tx.update(city, { population: city[:population] + 1})\n  end\nend"}],"params":[{"name":"obj","types":["String","DocumentReference","CollectionReference","Query"],"description":"A string representing the path of a document or collection, a\ndocument reference object, a collection reference object, or a query\nto run.","optional":false,"nullable":false},{"name":"yield","types":["block"],"description":"The block for accessing the document snapshots.","optional":true,"nullable":false},{"name":"yield.document","types":["DocumentReference"],"description":"A document snapshot.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/firestore/documentreference\">DocumentReference</a>","Enumerator&lt;<a data-custom-type=\"google/cloud/firestore/documentreference\">DocumentReference</a>&gt;"],"description":"A\nsingle document snapshot when passed a document path a document\nreference, or a list of document snapshots when passed other valid\nvalues."}]},{"id":"create-instance","type":"instance","name":"create","title":["Google","Cloud","Firestore","Transaction#create"],"description":"<p>Creates a document with the provided data (fields and values).</p>\n\n<p>The operation will fail if the document already exists.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/transaction.rb#L285","resources":[],"examples":[{"caption":"<p>Create a document using a document path:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.transaction do |tx|\n  tx.create(\"cities/NYC\", { name: \"New York City\" })\nend"},{"caption":"<p>Create a document using a document reference:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nfirestore.transaction do |tx|\n  tx.create(nyc_ref, { name: \"New York City\" })\nend"},{"caption":"<p>Create a document and set a field to server_time:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nfirestore.transaction do |tx|\n  tx.create(nyc_ref, { name: \"New York City\",\n                       updated_at: firestore.field_server_time })\nend"}],"params":[{"name":"doc","types":["String","DocumentReference"],"description":"A string representing the\npath of the document, or a document reference object.","optional":false,"nullable":false},{"name":"data","types":["Hash"],"description":"The document’s fields and values.","optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"set-instance","type":"instance","name":"set","title":["Google","Cloud","Firestore","Transaction#set"],"description":"<p>Writes the provided data (fields and values) to the provided document.\nIf the document does not exist, it will be created. By default, the\nprovided data overwrites existing data, but the provided data can be\nmerged into the existing document using the <code>merge</code> argument.</p>\n\n<p>If you’re not sure whether the document exists, use the <code>merge</code>\nargument to merge the new data with any existing document data to\navoid overwriting entire documents.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/transaction.rb#L386","resources":[],"examples":[{"caption":"<p>Set a document using a document path:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.transaction do |tx|\n  # Update a document\n  tx.set(\"cities/NYC\", { name: \"New York City\" })\nend"},{"caption":"<p>Create a document using a document reference:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nfirestore.transaction do |tx|\n  # Update a document\n  tx.set(nyc_ref, { name: \"New York City\" })\nend"},{"caption":"<p>Set a document and merge all data:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.transaction do |tx|\n  tx.set(\"cities/NYC\", { name: \"New York City\" }, merge: true)\nend"},{"caption":"<p>Set a document and merge only name:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.transaction do |tx|\n  tx.set(\"cities/NYC\", { name: \"New York City\" }, merge: :name)\nend"},{"caption":"<p>Set a document and deleting a field using merge:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_data = { name: \"New York City\",\n             trash: firestore.field_delete }\n\nfirestore.transaction do |tx|\n  tx.set(nyc_ref, nyc_data, merge: true)\nend"},{"caption":"<p>Set a document and set a field to server_time:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_data = { name: \"New York City\",\n             updated_at: firestore.field_server_time }\n\nfirestore.transaction do |tx|\n  tx.set(nyc_ref, nyc_data, merge: true)\nend"}],"params":[{"name":"doc","types":["String","DocumentReference"],"description":"A string representing the\npath of the document, or a document reference object.","optional":false,"nullable":false},{"name":"data","types":["Hash"],"description":"The document’s fields and values.","optional":false,"nullable":false},{"name":"merge","types":["Boolean","FieldPath","String","Symbol"],"description":"When\n<code>true</code>, all provided data is merged with the existing document data.\nWhen the argument is one or more field path, only the data for\nfields in this argument is merged with the existing document data.\nThe default is to not merge, but to instead overwrite the existing\ndocument data.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[]},{"id":"update-instance","type":"instance","name":"update","title":["Google","Cloud","Firestore","Transaction#update"],"description":"<p>Updates the document with the provided data (fields and values). The\nprovided data is merged into the existing document data.</p>\n\n<p>The operation will fail if the document does not exist.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/transaction.rb#L492","resources":[],"examples":[{"caption":"<p>Update a document using a document path:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.transaction do |tx|\n  tx.update(\"cities/NYC\", { name: \"New York City\" })\nend"},{"caption":"<p>Directly update a deeply-nested field with a <code>FieldPath</code>:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nnested_field_path = Google::Cloud::Firestore::FieldPath.new(\n  :favorites, :food\n)\n\nfirestore.transaction do |tx|\n  tx.update(\"users/frank\", { nested_field_path: \"Pasta\" })\nend"},{"caption":"<p>Update a document using a document reference:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nfirestore.transaction do |tx|\n  tx.update(nyc_ref, { name: \"New York City\" })\nend"},{"caption":"<p>Update a document using the <code>update_time</code> precondition:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nlast_updated_at = Time.now - 42 # 42 seconds ago\n\nfirestore.transaction do |tx|\n  tx.update(\"cities/NYC\", { name: \"New York City\" },\n           update_time: last_updated_at)\nend"},{"caption":"<p>Update a document and deleting a field:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_data = { name: \"New York City\",\n             trash: firestore.field_delete }\n\nfirestore.transaction do |tx|\n  tx.update(nyc_ref, nyc_data)\nend"},{"caption":"<p>Update a document and set a field to server_time:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_data = { name: \"New York City\",\n             updated_at: firestore.field_server_time }\n\nfirestore.transaction do |tx|\n  tx.update(nyc_ref, nyc_data)\nend"}],"params":[{"name":"doc","types":["String","DocumentReference"],"description":"A string representing the\npath of the document, or a document reference object.","optional":false,"nullable":false},{"name":"data","types":["Hash<FieldPath|String|Symbol, Object>"],"description":"The document’s\nfields and values.</p>\n\n<p>The top-level keys in the data hash are considered field paths, and\ncan either be a FieldPath object, or a string representing the\nnested fields. In other words the string represents individual\nfields joined by “.”. Fields containing <code>~</code>, <code>*</code>, <code>/</code>, <code>[</code>, <code>]</code>, and\n<code>.</code> cannot be in a dotted string, and should provided using a\n<a data-custom-type=\"google/cloud/firestore/fieldpath\">FieldPath</a> object instead.","optional":false,"nullable":false},{"name":"update_time","types":["Time"],"description":"When set, the document must have been last\nupdated at that time. Optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[]},{"id":"delete-instance","type":"instance","name":"delete","title":["Google","Cloud","Firestore","Transaction#delete"],"description":"<p>Deletes a document from the database.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/transaction.rb#L559","resources":[],"examples":[{"caption":"<p>Delete a document using a document path:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.transaction do |tx|\n  # Delete a document\n  tx.delete \"cities/NYC\"\nend"},{"caption":"<p>Delete a document using a document reference:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nfirestore.transaction do |tx|\n  # Delete a document\n  tx.delete nyc_ref\nend"},{"caption":"<p>Delete a document using <code>exists</code>:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nfirestore.transaction do |tx|\n  # Delete a document\n  tx.delete \"cities/NYC\", exists: true\nend"},{"caption":"<p>Delete a document using the <code>update_time</code> precondition:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nlast_updated_at = Time.now - 42 # 42 seconds ago\n\nfirestore.transaction do |tx|\n  # Delete a document\n  tx.delete \"cities/NYC\", update_time: last_updated_at\nend"}],"params":[{"name":"doc","types":["String","DocumentReference"],"description":"A string representing the\npath of the document, or a document reference object.","optional":false,"nullable":false},{"name":"exists","types":["Boolean"],"description":"Whether the document must exist. When <code>true</code>,\nthe document must exist or an error is raised. Default is <code>false</code>.\nOptional.","optional":true,"default":"nil","nullable":true},{"name":"update_time","types":["Time"],"description":"When set, the document must have been last\nupdated at that time. Optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[]}]}