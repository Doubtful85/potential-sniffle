{"id":"google/cloud/logging/asyncwriter","name":"AsyncWriter","title":["Google","Cloud","Logging","AsyncWriter"],"description":"<h1 id=\"asyncwriter\">AsyncWriter</h1>\n\n<p>An object that batches and transmits log entries asynchronously.</p>\n\n<p>Use this object to transmit log entries efficiently. It keeps a queue\nof log entries, and runs a background thread that transmits them to\nthe logging service in batches. Generally, adding to the queue will\nnot block.</p>\n\n<p>This object is thread-safe; it may accept write requests from\nmultiple threads simultaneously, and will serialize them when\nexecuting in the background thread.</p>","source":"google-cloud-logging/lib/google/cloud/logging/async_writer.rb#L56","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\n\nasync = logging.async_writer\n\nentry1 = logging.entry payload: \"Job started.\"\nentry2 = logging.entry payload: \"Job completed.\"\n\nlabels = { job_size: \"large\", job_code: \"red\" }\nresource = logging.resource \"gae_app\",\n                            \"module_id\" => \"1\",\n                            \"version_id\" => \"20150925t173233\"\n\nasync.write_entries [entry1, entry2],\n                    log_name: \"my_app_log\",\n                    resource: resource,\n                    labels: labels"}],"methods":[{"id":"last_exception-instance","type":"instance","name":"last_exception","title":["Google","Cloud","Logging","AsyncWriter#last_exception"],"description":"<p>The last exception thrown by the background thread, or nil if nothing\nhas been thrown.</p>","source":"google-cloud-logging/lib/google/cloud/logging/async_writer.rb#L95","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"write_entries-instance","type":"instance","name":"write_entries","title":["Google","Cloud","Logging","AsyncWriter#write_entries"],"description":"<p>Asynchronously write one or more log entries to the Stackdriver\nLogging service.</p>\n\n<p>Unlike the main write_entries method, this method usually does not\nblock. The actual write RPCs will happen in the background, and may\nbe batched with related calls. However, if the queue is full, this\nmethod will block until enough space has cleared out.</p>","source":"google-cloud-logging/lib/google/cloud/logging/async_writer.rb#L149","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\nasync = logging.async_writer\n\nentry = logging.entry payload: \"Job started.\",\n                      log_name: \"my_app_log\"\nentry.resource.type = \"gae_app\"\nentry.resource.labels[:module_id] = \"1\"\nentry.resource.labels[:version_id] = \"20150925t173233\"\n\nasync.write_entries entry"}],"params":[{"name":"entries","types":["Google::Cloud::Logging::Entry","Array<Google::Cloud::Logging::Entry>"],"description":"One or more entry\nobjects to write. The log entries must have values for all required\nfields.","optional":false,"nullable":false},{"name":"log_name","types":["String"],"description":"A default log ID for those log entries in\n<code>entries</code> that do not specify their own <code>log_name</code>. See also\n<a data-custom-type=\"google/cloud/logging/entry\" data-method=\"log_name=-instance\">Entry#log_name=</a>.","optional":true,"default":"nil","nullable":true},{"name":"resource","types":["Resource"],"description":"A default monitored resource for those log\nentries in entries that do not specify their own resource. See also\n<a data-custom-type=\"google/cloud/logging/entry\" data-method=\"resource-instance\">Entry#resource</a>.","optional":true,"default":"nil","nullable":true},{"name":"labels","types":["Hash{Symbol,String => String}"],"description":"User-defined <code>key:value</code>\nitems that are added to the <code>labels</code> field of each log entry in\n<code>entries</code>, except when a log entry specifies its own <code>key:value</code>\nitem with the same key. See also <a data-custom-type=\"google/cloud/logging/entry\" data-method=\"labels=-instance\">Entry#labels=</a>.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/logging/asyncwriter\">Google::Cloud::Logging::AsyncWriter</a>"],"description":"Returns self."}]},{"id":"logger-instance","type":"instance","name":"logger","title":["Google","Cloud","Logging","AsyncWriter#logger"],"description":"<p>Creates a logger instance that is API-compatible with Ruby’s standard\nlibrary <a href=\"http://ruby-doc.org/stdlib/libdoc/logger/rdoc\">Logger</a>.</p>\n\n<p>The logger will use AsyncWriter to transmit log entries on a\nbackground thread.</p>","source":"google-cloud-logging/lib/google/cloud/logging/async_writer.rb#L197","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\n\nresource = logging.resource \"gae_app\",\n                            module_id: \"1\",\n                            version_id: \"20150925t173233\"\n\nasync = logging.async_writer\nlogger = async.logger \"my_app_log\", resource, env: :production\nlogger.info \"Job started.\""}],"params":[{"name":"log_name","types":["String"],"description":"A log resource name to be associated with the\nwritten log entries.","optional":false,"nullable":false},{"name":"resource","types":["Google::Cloud::Logging::Resource"],"description":"The monitored\nresource to be associated with written log entries.","optional":false,"nullable":false},{"name":"labels","types":["Hash"],"description":"A set of user-defined data to be associated with\nwritten log entries.","optional":true,"default":"{}","nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/logging/logger\">Google::Cloud::Logging::Logger</a>"],"description":"a Logger object that can be\nused in place of a ruby standard library logger object."}]},{"id":"stop!-instance","type":"instance","name":"stop!","title":["Google","Cloud","Logging","AsyncWriter#stop!"],"description":"<p>Stop this asynchronous writer and block until it has been stopped.</p>\n\n<p>DEPRECATED. Use #async_stop! instead.</p>","source":"google-cloud-logging/lib/google/cloud/logging/async_writer.rb#L309","resources":[],"examples":[],"params":[{"name":"timeout","types":["Number"],"description":"Timeout in seconds.","optional":false,"nullable":false},{"name":"force","types":["Boolean"],"description":"If set to true, and the writer hasn’t stopped\nwithin the given timeout, kill it forcibly by terminating the\nthread. This should be used with extreme caution, as it can\nleave RPCs unfinished. Default is false.","optional":true,"default":"false","nullable":false}],"exceptions":[],"returns":[{"types":["Symbol"],"description":"Returns <code>:stopped</code> if the AsyncWriter was already\nstopped at the time of invocation, <code>:waited</code> if it stopped\nduring the timeout period, <code>:timeout</code> if it is still running\nafter the timeout, or <code>:forced</code> if it was forcibly killed."}]}]}