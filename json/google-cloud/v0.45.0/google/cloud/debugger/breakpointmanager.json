{"id":"google/cloud/debugger/breakpointmanager","name":"BreakpointManager","title":["Google","Cloud","Debugger","BreakpointManager"],"description":"<h1 id=\"breakpointmanager\">BreakpointManager</h1>\n\n<p>Responsible for querying Stackdriver Debugger service for any active\nbreakpoints and keep an accurate local copies of the breakpoints.</p>\n\n<p>It correctly remembers which breakpoints are currently active and\nwatched by the debugger agent, and which breakpoints are already\ncompleted. The BreakpointManager holds the record of truth for debugger\nbreakpoints</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint_manager.rb#L33","resources":[],"examples":[],"methods":[{"id":"agent-instance","type":"instance","name":"agent","title":["Google","Cloud","Debugger","BreakpointManager#agent"],"description":"<p>The debugger agent this tracer belongs to</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint_manager.rb#L39","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/debugger/agent\">Google::Cloud::Debugger::Agent</a>"],"description":""}]},{"id":"app_root-instance","type":"instance","name":"app_root","title":["Google","Cloud","Debugger","BreakpointManager#app_root"],"description":"<p>Application root directory, in absolute file path form.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint_manager.rb#L48","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":""}]},{"id":"on_breakpoints_change-instance","type":"instance","name":"on_breakpoints_change","title":["Google","Cloud","Debugger","BreakpointManager#on_breakpoints_change"],"description":"<p>Callback function invoked when new breakpoints are added or removed</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint_manager.rb#L53","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Method"],"description":""}]},{"id":"on_breakpoints_change=-instance","type":"instance","name":"on_breakpoints_change=","title":["Google","Cloud","Debugger","BreakpointManager#on_breakpoints_change="],"description":"<p>Callback function invoked when new breakpoints are added or removed</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint_manager.rb#L53","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Method"],"description":""}]},{"id":"sync_active_breakpoints-instance","type":"instance","name":"sync_active_breakpoints","title":["Google","Cloud","Debugger","BreakpointManager#sync_active_breakpoints"],"description":"<p>Sync active breakpoints with Stackdriver Debugger service for a given\ndebuggee application. Each request to the debugger service returns\nthe full list of all active breakpoints. This method makes sure the\nlocal cache of active breakpoints is consistent with server\nbreakpoints set.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint_manager.rb#L85","resources":[],"examples":[],"params":[{"name":"debuggee_id","types":["String"],"description":"Debuggee application ID","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Boolean"],"description":"True if synced successfully; otherwise false."}]},{"id":"update_breakpoints-instance","type":"instance","name":"update_breakpoints","title":["Google","Cloud","Debugger","BreakpointManager#update_breakpoints"],"description":"<p>Update the local breakpoints cache with a list of server active\nbreakpoints. New breakpoints will be added to local cache, and deleted\nbreakpoints will be removed from local cache.</p>\n\n<p>It also correctly identifies evaluated active breakpoints from the\nserver set of breakpoints, and does not re-add such evaluated\nbreakpoints to the active list again.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint_manager.rb#L116","resources":[],"examples":[],"params":[{"name":"server_breakpoints","types":["Array<Google::Cloud::Debugger::Breakpoint>"],"description":"List of active breakpoints from Stackdriver Debugger service","optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"breakpoint_hit-instance","type":"instance","name":"breakpoint_hit","title":["Google","Cloud","Debugger","BreakpointManager#breakpoint_hit"],"description":"<p>Evaluates a hit breakpoint, and submit the breakpoint to\nTransmitter if this breakpoint is evaluated successfully.</p>\n\n<p>See <a data-custom-type=\"google/cloud/debugger/snappoint\" data-method=\"evaluate-instance\">Snappoint#evaluate</a> and <a data-custom-type=\"google/cloud/debugger/logpoint\" data-method=\"evaluate-instance\">Logpoint#evaluate</a> for evaluation\ndetails.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint_manager.rb#L153","resources":[],"examples":[],"params":[{"name":"breakpoint","types":["Google::Cloud::Debugger::Breakpoint"],"description":"The breakpoint\nto be evaluated","optional":false,"nullable":false},{"name":"call_stack_bindings","types":["Array<Binding>"],"description":"An array of Ruby Binding\nobjects, from the each frame of the call stack that leads to the\ntriggering of the breakpoints.","optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"log_logpoint-instance","type":"instance","name":"log_logpoint","title":["Google","Cloud","Debugger","BreakpointManager#log_logpoint"],"description":"<p>Assume the given logpoint is successfully evaluated, log the\nevaluated log message via logger</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint_manager.rb#L179","resources":[],"examples":[],"params":[{"name":"logpoint","types":["Google::Cloud::Debugger::Breakpoint"],"description":"The evaluated\nlogpoint.","optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"mark_off-instance","type":"instance","name":"mark_off","title":["Google","Cloud","Debugger","BreakpointManager#mark_off"],"description":"<p>Mark a given active breakpoint as completed. Meaning moving it from\nlist of active breakpoints to completed breakpoints.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint_manager.rb#L206","resources":[],"examples":[],"params":[{"name":"breakpoint","types":["Google::Cloud::Debugger::Breakpoint"],"description":"The breakpoint\nto remove from local cache","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/debugger/breakpoint\">Google::Cloud::Debugger::Breakpoint</a>","NilClass"],"description":"The same\nbreakpoint if successfully marked off as completed. Nil if\nthis breakpoint isn’t found in the list of active breakpoints or\nfailed to mark off as completed."}]},{"id":"breakpoints-instance","type":"instance","name":"breakpoints","title":["Google","Cloud","Debugger","BreakpointManager#breakpoints"],"description":"<p>Get a list of all breakpoints, both active and completed.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint_manager.rb#L224","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Array&lt;<a data-custom-type=\"google/cloud/debugger/breakpoint\">Google::Cloud::Debugger::Breakpoint</a>&gt;"],"description":"A list of all\nbreakpoints."}]},{"id":"completed_breakpoints-instance","type":"instance","name":"completed_breakpoints","title":["Google","Cloud","Debugger","BreakpointManager#completed_breakpoints"],"description":"<p>Get a list of all completed breakpoints.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint_manager.rb#L235","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Array&lt;<a data-custom-type=\"google/cloud/debugger/breakpoint\">Google::Cloud::Debugger::Breakpoint</a>&gt;"],"description":"A list of all\ncompleted breakpoints."}]},{"id":"active_breakpoints-instance","type":"instance","name":"active_breakpoints","title":["Google","Cloud","Debugger","BreakpointManager#active_breakpoints"],"description":"<p>Get a list of all active breakpoints.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint_manager.rb#L246","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Array&lt;<a data-custom-type=\"google/cloud/debugger/breakpoint\">Google::Cloud::Debugger::Breakpoint</a>&gt;"],"description":"A list of all\nactive breakpoints."}]},{"id":"all_complete?-instance","type":"instance","name":"all_complete?","title":["Google","Cloud","Debugger","BreakpointManager#all_complete?"],"description":"<p>Check whether any active breakpoints haven’t been completed yet.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint_manager.rb#L257","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Boolean"],"description":"True if no more active breakpoints are left. False\notherwise."}]},{"id":"clear_breakpoints-instance","type":"instance","name":"clear_breakpoints","title":["Google","Cloud","Debugger","BreakpointManager#clear_breakpoints"],"description":"<p>Clear local breakpoints cache. Remove all active and completed\nbreakpoints</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint_manager.rb#L266","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]}]}