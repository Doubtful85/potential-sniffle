{"id":"google/cloud/debugger","name":"Debugger","title":["Google","Cloud","Debugger"],"description":"<h1 id=\"stackdriver-debugger\">Stackdriver Debugger</h1>\n\n<p>Stackdriver Debugger is a feature of the Google Cloud Platform that lets\nyou inspect the state of an application at any code location without using\nlogging statements and without stopping or slowing down your applications.\nYour users are not impacted during debugging. Using the production\ndebugger you can capture the local variables and call stack and link it\nback to a specific line location in your source code. You can use this to\nanalyze the production state of your application and understand the\nbehavior of your code in production.</p>\n\n<p>For general information about Stackdriver Debugger, read <a href=\"https://cloud.google.com/debugger/docs/\">Stackdriver\nDebugger Documentation</a>.</p>\n\n<p>The Stackdriver Debugger Ruby library, <code>google-cloud-debugger</code>, provides:</p>\n\n<ul>\n  <li>Easy-to-use debugger instrumentation that reports state data, such as\nvalue of program variables and the call stack, to Stackdriver Debugger\nwhen the code at a breakpoint location is executed in your Ruby\napplication. See the <a data-anchor=\"instrumenting-your-app\" href=\"#instrumenting-your-app\">instrumenting your app</a>\nsection for how to debug your application, in both development and\nproduction.</li>\n  <li>An idiomatic Ruby API for registerying debuggee application, and\nquerying or manipulating breakpoints in registered Ruby debuggee\napplication. See <a data-anchor=\"stackdriver-debugger-api\" href=\"#stackdriver-debugger-api\">Debugger API</a> section for\nan introduction to Stackdriver Debugger API.</li>\n</ul>\n\n<h2 id=\"instrumenting-your-app\">Instrumenting Your App</h2>\n\n<p>This instrumentation library provides the following features to help you\ndebug your applications in production:</p>\n\n<ul>\n  <li>Automatic application registration. It facilitates multiple running\ninstances of same version of application when hosted in production.</li>\n  <li>A background debugger agent that runs side-by-side with your\napplication that automatically collects state data when code is\nexecuted at breakpoint locations.</li>\n  <li>A Rack middleware and Railtie that automatically manages the debugger\nagent for Ruby on Rails and other Rack-based Ruby applications.</li>\n</ul>\n\n<p>When this library is configured in your running application, and the\nsource code and breakpoints are setup through the Google Cloud Console,\nYou’ll be able to\n<a href=\"https://cloud.google.com/debugger/docs/debugging\">interact</a> with your\napplication in real time through the <a href=\"https://console.cloud.google.com/debug?_ga=1.84295834.280814654.1476313407\">Stackdriver Debugger\nUI</a>.\nThis library also integrates with Google App Engine Flexible to make\ndebuggee application configuration more seemless.</p>\n\n<p>Note that when no breakpoints are created, the debugger agent consumes\nvery little resource and has no interference with the running application.\nOnce breakpoints are created and depends on where the breakpoints are\nlocated, the debugger agent may add a little latency onto each request.\nThe application performance will be back to normal after all breakpoints\nare finished being evaluated. Be aware the more breakpoints are created,\nor the harder to reach the breakpoints, the more resource the debugger\nagent would need to consume.</p>\n\n<h3 id=\"using-instrumentation-with-ruby-on-rails\">Using instrumentation with Ruby on Rails</h3>\n\n<p>To install application instrumentation in your Ruby on Rails app, add this\ngem, <code>google-cloud-debugger</code>, to your Gemfile and update your bundle. Then\nadd the following line to your <code>config/application.rb</code> file:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/debugger/rails\"\n</code></pre>\n\n<p>This will load a Railtie that automatically integrates with the Rails\nframework by injecting a Rack middleware. The Railtie also takes in the\nfollowing Rails configuration as parameter of the debugger agent\ninitialization:</p>\n\n<pre><code class=\"language-ruby\"># Explicitly enable or disable Stackdriver Debugger Agent\nconfig.google_cloud.use_debugger = true\n# Shared Google Cloud Platform project identifier\nconfig.google_cloud.project_id = \"gcloud-project\"\n# Google Cloud Platform project identifier for Stackdriver Debugger only\nconfig.google_cloud.debugger.project_id = \"debugger-project\"\n# Shared Google Cloud authentication json file\nconfig.google_cloud.keyfile = \"/path/to/keyfile.json\"\n# Google Cloud authentication json file for Stackdriver Debugger only\nconfig.google_cloud.debugger.keyfile = \"/path/to/debugger/keyfile.json\"\n# Stackdriver Debugger Agent module name identifier\nconfig.google_cloud.debugger.module_name = \"my-ruby-app\"\n# Stackdriver Debugger Agent module version identifier\nconfig.google_cloud.debugger.module_version = \"v1\"\n</code></pre>\n\n<p>See the <a data-custom-type=\"google/cloud/debugger/railtie\">Google::Cloud::Debugger::Railtie</a> class for more information.</p>\n\n<h3 id=\"using-instrumentation-with-sinatra\">Using instrumentation with Sinatra</h3>\n\n<p>To install application instrumentation in your Sinatra app, add this gem,\n<code>google-cloud-debugger</code>, to your Gemfile and update your bundle. Then add\nthe following lines to your main application Ruby file:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/debugger\"\nuse Google::Cloud::Debugger::Middleware\n</code></pre>\n\n<p>This will install the debugger middleware in your application.</p>\n\n<p>Configuration parameters may also be passed in as arguments to Middleware.</p>\n<pre><code class=\"language-ruby\">require \"google/cloud/debugger\"\nuse Google::Cloud::Debugger::Middleware project: \"debugger-project-id\",\n                                        keyfile: \"/path/to/keyfile.json\",\n                                        module_name: \"my-ruby-app\",\n                                        module_version: \"v1\"\n</code></pre>\n\n<h3 id=\"using-instrumentation-with-other-rack-based-frameworks\">Using instrumentation with other Rack-based frameworks</h3>\n\n<p>To install application instrumentation in an app using another Rack-based\nweb framework, add this gem, <code>google-cloud-debugger</code>, to your Gemfile and\nupdate your bundle. Then add install the debugger middleware in your\nmiddleware stack. In most cases, this means adding these lines to your\n<code>config.ru</code> Rack configuration file:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/debugger\"\nuse Google::Cloud::Debugger::Middleware\n</code></pre>\n\n<p>Some web frameworks have an alternate mechanism for modifying the\nmiddleware stack. Consult your web framework’s documentation for more\ninformation.</p>\n\n<h3 id=\"the-stackdriver-diagnostics-suite\">The Stackdriver diagnostics suite</h3>\n\n<p>The debugger library is part of the Stackdriver diagnostics suite, which\nalso includes error reporting, log analysis, and tracing analysis. If you\ninclude the <code>stackdriver</code> gem in your Gemfile, this debugger library will\nbe included automatically. In addition, if you include the <code>stackdriver</code>\ngem in an application using Ruby On Rails, the Railties will be installed\nautomatically. See the documentation for the “stackdriver” gem\nfor more details.</p>\n\n<h2 id=\"stackdriver-debugger-api\">Stackdriver Debugger API</h2>\n\n<p>This library also includes an easy to use Ruby client for the\nStackdriver Debugger API. This API provides calls to register debuggee\napplication, as well as creating or modifying breakpoints.</p>\n\n<p>For further information on the Debugger API, see\n<a data-custom-type=\"google/cloud/debugger/project\">Google::Cloud::Debugger::Project</a></p>\n\n<h3 id=\"registering-debuggee-application\">Registering debuggee application</h3>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/debugger/v2\"\n\nController2Client = Google::Cloud::Debugger::V2::Controller2Client\nDebuggee = Google::Devtools::Clouddebugger::V2::Debuggee\n\ncontroller2_client = Controller2Client.new\ndebuggee = Debuggee.new\nresponse = controller2_client.register_debuggee(debuggee)\ndebuggee_id = response.debuggee.id\n</code></pre>\n<p>See <a href=\"https://cloud.google.com/debugger/api/reference/rpc/google.devtools.clouddebugger.v2#google.devtools.clouddebugger.v2.Debuggee\">Stackdriver Debugger Debuggee\ndoc</a>\non fields necessary for registerying a debuggee.</p>\n\n<p>Upon successful registration, the response debuggee object will contain\na debuggee_id that’s later needed to interact with the other Stackdriver\nDebugger API.</p>\n\n<p>See <a data-custom-type=\"google/cloud/debugger/v2/controller2client\">Google::Cloud::Debugger::V2::Controller2Client</a> for details.</p>\n\n<h3 id=\"list-active-breakpoints\">List Active Breakpoints</h3>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/debugger/v2\"\n\nController2Client = Google::Cloud::Debugger::V2::Controller2Client\ncontroller2_client = Controller2Client.new\n\ndebuggee_id = ''\nresponse = controller2_client.list_active_breakpoints(debuggee_id)\nbreakpoints = response.breakpoints\n</code></pre>\n\n<p>See <a data-custom-type=\"google/cloud/debugger/v2/controller2client\">Google::Cloud::Debugger::V2::Controller2Client</a> for details.</p>\n\n<h3 id=\"update-active-breakpoint\">Update Active Breakpoint</h3>\n\n<p>Users can send custom snapshots for active breakpoints using this API.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/debugger/v2\"\n\nBreakpoint = Google::Devtools::Clouddebugger::V2::Breakpoint\nController2Client = Google::Cloud::Debugger::V2::Controller2Client\n\ncontroller2_client = Controller2Client.new\ndebuggee_id = ''\nbreakpoint = Breakpoint.new\nresponse =\n  controller2_client.update_active_breakpoint(debuggee_id, breakpoint)\n</code></pre>\n\n<p>See <a href=\"https://cloud.google.com/debugger/api/reference/rpc/google.devtools.clouddebugger.v2#google.devtools.clouddebugger.v2.Breakpoint\">Stackdriver Debugger Breakpoint\ndoc</a>\nfor all available fields for breakpoint.</p>\n\n<p>See <a data-custom-type=\"google/cloud/debugger/v2/controller2client\">Google::Cloud::Debugger::V2::Controller2Client</a> for details.</p>\n\n<h3 id=\"set-breakpoint\">Set Breakpoint</h3>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/debugger/v2\"\n\nBreakpoint = Google::Devtools::Clouddebugger::V2::Breakpoint\nDebugger2Client = Google::Cloud::Debugger::V2::Debugger2Client\n\ndebugger2_client = Debugger2Client.new\ndebuggee_id = ''\nbreakpoint = Breakpoint.new\nclient_version = ''\nresponse = debugger2_client.set_breakpoint(\n             debuggee_id, breakpoint, client_version)\n</code></pre>\n\n<p>See <a href=\"https://cloud.google.com/debugger/api/reference/rpc/google.devtools.clouddebugger.v2#google.devtools.clouddebugger.v2.Breakpoint\">Stackdriver Debugger Breakpoint\ndoc</a>\nfor fields needed to specify breakpoint location.</p>\n\n<p>See <a data-custom-type=\"google/cloud/debugger/v2/debugger2client\">Google::Cloud::Debugger::V2::Debugger2Client</a> for details.</p>\n\n<h3 id=\"get-breakpoint\">Get Breakpoint</h3>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/debugger/v2\"\n\nDebugger2Client = Google::Cloud::Debugger::V2::Debugger2Client\n\ndebugger2_client = Debugger2Client.new\ndebuggee_id = ''\nbreakpoint_id = ''\nclient_version = ''\nresponse = debugger2_client.get_breakpoint(\n             debuggee_id, breakpoint_id, client_version)\n</code></pre>\n\n<p>See <a data-custom-type=\"google/cloud/debugger/v2/debugger2client\">Google::Cloud::Debugger::V2::Debugger2Client</a> for details.</p>\n\n<h3 id=\"delete-breakpoint\">Delete Breakpoint</h3>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/debugger/v2\"\n\nDebugger2Client = Google::Cloud::Debugger::V2::Debugger2Client\n\ndebugger2_client = Debugger2Client.new\ndebuggee_id = ''\nbreakpoint_id = ''\nclient_version = ''\ndebugger2_client.delete_breakpoint(\n  debuggee_id, breakpoint_id, client_version)\n</code></pre>\n\n<p>See <a data-custom-type=\"google/cloud/debugger/v2/debugger2client\">Google::Cloud::Debugger::V2::Debugger2Client</a> for details.</p>\n\n<h3 id=\"list-breakpoints\">List Breakpoints</h3>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/debugger/v2\"\n\nDebugger2Client = Google::Cloud::Debugger::V2::Debugger2Client\n\nDebugger2Client = Google::Cloud::Debugger::V2::Debugger2Client\n\ndebugger2_client = Debugger2Client.new\ndebuggee_id = ''\nclient_version = ''\nresponse = debugger2_client.list_breakpoints(debuggee_id, client_version)\n</code></pre>\n\n<p>See <a data-custom-type=\"google/cloud/debugger/v2/debugger2client\">Google::Cloud::Debugger::V2::Debugger2Client</a> for details.</p>\n\n<h3 id=\"list-debuggees\">List Debuggees</h3>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/debugger/v2\"\n\nDebugger2Client = Google::Cloud::Debugger::V2::Debugger2Client\n\ndebugger2_client = Debugger2Client.new\nproject = ''\nclient_version = ''\nresponse = debugger2_client.list_debuggees(project, client_version)\n</code></pre>\n\n<p>See <a data-custom-type=\"google/cloud/debugger/v2/debugger2client\">Google::Cloud::Debugger::V2::Debugger2Client</a> for details.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger.rb#L321","resources":[],"examples":[],"methods":[{"id":"new-class","type":"class","name":"new","title":["Google","Cloud","Debugger.new"],"description":"<p>Creates a new debugger object for instrumenting Stackdriver Debugger for\nan application. Each call creates a new debugger agent with independent\nconnection service.</p>\n\n<p>For more information on connecting to Google Cloud see the\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger.rb#L353","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/debugger\"\n\ndebugger = Google::Cloud::Debugger.new\ndebugger.start"}],"params":[{"name":"project","types":["String"],"description":"Project identifier for the Stackdriver Debugger\nservice.","optional":true,"default":"nil","nullable":true},{"name":"keyfile","types":["String","Hash"],"description":"Keyfile downloaded from Google Cloud:\neither the JSON data or the path to a readable file.","optional":true,"default":"nil","nullable":true},{"name":"module_name","types":["String"],"description":"Name for the debuggee application. Optional.","optional":true,"default":"nil","nullable":true},{"name":"module_version","types":["String"],"description":"Version identifier for the debuggee\napplication. Optional.","optional":true,"default":"nil","nullable":true},{"name":"scope","types":["String","Array<String>"],"description":"The OAuth 2.0 scopes controlling\nthe set of resources and operations that the connection can access.\nSee <a href=\"https://developers.google.com/identity/protocols/OAuth2\">Using OAuth 2.0 to Access Google\nAPIs</a>.\nThe default scope is <code>https://www.googleapis.com/auth/cloud-platform</code>","optional":true,"default":"nil","nullable":true},{"name":"timeout","types":["Integer"],"description":"Default timeout to use in requests. Optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/debugger/project\">Google::Cloud::Debugger::Project</a>"],"description":""}]}]}