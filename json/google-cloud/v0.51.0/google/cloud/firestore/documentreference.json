{"id":"google/cloud/firestore/documentreference","name":"DocumentReference","title":["Google","Cloud","Firestore","DocumentReference"],"description":"<h1 id=\"documentreference\">DocumentReference</h1>\n\n<p>A document reference object refers to a document location in a Cloud\nFirestore database and can be used to write or read data. A document\nresource at the referenced location may or may not exist.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_reference.rb#L38","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\""}],"methods":[{"id":"document_id-instance","type":"instance","name":"document_id","title":["Google","Cloud","Firestore","DocumentReference#document_id"],"description":"<p>The document identifier for the document resource.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_reference.rb#L47","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"document identifier."}]},{"id":"document_path-instance","type":"instance","name":"document_path","title":["Google","Cloud","Firestore","DocumentReference#document_path"],"description":"<p>A string representing the path of the document, relative to the\ndocument root of the database.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_reference.rb#L56","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"document path."}]},{"id":"cols-instance","type":"instance","name":"cols","title":["Google","Cloud","Firestore","DocumentReference#cols"],"description":"<p>Retrieves a list of collections nested under the document snapshot.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_reference.rb#L90","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.cols.each do |col|\n  puts col.collection_id\nend"}],"params":[{"name":"yield","types":["block"],"description":"The block for accessing the collections.","optional":true,"nullable":false},{"name":"yield.collection","types":["CollectionReference"],"description":"A collection.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["Enumerator&lt;<a data-custom-type=\"google/cloud/firestore/collectionreference\">CollectionReference</a>&gt;"],"description":"collection list."}]},{"id":"col-instance","type":"instance","name":"col","title":["Google","Cloud","Firestore","DocumentReference#col"],"description":"<p>Retrieves a collection nested under the document snapshot.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_reference.rb#L119","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\n# Get precincts sub-collection\nprecincts_col = nyc_ref.col \"precincts\""}],"params":[{"name":"collection_path","types":["String"],"description":"A string representing the path of\nthe collection, relative to the document.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/firestore/collectionreference\">CollectionReference</a>"],"description":"A collection."}]},{"id":"get-instance","type":"instance","name":"get","title":["Google","Cloud","Firestore","DocumentReference#get"],"description":"<p>Retrieve the document data.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_reference.rb#L144","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_snap = nyc_ref.get\nnyc_snap[:population] #=> 1000000"}],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/firestore/documentsnapshot\">DocumentSnapshot</a>"],"description":"document snapshot."}]},{"id":"parent-instance","type":"instance","name":"parent","title":["Google","Cloud","Firestore","DocumentReference#parent"],"description":"<p>The collection the document reference belongs to.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_reference.rb#L165","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\ncities_col = nyc_ref.parent"}],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/firestore/collectionreference\">CollectionReference</a>"],"description":"parent collection."}]},{"id":"create-instance","type":"instance","name":"create","title":["Google","Cloud","Firestore","DocumentReference#create"],"description":"<p>Create a document with the provided data (fields and values).</p>\n\n<p>The operation will fail if the document already exists.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_reference.rb#L203","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.create({ name: \"New York City\" })"},{"caption":"<p>Create a document and set a field to server_time:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.create({ name: \"New York City\",\n                 updated_at: firestore.field_server_time })"}],"params":[{"name":"data","types":["Hash"],"description":"The document’s fields and values.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/firestore/commitresponse/writeresult\">CommitResponse::WriteResult</a>"],"description":"The result of the change."}]},{"id":"set-instance","type":"instance","name":"set","title":["Google","Cloud","Firestore","DocumentReference#set"],"description":"<p>Write the provided data (fields and values) to the document. If the\ndocument does not exist, it will be created. By default, the provided\ndata overwrites existing data, but the provided data can be merged\ninto the existing document using the <code>merge</code> argument.</p>\n\n<p>If you’re not sure whether the document exists, use the <code>merge</code>\nargument to merge the new data with any existing document data to\navoid overwriting entire documents.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_reference.rb#L282","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.set({ name: \"New York City\" })"},{"caption":"<p>Set a document and merge all data:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.set({ name: \"New York City\" }, merge: true)"},{"caption":"<p>Set a document and merge only name:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.set({ name: \"New York City\" }, merge: :name)"},{"caption":"<p>Set a document and deleting a field using merge:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.set({ name: \"New York City\",\n              trash: firestore.field_delete }, merge: true)"},{"caption":"<p>Set a document and set a field to server_time:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.set({ name: \"New York City\",\n              updated_at: firestore.field_server_time })"}],"params":[{"name":"data","types":["Hash"],"description":"The document’s fields and values.","optional":false,"nullable":false},{"name":"merge","types":["Boolean","FieldPath","String","Symbol"],"description":"When\n<code>true</code>, all provided data is merged with the existing document data.\nWhen the argument is one or more field path, only the data for\nfields in this argument is merged with the existing document data.\nThe default is to not merge, but to instead overwrite the existing\ndocument data.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/firestore/commitresponse/writeresult\">CommitResponse::WriteResult</a>"],"description":"The result of the change."}]},{"id":"update-instance","type":"instance","name":"update","title":["Google","Cloud","Firestore","DocumentReference#update"],"description":"<p>Update the document with the provided data (fields and values). The\nprovided data is merged into the existing document data.</p>\n\n<p>The operation will fail if the document does not exist.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_reference.rb#L366","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.update({ name: \"New York City\" })"},{"caption":"<p>Directly update a deeply-nested field with a <code>FieldPath</code>:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\nuser_ref = firestore.doc \"users/frank\"\n\nnested_field_path = Google::Cloud::Firestore::FieldPath.new(\n  :favorites, :food\n)\nuser_ref.update({ nested_field_path: \"Pasta\" })"},{"caption":"<p>Update a document using the <code>update_time</code> precondition:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nlast_updated_at = Time.now - 42 # 42 seconds ago\n\nnyc_ref.update({ name: \"New York City\" },\n                 update_time: last_updated_at)"},{"caption":"<p>Update a document and deleting a field:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.update({ name: \"New York City\",\n                 trash: firestore.field_delete })"},{"caption":"<p>Update a document and set a field to server_time:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.update({ name: \"New York City\",\n                 updated_at: firestore.field_server_time })"}],"params":[{"name":"data","types":["Hash<FieldPath|String|Symbol, Object>"],"description":"The document’s\nfields and values.</p>\n\n<p>The top-level keys in the data hash are considered field paths, and\ncan either be a FieldPath object, or a string representing the\nnested fields. In other words the string represents individual\nfields joined by “.”. Fields containing <code>~</code>, <code>*</code>, <code>/</code>, <code>[</code>, <code>]</code>, and\n<code>.</code> cannot be in a dotted string, and should provided using a\n<a data-custom-type=\"google/cloud/firestore/fieldpath\">FieldPath</a> object instead.","optional":false,"nullable":false},{"name":"update_time","types":["Time"],"description":"When set, the document must have been last\nupdated at that time. Optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/firestore/commitresponse/writeresult\">CommitResponse::WriteResult</a>"],"description":"The result of the change."}]},{"id":"delete-instance","type":"instance","name":"delete","title":["Google","Cloud","Firestore","DocumentReference#delete"],"description":"<p>Deletes a document from the database.</p>","source":"google-cloud-firestore/lib/google/cloud/firestore/document_reference.rb#L417","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.delete"},{"caption":"<p>Delete a document using <code>exists</code>:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nnyc_ref.delete exists: true"},{"caption":"<p>Delete a document using the <code>update_time</code> precondition:</p>","code":"require \"google/cloud/firestore\"\n\nfirestore = Google::Cloud::Firestore.new\n\n# Get a document reference\nnyc_ref = firestore.doc \"cities/NYC\"\n\nlast_updated_at = Time.now - 42 # 42 seconds ago\nnyc_ref.delete update_time: last_updated_at"}],"params":[{"name":"exists","types":["Boolean"],"description":"Whether the document must exist. When <code>true</code>,\nthe document must exist or an error is raised. Default is <code>false</code>.\nOptional.","optional":true,"default":"nil","nullable":true},{"name":"update_time","types":["Time"],"description":"When set, the document must have been last\nupdated at that time. Optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/firestore/commitresponse/writeresult\">CommitResponse::WriteResult</a>"],"description":"The result of the change."}]}]}