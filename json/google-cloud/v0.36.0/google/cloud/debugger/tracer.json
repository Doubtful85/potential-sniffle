{"id":"google/cloud/debugger/tracer","name":"Tracer","title":["Google","Cloud","Debugger","Tracer"],"description":"<h1 id=\"tracer\">Tracer</h1>\n\n<p>When active breakpoints are set for the debugger, the tracer monitors\nthe running Ruby application and triggers evaluation when the code is\nexecuted at the breakpoint locations.</p>\n\n<p>The tracer tracks the running application using several Ruby TracePoints\nand C level Ruby debugging API.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/tracer.rb#L31","resources":[],"examples":[],"methods":[{"id":"agent-instance","type":"instance","name":"agent","title":["Google","Cloud","Debugger","Tracer#agent"],"description":"<p>The debugger agent this tracer belongs to</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/tracer.rb#L35","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/debugger/agent\">Google::Cloud::Debugger::Agent</a>"],"description":""}]},{"id":"app_root-instance","type":"instance","name":"app_root","title":["Google","Cloud","Debugger","Tracer#app_root"],"description":"<p>Ruby application root directory, in absolute path form. The\nStackdriver Debugger Service only knows the relative application file\npath. So the tracer needs to combine relative file path with\napplication root directory to get full file path for tracing purpose</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/tracer.rb#L43","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":""}]},{"id":"app_root=-instance","type":"instance","name":"app_root=","title":["Google","Cloud","Debugger","Tracer#app_root="],"description":"<p>Ruby application root directory, in absolute path form. The\nStackdriver Debugger Service only knows the relative application file\npath. So the tracer needs to combine relative file path with\napplication root directory to get full file path for tracing purpose</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/tracer.rb#L43","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":""}]},{"id":"update_breakpoints_cache-instance","type":"instance","name":"update_breakpoints_cache","title":["Google","Cloud","Debugger","Tracer#update_breakpoints_cache"],"description":"<p>Update tracerâ€™s private breakpoints cache with the list of active\nbreakpoints from BreakpointManager.</p>\n\n<p>This methood is atomic for thread safety purpose.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/tracer.rb#L87","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"breakpoint_hit-instance","type":"instance","name":"breakpoint_hit","title":["Google","Cloud","Debugger","Tracer#breakpoint_hit"],"description":"<p>Callback function when a breakpoint is hit. Handover the hit\nbreakpoint to breakpoint_manager to be evaluated.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/tracer.rb#L109","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"start-instance","type":"instance","name":"start","title":["Google","Cloud","Debugger","Tracer#start"],"description":"<p>Get the sync the breakpoints cache with BreakpointManager. Start\ntracing and monitoring if there are any breakpoints.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/tracer.rb#L135","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"stop-instance","type":"instance","name":"stop","title":["Google","Cloud","Debugger","Tracer#stop"],"description":"<p>Stops all tracing.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/tracer.rb#L142","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]}]}