{"id":"google/cloud/spanner/batchsnapshot","name":"BatchSnapshot","title":["Google","Cloud","Spanner","BatchSnapshot"],"description":"<h1 id=\"batchsnapshot\">BatchSnapshot</h1>\n\n<p>Represents a read-only transaction that can be configured to read at\ntimestamps in the past and allows for exporting arbitrarily large\namounts of data from Cloud Spanner databases. This is a snapshot which\nadditionally allows to partition a read or query request. The read/query\nrequest can then be executed independently over each partition while\nobserving the same snapshot of the database. A BatchSnapshot can also be\nshared across multiple processes/machines by passing around its\nserialized value and then recreating the transaction using #dump.</p>\n\n<p>Unlike locking read-write transactions, BatchSnapshot will never abort.\nThey can fail if the chosen read timestamp is garbage collected; however\nany read or query activity within an hour on the transaction avoids\ngarbage collection and most applications do not need to worry about this\nin practice.</p>\n\n<p>See <a data-custom-type=\"google/cloud/spanner/batchclient\" data-method=\"batch_snapshot-instance\">BatchClient#batch_snapshot</a> and <a data-custom-type=\"google/cloud/spanner/batchclient\" data-method=\"load_batch_snapshot-instance\">BatchClient#load_batch_snapshot</a>.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/batch_snapshot.rb#L61","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\nbatch_client = spanner.batch_client \"my-instance\", \"my-database\"\nbatch_snapshot = batch_client.batch_snapshot\n\npartitions = batch_snapshot.partition_read \"users\", [:id, :name]\n\npartition = partitions.first\nresults = batch_snapshot.execute_partition partition\n\nbatch_snapshot.close"}],"methods":[{"id":"transaction_id-instance","type":"instance","name":"transaction_id","title":["Google","Cloud","Spanner","BatchSnapshot#transaction_id"],"description":"<p>Identifier of the batch snapshot transaction.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/batch_snapshot.rb#L78","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"The transaction id."}]},{"id":"timestamp-instance","type":"instance","name":"timestamp","title":["Google","Cloud","Spanner","BatchSnapshot#timestamp"],"description":"<p>The read timestamp chosen for batch snapshot.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/batch_snapshot.rb#L86","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Time"],"description":"The chosen timestamp."}]},{"id":"partition_query-instance","type":"instance","name":"partition_query","title":["Google","Cloud","Spanner","BatchSnapshot#partition_query"],"description":"<p>Returns a list of <a data-custom-type=\"google/cloud/spanner/partition\">Partition</a> objects to execute a batch query against\na database.</p>\n\n<p>These partitions can be executed across multiple processes, even\nacross different machines. The partition size and count can be\nconfigured, although the values given may not necessarily be honored\ndepending on the query and options in the request.</p>\n\n<p>The query must have a single <a href=\"https://cloud.google.com/spanner/docs/query-execution-operators#distributed_union\">distributed\nunion</a>\noperator at the root of the query plan. Such queries are\nroot-partitionable. If a query cannot be partitioned at the root,\nCloud Spanner cannot achieve the parallelism and in this case\npartition generation will fail.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/batch_snapshot.rb#L190","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\nbatch_client = spanner.batch_client \"my-instance\", \"my-database\"\nbatch_snapshot = batch_client.batch_snapshot\n\nsql = \"SELECT u.id, u.active FROM users AS u \\\n       WHERE u.id < 2000 AND u.active = false\"\npartitions = batch_snapshot.partition_query sql\n\npartition = partitions.first\nresults = batch_snapshot.execute_partition partition\n\nbatch_snapshot.close"}],"params":[{"name":"sql","types":["String"],"description":"The SQL query string. See <a href=\"https://cloud.google.com/spanner/docs/query-syntax\">Query\nsyntax</a>.</p>\n\n<p>The SQL query string can contain parameter placeholders. A parameter\nplaceholder consists of “@” followed by the parameter name.\nParameter names consist of any combination of letters, numbers, and\nunderscores.","optional":false,"nullable":false},{"name":"params","types":["Hash"],"description":"SQL parameters for the query string. The\nparameter placeholders, minus the “@”, are the the hash keys, and\nthe literal values are the hash values. If the query string contains\nsomething like “WHERE id &gt; @msg_id”, then the params must contain\nsomething like <code>:msg_id =&gt; 1</code>.</p>\n\n<p>Ruby types are mapped to Spanner types as follows:</p>\n\n<table class=\"table\">\n  <thead>\n    <tr>\n      <th>Spanner</th>\n      <th>Ruby</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>BOOL</code></td>\n      <td><code>true</code>/<code>false</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>INT64</code></td>\n      <td><code>Integer</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>FLOAT64</code></td>\n      <td><code>Float</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>STRING</code></td>\n      <td><code>String</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>DATE</code></td>\n      <td><code>Date</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>TIMESTAMP</code></td>\n      <td><code>Time</code>, <code>DateTime</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>BYTES</code></td>\n      <td><code>File</code>, <code>IO</code>, <code>StringIO</code>, or similar</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>ARRAY</code></td>\n      <td><code>Array</code></td>\n      <td>Nested arrays are not supported.</td>\n    </tr>\n    <tr>\n      <td><code>STRUCT</code></td>\n      <td><code>Hash</code>, <a data-custom-type=\"google/cloud/spanner/data\">Data</a></td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See <a href=\"https://cloud.google.com/spanner/docs/data-definition-language#data_types\">Data\ntypes</a>.</p>\n\n<p>See <a href=\"https://cloud.google.com/spanner/docs/data-types#constructing-a-struct\">Data Types - Constructing a\nSTRUCT</a>.","optional":true,"default":"nil","nullable":true},{"name":"types","types":["Hash"],"description":"Types of the SQL parameters in <code>params</code>. It is not\nalways possible for Cloud Spanner to infer the right SQL type from a\nvalue in <code>params</code>. In these cases, the <code>types</code> hash must be used to\nspecify the SQL type for these values.</p>\n\n<p>The keys of the hash should be query string parameter placeholders,\nminus the “@”. The values of the hash should be Cloud Spanner type\ncodes from the following list:</p>\n\n<ul>\n  <li><code>:BOOL</code></li>\n  <li><code>:BYTES</code></li>\n  <li><code>:DATE</code></li>\n  <li><code>:FLOAT64</code></li>\n  <li><code>:INT64</code></li>\n  <li><code>:STRING</code></li>\n  <li><code>:TIMESTAMP</code></li>\n  <li><code>Array</code> - Lists are specified by providing the type code in an\narray. For example, an array of integers are specified as\n<code>[:INT64]</code>.</li>\n  <li><a data-custom-type=\"google/cloud/spanner/fields\">Fields</a> - Types for STRUCT values (<code>Hash</code>/<a data-custom-type=\"google/cloud/spanner/data\">Data</a> objects) are\nspecified using a <a data-custom-type=\"google/cloud/spanner/fields\">Fields</a> object.</li>\n</ul>\n\n<p>Types are optional.","optional":true,"default":"nil","nullable":true},{"name":"partition_size_bytes","types":["Integer"],"description":"The desired data size for each\npartition generated. This is only a hint. The actual size of each\npartition may be smaller or larger than this size request.","optional":true,"default":"nil","nullable":true},{"name":"max_partitions","types":["Integer"],"description":"The desired maximum number of\npartitions to return. For example, this may be set to the number of\nworkers available. This is only a hint and may provide different\nresults based on the request.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["Array&lt;<a data-custom-type=\"google/cloud/spanner/partition\">Google::Cloud::Spanner::Partition</a>&gt;"],"description":"The partitions\ncreated by the query partition."}]},{"id":"partition_read-instance","type":"instance","name":"partition_read","title":["Google","Cloud","Spanner","BatchSnapshot#partition_read"],"description":"<p>Returns a list of <a data-custom-type=\"google/cloud/spanner/partition\">Partition</a> objects to read zero or more rows from a\ndatabase.</p>\n\n<p>These partitions can be executed across multiple processes, even\nacross different machines. The partition size and count can be\nconfigured, although the values given may not necessarily be honored\ndepending on the query and options in the request.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/batch_snapshot.rb#L262","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\nbatch_client = spanner.batch_client \"my-instance\", \"my-database\"\nbatch_snapshot = batch_client.batch_snapshot\n\npartitions = batch_snapshot.partition_read \"users\", [:id, :name]\n\npartition = partitions.first\nresults = batch_snapshot.execute_partition partition\n\nbatch_snapshot.close"}],"params":[{"name":"table","types":["String"],"description":"The name of the table in the database to be\nread.","optional":false,"nullable":false},{"name":"columns","types":["Array<String, Symbol>"],"description":"The columns of table to be\nreturned for each row matching this request.","optional":false,"nullable":false},{"name":"keys","types":["Object","Array<Object>"],"description":"A single, or list of keys or key\nranges to match returned data to. Values should have exactly as many\nelements as there are columns in the primary key.","optional":true,"default":"nil","nullable":true},{"name":"index","types":["String"],"description":"The name of an index to use instead of the\ntable’s primary key when interpreting <code>id</code> and sorting result rows.\nOptional.","optional":true,"default":"nil","nullable":true},{"name":"partition_size_bytes","types":["Integer"],"description":"The desired data size for each\npartition generated. This is only a hint. The actual size of each\npartition may be smaller or larger than this size request.","optional":true,"default":"nil","nullable":true},{"name":"max_partitions","types":["Integer"],"description":"The desired maximum number of\npartitions to return. For example, this may be set to the number of\nworkers available. This is only a hint and may provide different\nresults based on the request.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["Array&lt;<a data-custom-type=\"google/cloud/spanner/partition\">Google::Cloud::Spanner::Partition</a>&gt;"],"description":"The partitions\ncreated by the read partition."}]},{"id":"execute_partition-instance","type":"instance","name":"execute_partition","title":["Google","Cloud","Spanner","BatchSnapshot#execute_partition"],"description":"<p>Execute the partition to return a <a data-custom-type=\"google/cloud/spanner/results\">Results</a>. The result returned\ncould be zero or more rows. The row metadata may be absent if no rows\nare returned.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/batch_snapshot.rb#L315","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\nbatch_client = spanner.batch_client \"my-instance\", \"my-database\"\nbatch_snapshot = batch_client.batch_snapshot\n\npartitions = batch_snapshot.partition_read \"users\", [:id, :name]\n\npartition = partitions.first\nresults = batch_snapshot.execute_partition partition\n\nbatch_snapshot.close"}],"params":[{"name":"partition","types":["Google::Cloud::Spanner::Partition"],"description":"The partition to\nbe executed.","optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"close-instance","type":"instance","name":"close","title":["Google","Cloud","Spanner","BatchSnapshot#close"],"description":"<p>Closes the batch snapshot and releases the underlying resources.</p>\n\n<p>This should only be called once the batch snapshot is no longer needed\nanywhere. In particular if this batch snapshot is being used across\nmultiple machines, calling this method on any of the machines will\nrender the batch snapshot invalid everywhere.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/batch_snapshot.rb#L354","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\nbatch_client = spanner.batch_client \"my-instance\", \"my-database\"\nbatch_snapshot = batch_client.batch_snapshot\n\npartitions = batch_snapshot.partition_read \"users\", [:id, :name]\n\npartition = partitions.first\nresults = batch_snapshot.execute_partition partition\n\nbatch_snapshot.close"}],"params":[],"exceptions":[],"returns":[]},{"id":"execute-instance","type":"instance","name":"execute","title":["Google","Cloud","Spanner","BatchSnapshot#execute"],"description":"<p>Executes a SQL query.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/batch_snapshot.rb#L513","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\nbatch_client = spanner.batch_client \"my-instance\", \"my-database\"\nbatch_snapshot = batch_client.batch_snapshot\n\nresults = batch_snapshot.execute \"SELECT * FROM users\"\n\nresults.rows.each do |row|\n  puts \"User #{row[:id]} is #{row[:name]}\"\nend"},{"caption":"<p>Query using query parameters:</p>","code":"require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\nbatch_client = spanner.batch_client \"my-instance\", \"my-database\"\nbatch_snapshot = batch_client.batch_snapshot\n\nresults = batch_snapshot.execute \"SELECT * FROM users \" \\\n                                 \"WHERE active = @active\",\n                                 params: { active: true }\n\nresults.rows.each do |row|\n  puts \"User #{row[:id]} is #{row[:name]}\"\nend"},{"caption":"<p>Query with a SQL STRUCT query parameter as a Hash:</p>","code":"require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\nbatch_client = spanner.batch_client \"my-instance\", \"my-database\"\nbatch_snapshot = batch_client.batch_snapshot\n\nuser_hash = { id: 1, name: \"Charlie\", active: false }\n\nresults = batch_snapshot.execute \"SELECT * FROM users WHERE \" \\\n                                 \"ID = @user_struct.id \" \\\n                                 \"AND name = @user_struct.name \" \\\n                                 \"AND active = @user_struct.active\",\n                                 params: { user_struct: user_hash }\n\nresults.rows.each do |row|\n  puts \"User #{row[:id]} is #{row[:name]}\"\nend"},{"caption":"<p>Specify the SQL STRUCT type using Fields object:</p>","code":"require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\nbatch_client = spanner.batch_client \"my-instance\", \"my-database\"\nbatch_snapshot = batch_client.batch_snapshot\n\nuser_type = batch_client.fields(\n  { id: :INT64, name: :STRING, active: :BOOL }\n)\nuser_hash = { id: 1, name: nil, active: false }\n\nresults = batch_snapshot.execute \"SELECT * FROM users WHERE \" \\\n                                 \"ID = @user_struct.id \" \\\n                                 \"AND name = @user_struct.name \" \\\n                                 \"AND active = @user_struct.active\",\n                                 params: { user_struct: user_hash },\n                                 types: { user_struct: user_type }\n\nresults.rows.each do |row|\n  puts \"User #{row[:id]} is #{row[:name]}\"\nend"},{"caption":"<p>Or, query with a SQL STRUCT as a typed Data object:</p>","code":"require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\nbatch_client = spanner.batch_client \"my-instance\", \"my-database\"\nbatch_snapshot = batch_client.batch_snapshot\n\nuser_type = batch_client.fields(\n  { id: :INT64, name: :STRING, active: :BOOL }\n)\nuser_data = user_type.struct id: 1, name: nil, active: false\n\nresults = batch_snapshot.execute \"SELECT * FROM users WHERE \" \\\n                                 \"ID = @user_struct.id \" \\\n                                 \"AND name = @user_struct.name \" \\\n                                 \"AND active = @user_struct.active\",\n                                 params: { user_struct: user_data }\n\nresults.rows.each do |row|\n  puts \"User #{row[:id]} is #{row[:name]}\"\nend"}],"params":[{"name":"sql","types":["String"],"description":"The SQL query string. See <a href=\"https://cloud.google.com/spanner/docs/query-syntax\">Query\nsyntax</a>.</p>\n\n<p>The SQL query string can contain parameter placeholders. A parameter\nplaceholder consists of “@” followed by the parameter name.\nParameter names consist of any combination of letters, numbers, and\nunderscores.","optional":false,"nullable":false},{"name":"params","types":["Hash"],"description":"SQL parameters for the query string. The\nparameter placeholders, minus the “@”, are the the hash keys, and\nthe literal values are the hash values. If the query string contains\nsomething like “WHERE id &gt; @msg_id”, then the params must contain\nsomething like <code>:msg_id =&gt; 1</code>.</p>\n\n<p>Ruby types are mapped to Spanner types as follows:</p>\n\n<table class=\"table\">\n  <thead>\n    <tr>\n      <th>Spanner</th>\n      <th>Ruby</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>BOOL</code></td>\n      <td><code>true</code>/<code>false</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>INT64</code></td>\n      <td><code>Integer</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>FLOAT64</code></td>\n      <td><code>Float</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>STRING</code></td>\n      <td><code>String</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>DATE</code></td>\n      <td><code>Date</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>TIMESTAMP</code></td>\n      <td><code>Time</code>, <code>DateTime</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>BYTES</code></td>\n      <td><code>File</code>, <code>IO</code>, <code>StringIO</code>, or similar</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>ARRAY</code></td>\n      <td><code>Array</code></td>\n      <td>Nested arrays are not supported.</td>\n    </tr>\n    <tr>\n      <td><code>STRUCT</code></td>\n      <td><code>Hash</code>, <a data-custom-type=\"google/cloud/spanner/data\">Data</a></td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See <a href=\"https://cloud.google.com/spanner/docs/data-definition-language#data_types\">Data\ntypes</a>.</p>\n\n<p>See <a href=\"https://cloud.google.com/spanner/docs/data-types#constructing-a-struct\">Data Types - Constructing a\nSTRUCT</a>.","optional":true,"default":"nil","nullable":true},{"name":"types","types":["Hash"],"description":"Types of the SQL parameters in <code>params</code>. It is not\nalways possible for Cloud Spanner to infer the right SQL type from a\nvalue in <code>params</code>. In these cases, the <code>types</code> hash must be used to\nspecify the SQL type for these values.</p>\n\n<p>The keys of the hash should be query string parameter placeholders,\nminus the “@”. The values of the hash should be Cloud Spanner type\ncodes from the following list:</p>\n\n<ul>\n  <li><code>:BOOL</code></li>\n  <li><code>:BYTES</code></li>\n  <li><code>:DATE</code></li>\n  <li><code>:FLOAT64</code></li>\n  <li><code>:INT64</code></li>\n  <li><code>:STRING</code></li>\n  <li><code>:TIMESTAMP</code></li>\n  <li><code>Array</code> - Lists are specified by providing the type code in an\narray. For example, an array of integers are specified as\n<code>[:INT64]</code>.</li>\n  <li><a data-custom-type=\"google/cloud/spanner/fields\">Fields</a> - Types for STRUCT values (<code>Hash</code>/<a data-custom-type=\"google/cloud/spanner/data\">Data</a> objects) are\nspecified using a <a data-custom-type=\"google/cloud/spanner/fields\">Fields</a> object.</li>\n</ul>\n\n<p>Types are optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/spanner/results\">Google::Cloud::Spanner::Results</a>"],"description":"The results of the query\nexecution."}]},{"id":"read-instance","type":"instance","name":"read","title":["Google","Cloud","Spanner","BatchSnapshot#read"],"description":"<p>Read rows from a database table, as a simple alternative to\n<a data-custom-type=\"google/cloud/spanner/batchsnapshot\" data-method=\"execute-instance\">#execute</a>.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/batch_snapshot.rb#L556","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\nbatch_client = spanner.batch_client \"my-instance\", \"my-database\"\nbatch_snapshot = batch_client.batch_snapshot\n\nresults = batch_snapshot.read \"users\", [:id, :name]\n\nresults.rows.each do |row|\n  puts \"User #{row[:id]} is #{row[:name]}\"\nend"}],"params":[{"name":"table","types":["String"],"description":"The name of the table in the database to be\nread.","optional":false,"nullable":false},{"name":"columns","types":["Array<String, Symbol>"],"description":"The columns of table to be\nreturned for each row matching this request.","optional":false,"nullable":false},{"name":"keys","types":["Object","Array<Object>"],"description":"A single, or list of keys or key\nranges to match returned data to. Values should have exactly as many\nelements as there are columns in the primary key.","optional":true,"default":"nil","nullable":true},{"name":"index","types":["String"],"description":"The name of an index to use instead of the\ntable’s primary key when interpreting <code>id</code> and sorting result rows.\nOptional.","optional":true,"default":"nil","nullable":true},{"name":"limit","types":["Integer"],"description":"If greater than zero, no more than this number\nof rows will be returned. The default is no limit.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/spanner/results\">Google::Cloud::Spanner::Results</a>"],"description":"The results of the read\noperation."}]},{"id":"dump-instance","type":"instance","name":"dump","title":["Google","Cloud","Spanner","BatchSnapshot#dump"],"description":"<p>Serializes the batch snapshot object so it can be recreated on another\nprocess. See <a data-custom-type=\"google/cloud/spanner/batchclient\" data-method=\"load_batch_snapshot-instance\">BatchClient#load_batch_snapshot</a>.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/batch_snapshot.rb#L613","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\nbatch_client = spanner.batch_client \"my-instance\", \"my-database\"\n\nbatch_snapshot = batch_client.batch_snapshot\n\npartitions = batch_snapshot.partition_read \"users\", [:id, :name]\n\npartition = partitions.first\n\nserialized_snapshot = batch_snapshot.dump\nserialized_partition = partition.dump\n\n# In a separate process\nnew_batch_snapshot = batch_client.load_batch_snapshot \\\n  serialized_snapshot\n\nnew_partition = batch_client.load_partition \\\n  serialized_partition\n\nresults = new_batch_snapshot.execute_partition \\\n  new_partition"}],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"The serialized representation of the batch snapshot."}]}]}