{"id":"google/cloud/logging","name":"Logging","title":["Google","Cloud","Logging"],"description":"<h1 id=\"stackdriver-logging\">Stackdriver Logging</h1>\n\n<p>The Stackdriver Logging service collects and stores logs from applications\nand services on the Google Cloud Platform, giving you fine-grained,\nprogrammatic control over your projects’ logs. You can use the Stackdriver\nLogging API to:</p>\n\n<ul>\n  <li><a data-anchor=\"listing-log-entries\" href=\"#listing-log-entries\">Read and filter log entries</a></li>\n  <li><a data-anchor=\"exporting-log-entries\" href=\"#exporting-log-entries\">Export your log entries</a> to Cloud Storage,\nBigQuery, or Cloud Pub/Sub</li>\n  <li><a data-anchor=\"creating-logs-based-metrics\" href=\"#creating-logs-based-metrics\">Create logs-based metrics</a> for use in\nCloud Monitoring</li>\n  <li><a data-anchor=\"writing-log-entries\" href=\"#writing-log-entries\">Write log entries</a></li>\n</ul>\n\n<p>For general information about Stackdriver Logging, read <a href=\"https://cloud.google.com/logging/docs/\">Stackdriver\nLogging Documentation</a>.</p>\n\n<p>The goal of google-cloud is to provide an API that is comfortable to\nRubyists. Your authentication credentials are detected automatically in\nGoogle Cloud Platform environments such as Google Compute Engine, Google\nApp Engine and Google Kubernetes Engine. In other environments you can\nconfigure authentication easily, either directly in your code or via\nenvironment variables. Read more about the options for connecting in the\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>\n\n<p>If you just want to write your application’s logs to the Stackdriver\nLogging service, you may find it easiest to use the <a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/instrumentation\">Stackdriver Logging\nInstrumentation</a>\nor the <a data-anchor=\"creating-a-ruby-logger-implementation\" href=\"#creating-a-ruby-logger-implementation\">Ruby Logger\nimplementation</a> provided by this\nlibrary. Otherwise, read on to learn more about the Logging API.</p>\n\n<h2 id=\"enabling-logging\">Enabling Logging</h2>\n\n<p>To enable logging for this library, set the logger for the underlying\n<a href=\"https://github.com/grpc/grpc/tree/master/src/ruby\">gRPC</a> library. The\nlogger that you set may be a Ruby stdlib\n<a href=\"https://ruby-doc.org/stdlib-2.5.0/libdoc/logger/rdoc/Logger.html\"><code>Logger</code></a>\nas shown below, or a\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/google-cloud-logging/latest/google/cloud/logging/logger\"><code>Google::Cloud::Logging::Logger</code></a>\nthat will write logs to <a href=\"https://cloud.google.com/logging/\">Stackdriver\nLogging</a>. See\n<a href=\"https://github.com/grpc/grpc/blob/master/src/ruby/lib/grpc/logconfig.rb\">grpc/logconfig.rb</a>\nand the gRPC\n<a href=\"https://github.com/grpc/grpc/blob/master/src/ruby/spec/spec_helper.rb\">spec_helper.rb</a>\nfor additional information.</p>\n\n<p>Configuring a Ruby stdlib logger:</p>\n\n<pre><code class=\"language-ruby\">require \"logger\"\n\nmodule MyLogger\n  LOGGER = Logger.new $stderr, level: Logger::WARN\n  def logger\n    LOGGER\n  end\nend\n\n# Define a gRPC module-level logger method before grpc/logconfig.rb loads.\nmodule GRPC\n  extend MyLogger\nend\n```x\n\n## Listing log entries\n\nStackdriver Logging gathers log entries from many services, including\nGoogle App Engine and Google Compute Engine. (See the [List of Log\nTypes](https://cloud.google.com/logging/docs/view/logs_index).) In\naddition, you can write your own log entries to the service.\n\n{Google::Cloud::Logging::Project#entries} returns the\n{Google::Cloud::Logging::Entry} records belonging to your project:\n\n```ruby\nrequire \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\nentries = logging.entries\nentries.each do |e|\n  puts \"[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}\"\nend\n</code></pre>\n\n<p>You can narrow the results to a single log using an <a href=\"https://cloud.google.com/logging/docs/view/advanced_filters\">advanced logs\nfilter</a>. A\nlog is a named collection of entries. Logs can be produced by Google Cloud\nPlatform services, by third-party services, or by your applications. For\nexample, the log <code>compute.googleapis.com/activity_log</code> is produced by\nGoogle Compute Engine. Logs are simply referenced by name in google-cloud.\nThere is no <code>Log</code> type in google-cloud or <code>Log</code> resource in the\nStackdriver Logging API.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\nentries = logging.entries filter: \"logName:syslog\"\nentries.each do |e|\n  puts \"[#{e.timestamp}] #{e.payload.inspect}\"\nend\n</code></pre>\n\n<p>You can also order the log entries by <code>timestamp</code>.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\nentries = logging.entries order: \"timestamp desc\"\nentries.each do |e|\n  puts \"[#{e.timestamp}] #{e.log_name}\"\nend\n</code></pre>\n\n<h2 id=\"exporting-log-entries\">Exporting log entries</h2>\n\n<p>Stackdriver Logging lets you export log entries to destinations including\nGoogle Cloud Storage buckets (for long term log storage), Google BigQuery\ndatasets (for log analysis), and Google Pub/Sub (for streaming to other\napplications).</p>\n\n<h3 id=\"creating-sinks\">Creating sinks</h3>\n\n<p>A <a data-custom-type=\"google/cloud/logging/sink\">Google::Cloud::Logging::Sink</a> is an object that lets you to specify a\nset of log entries to export.</p>\n\n<p>In addition to the name of the sink and the export destination,\nGoogle::Cloud::Logging::Project#create_sink accepts an <a href=\"https://cloud.google.com/logging/docs/view/advanced_filters\">advanced logs\nfilter</a> to\nnarrow the collection.</p>\n\n<p>Before creating the sink, ensure that you have granted\n<code>cloud-logs@google.com</code> permission to write logs to the destination. See\n<a href=\"https://cloud.google.com/logging/docs/export/configure_export_v2\">Exporting Logs\n(V2)</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/storage\"\nrequire \"google/cloud/logging\"\n\nstorage = Google::Cloud::Storage.new\n\nbucket = storage.create_bucket \"my-logs-bucket\"\n\n# Grant owner permission to Stackdriver Logging service\nemail = \"cloud-logs@google.com\"\nbucket.acl.add_owner \"group-#{email}\"\n\nlogging = Google::Cloud::Logging.new\n\nsink = logging.create_sink \"my-sink\",\n                           \"storage.googleapis.com/#{bucket.id}\"\n</code></pre>\n\n<p>When you create a sink, only new log entries are exported. Stackdriver\nLogging does not send previously-ingested log entries to the sink’s\ndestination.</p>\n\n<h3 id=\"listing-sinks\">Listing sinks</h3>\n\n<p>You can also list the sinks belonging to your project with\nGoogle::Cloud::Logging::Project#sinks.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\nsinks = logging.sinks\nsinks.each do |s|\n  puts \"#{s.name}: #{s.filter} -&gt; #{s.destination}\"\nend\n</code></pre>\n\n<h2 id=\"creating-logs-based-metrics\">Creating logs-based metrics</h2>\n\n<p>You can use log entries in your project as the basis for <a href=\"https://cloud.google.com/monitoring/docs\">Google Cloud\nMonitoring</a> metrics. These\nmetrics can then be used to produce Cloud Monitoring reports and alerts.</p>\n\n<h3 id=\"creating-metrics\">Creating metrics</h3>\n\n<p>A metric is a measured value that can be used to assess a system. Use\nGoogle::Cloud::Logging::Project#create_metric to configure a\n<a data-custom-type=\"google/cloud/logging/metric\">Google::Cloud::Logging::Metric</a> based on a collection of log entries\nmatching an <a href=\"https://cloud.google.com/logging/docs/view/advanced_filters\">advanced logs\nfilter</a>.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\nmetric = logging.create_metric \"errors\", \"severity&gt;=ERROR\"\n</code></pre>\n\n<h3 id=\"listing-metrics\">Listing metrics</h3>\n\n<p>You can also list the metrics belonging to your project with\nGoogle::Cloud::Logging::Project#metrics.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\nmetrics = logging.metrics\nmetrics.each do |m|\n  puts \"#{m.name}: #{m.filter}\"\nend\n</code></pre>\n\n<h2 id=\"writing-log-entries\">Writing log entries</h2>\n\n<p>An <a data-custom-type=\"google/cloud/logging/entry\">Google::Cloud::Logging::Entry</a> is composed of metadata and a payload.\nThe payload is traditionally a message string, but in Stackdriver Logging\nit can also be a JSON or protocol buffer object. A single log can have\nentries with different payload types. In addition to the payload, your\nargument(s) to Google::Cloud::Logging::Project#write_entries must also\ncontain a log name and a resource.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\n\nentry = logging.entry\nentry.payload = \"Job started.\"\nentry.log_name = \"my_app_log\"\nentry.resource.type = \"gae_app\"\nentry.resource.labels[:module_id] = \"1\"\nentry.resource.labels[:version_id] = \"20150925t173233\"\n\nlogging.write_entries entry\n</code></pre>\n\n<p>To write a JSON payload to the log, simply pass a hash argument:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\n\nentry = logging.entry\nentry.payload = { \"stats\" =&gt; { \"a\" =&gt; 8, \"b\" =&gt; 12.5} }\nentry.log_name = \"my_app_log\"\nentry.resource.type = \"gae_app\"\nentry.resource.labels[:module_id] = \"1\"\nentry.resource.labels[:version_id] = \"20150925t173233\"\n\nlogging.write_entries entry\n</code></pre>\n\n<p>If you write a collection of log entries, you can provide the log name,\nresource, and/or labels hash to be used for all of the entries, and omit\nthese values from the individual entries.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\n\nentry1 = logging.entry\nentry1.payload = \"Job started.\"\nentry2 = logging.entry\nentry2.payload = \"Job completed.\"\nlabels = { job_size: \"large\", job_code: \"red\" }\n\nresource = logging.resource \"gae_app\",\n                            \"module_id\" =&gt; \"1\",\n                            \"version_id\" =&gt; \"20150925t173233\"\n\nlogging.write_entries [entry1, entry2],\n                      log_name: \"my_app_log\",\n                      resource: resource,\n                      labels: labels\n</code></pre>\n\n<p>Normally, writing log entries is done synchronously; the call to\nGoogle::Cloud::Logging::Project#write_entries will block until it has\neither completed transmitting the data or encountered an error. To “fire\nand forget” without blocking, use <a data-custom-type=\"google/cloud/logging/asyncwriter\">Google::Cloud::Logging::AsyncWriter</a>;\nit spins up a background thread that writes log entries in batches. Calls\nto Google::Cloud::Logging::AsyncWriter#write_entries simply add entries\nto its work queue and return immediately.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\nasync = logging.async_writer\n\nentry1 = logging.entry\nentry1.payload = \"Job started.\"\nentry2 = logging.entry\nentry2.payload = \"Job completed.\"\nlabels = { job_size: \"large\", job_code: \"red\" }\n\nresource = logging.resource \"gae_app\",\n                            \"module_id\" =&gt; \"1\",\n                            \"version_id\" =&gt; \"20150925t173233\"\n\nasync.write_entries [entry1, entry2],\n                    log_name: \"my_app_log\",\n                    resource: resource,\n                    labels: labels,\n                    partial_success: true\n</code></pre>\n\n<h3 id=\"creating-a-ruby-logger-implementation\">Creating a Ruby Logger implementation</h3>\n\n<p>If your environment requires a logger instance that is API-compatible with\nRuby’s standard library\n<a href=\"http://ruby-doc.org/stdlib/libdoc/logger/rdoc\">Logger</a>, you can use\nGoogle::Cloud::Logging::Project#logger to create one.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\n\nresource = logging.resource \"gae_app\",\n                            module_id: \"1\",\n                            version_id: \"20150925t173233\"\n\nlogger = logging.logger \"my_app_log\", resource, env: :production\nlogger.info \"Job started.\"\n</code></pre>\n\n<p>By default, the logger instance writes log entries asynchronously in a\nbackground thread using an <a data-custom-type=\"google/cloud/logging/asyncwriter\">Google::Cloud::Logging::AsyncWriter</a>. If you\nwant to customize or disable asynchronous writing, you may call the\nLogger constructor directly.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\n\nresource = logging.resource \"gae_app\",\n                            module_id: \"1\",\n                            version_id: \"20150925t173233\"\n\nlogger = Google::Cloud::Logging::Logger.new logging,\n                                            \"my_app_log\",\n                                            resource,\n                                            {env: :production}\nlogger.info \"Log entry written synchronously.\"\n</code></pre>\n\n<h2 id=\"configuring-timeout\">Configuring timeout</h2>\n\n<p>You can configure the request <code>timeout</code> value in seconds.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new timeout: 120\n</code></pre>","source":"google-cloud-logging/lib/google/cloud/logging.rb#L385","resources":[],"examples":[],"methods":[{"id":"new-class","type":"class","name":"new","title":["Google","Cloud","Logging.new"],"description":"<p>Creates a new object for connecting to the Stackdriver Logging service.\nEach call creates a new connection.</p>\n\n<p>For more information on connecting to Google Cloud see the\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>","source":"google-cloud-logging/lib/google/cloud/logging.rb#L428","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/logging\"\n\nlogging = Google::Cloud::Logging.new\n\nentries = logging.entries\nentries.each do |e|\n  puts \"[#{e.timestamp}] #{e.log_name} #{e.payload.inspect}\"\nend"}],"params":[{"name":"project_id","types":["String"],"description":"Project identifier for the Stackdriver\nLogging service you are connecting to. If not present, the default\nproject for the credentials is used.","optional":true,"default":"nil","nullable":true},{"name":"credentials","types":["String","Hash","Google::Auth::Credentials"],"description":"The path to\nthe keyfile as a String, the contents of the keyfile as a Hash, or a\nGoogle::Auth::Credentials object. (See <a data-custom-type=\"google/cloud/logging/credentials\">Logging::Credentials</a>)","optional":true,"default":"nil","nullable":true},{"name":"scope","types":["String","Array<String>"],"description":"The OAuth 2.0 scopes controlling\nthe set of resources and operations that the connection can access.\nSee <a href=\"https://developers.google.com/identity/protocols/OAuth2\">Using OAuth 2.0 to Access Google\nAPIs</a>.</p>\n\n<p>The default scope is:</p>\n\n<ul>\n  <li><code>https://www.googleapis.com/auth/logging.admin</code></li>\n</ul>","optional":true,"default":"nil","nullable":true},{"name":"timeout","types":["Integer"],"description":"Default timeout to use in requests. Optional.","optional":true,"default":"nil","nullable":true},{"name":"client_config","types":["Hash"],"description":"A hash of values to override the default\nbehavior of the API client. Optional.","optional":true,"default":"nil","nullable":true},{"name":"project","types":["String"],"description":"Alias for the <code>project_id</code> argument. Deprecated.","optional":true,"default":"nil","nullable":true},{"name":"keyfile","types":["String"],"description":"Alias for the <code>credentials</code> argument.\nDeprecated.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"ArgumentError","description":""}],"returns":[{"types":["<a data-custom-type=\"google/cloud/logging/project\">Google::Cloud::Logging::Project</a>"],"description":""}]},{"id":"configure-class","type":"class","name":"configure","title":["Google","Cloud","Logging.configure"],"description":"<p>Configure the Google::Cloud::Logging::Middleware when used in a\nRack-based application.</p>\n\n<p>The following Stackdriver Logging configuration parameters are\nsupported:</p>\n\n<ul>\n  <li><code>project_id</code> - (String) Project identifier for the Stackdriver\nLogging service you are connecting to. (The parameter <code>project</code> is\nconsidered deprecated, but may also be used.)</li>\n  <li><code>credentials</code> - (String, Hash, Google::Auth::Credentials) The path to\nthe keyfile as a String, the contents of the keyfile as a Hash, or a\nGoogle::Auth::Credentials object. (See <a data-custom-type=\"google/cloud/logging/credentials\">Logging::Credentials</a>) (The\nparameter <code>keyfile</code> is considered deprecated, but may also be used.)</li>\n  <li><code>scope</code> - (String, Array<String>) The OAuth 2.0 scopes controlling\nthe set of resources and operations that the connection can access.</String></li>\n  <li><code>timeout</code> - (Integer) Default timeout to use in requests.</li>\n  <li><code>client_config</code> - (Hash) A hash of values to override the default\nbehavior of the API client.</li>\n  <li><code>log_name</code> - (String) Name of the application log file. Default:\n<code>\"ruby_app_log\"</code></li>\n  <li><code>log_name_map</code> - (Hash) Map specific request routes to other log.\nDefault: <code>{ \"/_ah/health\" =&gt; \"ruby_health_check_log\" }</code></li>\n  <li><code>monitored_resource.type</code> (String) Resource type name. See <a href=\"https://cloud.google.com/logging/docs/api/v2/resource-list\">full\nlist</a>.\nSelf discovered on GCP.</li>\n  <li><code>monitored_resource.labels</code> -(Hash) Resource labels. See <a href=\"https://cloud.google.com/logging/docs/api/v2/resource-list\">full\nlist</a>.\nSelf discovered on GCP.</li>\n  <li><code>labels</code> - (Hash) User defined labels. A <code>Hash</code> of label names to\nstring label values or callables/<code>Proc</code> which are functions of the\nRack environment.</li>\n</ul>\n\n<p>See the <a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/stackdriver/guides/instrumentation_configuration\">Configuration\nGuide</a>\nfor full configuration parameters.</p>","source":"google-cloud-logging/lib/google/cloud/logging.rb#L491","resources":[],"examples":[],"params":[{"name":"yield","types":["block"],"description":"","optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Google::Cloud::Config"],"description":"The configuration object\nthe Google::Cloud::Logging module uses."}]}]}