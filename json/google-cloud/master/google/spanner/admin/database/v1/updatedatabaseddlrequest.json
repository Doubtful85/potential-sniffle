{"id":"google/spanner/admin/database/v1/updatedatabaseddlrequest","name":"UpdateDatabaseDdlRequest","title":["Google","Spanner","Admin","Database","V1","UpdateDatabaseDdlRequest"],"description":"<p>Enqueues the given DDL statements to be applied, in order but not\nnecessarily all at once, to the database schema at some point (or\npoints) in the future. The server checks that the statements\nare executable (syntactically valid, name tables that exist, etc.)\nbefore enqueueing them, but they may still fail upon\nlater execution (e.g., if a statement from another batch of\nstatements is applied first and it conflicts in some way, or if\nthere is some data-related problem like a +NULL+ value in a column to\nwhich +NOT NULL+ would be added). If a statement fails, all\nsubsequent statements in the batch are automatically cancelled.</p>\n\n<p>Each batch of statements is assigned a name which can be used with\nthe Google::Longrunning::Operations API to monitor\nprogress. See the\nGoogle::Spanner::Admin::Database::V1::UpdateDatabaseDdlRequest#operation_id field for more\ndetails.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/doc/google/spanner/admin/database/v1/spanner_database_admin.rb#L150","resources":[],"examples":[],"methods":[{"id":"database-instance","type":"instance","name":"database","title":["Google","Spanner","Admin","Database","V1","UpdateDatabaseDdlRequest#database"],"description":"","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/doc/google/spanner/admin/database/v1/spanner_database_admin.rb#L150","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Required. The database to update."}]},{"id":"database=-instance","type":"instance","name":"database=","title":["Google","Spanner","Admin","Database","V1","UpdateDatabaseDdlRequest#database="],"description":"","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/doc/google/spanner/admin/database/v1/spanner_database_admin.rb#L150","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"Required. The database to update."}]},{"id":"statements-instance","type":"instance","name":"statements","title":["Google","Spanner","Admin","Database","V1","UpdateDatabaseDdlRequest#statements"],"description":"","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/doc/google/spanner/admin/database/v1/spanner_database_admin.rb#L150","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Array&lt;String&gt;"],"description":"DDL statements to be applied to the database."}]},{"id":"statements=-instance","type":"instance","name":"statements=","title":["Google","Spanner","Admin","Database","V1","UpdateDatabaseDdlRequest#statements="],"description":"","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/doc/google/spanner/admin/database/v1/spanner_database_admin.rb#L150","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["Array&lt;String&gt;"],"description":"DDL statements to be applied to the database."}]},{"id":"operation_id-instance","type":"instance","name":"operation_id","title":["Google","Spanner","Admin","Database","V1","UpdateDatabaseDdlRequest#operation_id"],"description":"","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/doc/google/spanner/admin/database/v1/spanner_database_admin.rb#L150","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"If empty, the new update request is assigned an\nautomatically-generated operation ID. Otherwise, +operation_id+\nis used to construct the name of the resulting\n<a data-custom-type=\"google/longrunning/operation\">Operation</a>.</p>\n\n<p>Specifying an explicit operation ID simplifies determining\nwhether the statements were executed in the event that the\nGoogle::Spanner::Admin::Database::V1::DatabaseAdmin::UpdateDatabaseDdl call is replayed,\nor the return value is otherwise lost: the Google::Spanner::Admin::Database::V1::UpdateDatabaseDdlRequest#database and\n+operation_id+ fields can be combined to form the\nGoogle::Longrunning::Operation#name of the resulting\n<a data-custom-type=\"google/longrunning/operation\">longrunning::Operation</a>: +<database>/operations/<operation_id>+.</operation_id></database></p>\n\n<p>+operation_id+ should be unique within the database, and must be\na valid identifier: +[a-z][a-z0-9_]*+. Note that\nautomatically-generated operation IDs always begin with an\nunderscore. If the named operation already exists,\nGoogle::Spanner::Admin::Database::V1::DatabaseAdmin::UpdateDatabaseDdl returns\n+ALREADY_EXISTS+."}]},{"id":"operation_id=-instance","type":"instance","name":"operation_id=","title":["Google","Spanner","Admin","Database","V1","UpdateDatabaseDdlRequest#operation_id="],"description":"","source":"google-cloud-spanner/lib/google/cloud/spanner/admin/database/v1/doc/google/spanner/admin/database/v1/spanner_database_admin.rb#L150","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["String"],"description":"If empty, the new update request is assigned an\nautomatically-generated operation ID. Otherwise, +operation_id+\nis used to construct the name of the resulting\n<a data-custom-type=\"google/longrunning/operation\">Operation</a>.</p>\n\n<p>Specifying an explicit operation ID simplifies determining\nwhether the statements were executed in the event that the\nGoogle::Spanner::Admin::Database::V1::DatabaseAdmin::UpdateDatabaseDdl call is replayed,\nor the return value is otherwise lost: the Google::Spanner::Admin::Database::V1::UpdateDatabaseDdlRequest#database and\n+operation_id+ fields can be combined to form the\nGoogle::Longrunning::Operation#name of the resulting\n<a data-custom-type=\"google/longrunning/operation\">longrunning::Operation</a>: +<database>/operations/<operation_id>+.</operation_id></database></p>\n\n<p>+operation_id+ should be unique within the database, and must be\na valid identifier: +[a-z][a-z0-9_]*+. Note that\nautomatically-generated operation IDs always begin with an\nunderscore. If the named operation already exists,\nGoogle::Spanner::Admin::Database::V1::DatabaseAdmin::UpdateDatabaseDdl returns\n+ALREADY_EXISTS+."}]}]}