{"id":"google/cloud/bigtable/rowfilter/simplefilter","name":"SimpleFilter","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter"],"description":"<h1 id=\"simplefilter\">SimpleFilter</h1>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L25","resources":[],"examples":[],"methods":[{"id":"sink-instance","type":"instance","name":"sink","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter#sink"],"description":"<p>Outputs all cells directly to the output of the read rather than to any parent filter.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L37","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"pass-instance","type":"instance","name":"pass","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter#pass"],"description":"<p>Matches all cells, regardless of input. Functionally equivalent to\nleaving <code>filter</code> unset, but included for completeness.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L47","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"block-instance","type":"instance","name":"block","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter#block"],"description":"<p>Does not match any cells, regardless of input. Useful for temporarily\ndisabling just part of a filter.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L57","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"strip_value-instance","type":"instance","name":"strip_value","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter#strip_value"],"description":"<p>Replaces each cellâ€™s value with the empty string.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L66","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"key-instance","type":"instance","name":"key","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter#key"],"description":"<p>Matches only cells from rows whose keys satisfy the given RE2 regex. In\nother words, passes through the entire row when the key matches, and\notherwise produces an empty row.\nNote that, since row keys can contain arbitrary bytes, the <code>\\C</code> escape\nsequence must be used if a true wildcard is desired. The <code>.</code> character\nwill not match the new line character <code>\\n</code>, which may be present in a\nbinary key.</p>\n\n<p>For Regex syntax:</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L85","resources":[{"title":"","link":"https://github.com/google/re2/wiki/Syntax"}],"examples":[],"params":[{"name":"regex","types":["String"],"description":"Regex to match row keys.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"sample-instance","type":"instance","name":"sample","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter#sample"],"description":"<p>Matches all cells from a row with probability p, and matches no cells\nfrom the row with probability 1-p.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L96","resources":[],"examples":[],"params":[{"name":"probability","types":["Float"],"description":"","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"family-instance","type":"instance","name":"family","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter#family"],"description":"<p>Matches only cells from columns whose families satisfy the given RE2\nregex. For technical reasons, the regex must not contain the <code>:</code>\ncharacter, even if it is not being used as a literal.\nNote that, since column families cannot contain the new line character\n<code>\\n</code>, it is sufficient to use <code>.</code> as a full wildcard when matching\ncolumn family names.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L117","resources":[],"examples":[],"params":[{"name":"regex","types":["String"],"description":"Regex to match family name.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"qualifier-instance","type":"instance","name":"qualifier","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter#qualifier"],"description":"<p>Matches only cells from columns whose qualifiers satisfy the given RE2\nregex.\nNote that, since column qualifiers can contain arbitrary bytes, the <code>\\C</code>\nescape sequence must be used if a true wildcard is desired. The <code>.</code>\ncharacter will not match the new line character <code>\\n</code>, which may be\npresent in a binary qualifier.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L132","resources":[],"examples":[],"params":[{"name":"regex","types":["String"],"description":"Regex to match column qualifier name.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"value-instance","type":"instance","name":"value","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter#value"],"description":"<p>Matches only cells with values that satisfy the given regular expression.\nNote that, since cell values can contain arbitrary bytes, the <code>\\C</code> escape\nsequence must be used if a true wildcard is desired. The <code>.</code> character\nwill not match the new line character <code>\\n</code>, which may be present in a\nbinary value.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L146","resources":[],"examples":[],"params":[{"name":"regex","types":["String"],"description":"Regex to match cell value.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"label-instance","type":"instance","name":"label","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter#label"],"description":"<p>Applies the given label to all cells in the output row. This allows\nthe client to determine which results were produced from which part of\nthe filter.</p>\n\n<p>Values must be at most 15 characters in length, and match the RE2\npattern <code>[a-z0-9\\\\-]+</code></p>\n\n<p>Due to a technical limitation, it is not currently possible to apply\nmultiple labels to a cell. As a result, a Chain may have no more than\none sub-filter which contains a <code>apply_label_transformer</code>. It is okay for\nan Interleave to contain multiple <code>apply_label_transformers</code>, as they\nwill be applied to separate copies of the input. This may be relaxed in\nthe future.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L168","resources":[],"examples":[],"params":[{"name":"value","types":["String"],"description":"Label name","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"cells_per_row_offset-instance","type":"instance","name":"cells_per_row_offset","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter#cells_per_row_offset"],"description":"<p>Skips the first N cells of each row, matching all subsequent cells.\nIf duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L180","resources":[],"examples":[],"params":[{"name":"offset","types":["Integer"],"description":"Offset value.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"cells_per_row-instance","type":"instance","name":"cells_per_row","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter#cells_per_row"],"description":"<p>Matches only the first N cells of each row.\nIf duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L192","resources":[],"examples":[],"params":[{"name":"limit","types":["String"],"description":"Max cell match per row limit","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"cells_per_column-instance","type":"instance","name":"cells_per_column","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter#cells_per_column"],"description":"<p>Matches only the most recent N cells within each column. For example,\nif N=2, this filter would match column <code>foo:bar</code> at timestamps 10 and 9,\nskip all earlier cells in <code>foo:bar</code>, and then begin matching again in\ncolumn <code>foo:bar2</code>.\nIf duplicate cells are present, as is possible when using an Interleave,\neach copy of the cell is counted separately.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L207","resources":[],"examples":[],"params":[{"name":"limit","types":["String"],"description":"Max cell match per column limit","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"timestamp_range-instance","type":"instance","name":"timestamp_range","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter#timestamp_range"],"description":"<p>Create timestamp range filter instance</p>\n\n<p>Matches only cells with timestamps within the given range.\nSpecified a contiguous range of timestamps.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L221","resources":[],"examples":[],"params":[{"name":"from","types":["Integer"],"description":"Inclusive lower bound. If left empty, interpreted as 0.","optional":false,"nullable":false},{"name":"to","types":["Integer"],"description":"Exclusive upper bound. If left empty, interpreted as infinity.","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"value_range-instance","type":"instance","name":"value_range","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter#value_range"],"description":"<p>Matches only cells with values that fall within the given range.</p>\n\n<p>See Google::Cloud::Bigtable::ValueRange#from and { Google::Cloud::Bigtable::ValueRange#to} for range\noption inclusive/exclusive options</p>\n\n<ul>\n  <li>The value at which to start the range.If neither field is set, interpreted as the empty string, inclusive.</li>\n  <li>The value at which to end the range. If neither field is set, interpreted as the infinite string, exclusive.</li>\n</ul>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L240","resources":[],"examples":[],"params":[{"name":"range","types":["Google::Cloud::Bigtable::ValueRange"],"description":"","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]},{"id":"column_range-instance","type":"instance","name":"column_range","title":["Google","Cloud","Bigtable","RowFilter","SimpleFilter#column_range"],"description":"<p>Matches only cells from columns within the given range.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/row_filter/simple_filter.rb#L253","resources":[],"examples":[],"params":[{"name":"range","types":["Google::Cloud::Bigtable::ColumnRange"],"description":"","optional":false,"nullable":false}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/rowfilter/simplefilter\">Google::Cloud::Bigtable::RowFilter::SimpleFilter</a>"],"description":""}]}]}