{"id":"google/cloud/speech/stream","name":"Stream","title":["Google","Cloud","Speech","Stream"],"description":"<h1 id=\"stream\">Stream</h1>\n\n<p>A resource that represents the streaming requests and responses.</p>","source":"google-cloud-speech/lib/google/cloud/speech/stream.rb#L52","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/speech\"\n\nspeech = Google::Cloud::Speech.new\n\nstream = speech.stream encoding: :linear16,\n                       language: \"en-US\",\n                       sample_rate: 16000\n\n# Stream 5 seconds of audio from the microphone\n# Actual implementation of microphone input varies by platform\n5.times do\n  stream.send MicrophoneInput.read(32000)\nend\n\nstream.stop\nstream.wait_until_complete!\n\nresults = stream.results\nresult = results.first\nresult.transcript #=> \"how old is the Brooklyn Bridge\"\nresult.confidence #=> 0.9826789498329163"}],"methods":[{"id":"start-instance","type":"instance","name":"start","title":["Google","Cloud","Speech","Stream#start"],"description":"<p>Starts the stream. The stream will be started in the first #send call.</p>","source":"google-cloud-speech/lib/google/cloud/speech/stream.rb#L68","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"started?-instance","type":"instance","name":"started?","title":["Google","Cloud","Speech","Stream#started?"],"description":"<p>Checks if the stream has been started.</p>","source":"google-cloud-speech/lib/google/cloud/speech/stream.rb#L80","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["boolean"],"description":"<code>true</code> when started, <code>false</code> otherwise."}]},{"id":"send-instance","type":"instance","name":"send","title":["Google","Cloud","Speech","Stream#send"],"description":"<p>Sends audio content to the server.</p>","source":"google-cloud-speech/lib/google/cloud/speech/stream.rb#L117","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/speech\"\n\nspeech = Google::Cloud::Speech.new\n\naudio = speech.audio \"path/to/audio.raw\"\n\nstream = speech.stream encoding: :linear16,\n                       language: \"en-US\",\n                       sample_rate: 16000\n\n# Stream 5 seconds of audio from the microphone\n# Actual implementation of microphone input varies by platform\n5.times do\n  stream.send MicrophoneInput.read(32000)\nend\n\nstream.stop\nstream.wait_until_complete!\n\nresults = stream.results\nresult = results.first\nresult.transcript #=> \"how old is the Brooklyn Bridge\"\nresult.confidence #=> 0.9826789498329163"}],"params":[{"name":"bytes","types":["String"],"description":"A string of binary audio data to be recognized.\nThe data should be encoded as <code>ASCII-8BIT</code>.","optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"stop-instance","type":"instance","name":"stop","title":["Google","Cloud","Speech","Stream#stop"],"description":"<p>Stops the stream. Signals to the server that no more data will be\nsent.</p>","source":"google-cloud-speech/lib/google/cloud/speech/stream.rb#L130","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"stopped?-instance","type":"instance","name":"stopped?","title":["Google","Cloud","Speech","Stream#stopped?"],"description":"<p>Checks if the stream has been stopped.</p>","source":"google-cloud-speech/lib/google/cloud/speech/stream.rb#L142","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[{"types":["boolean"],"description":"<code>true</code> when stopped, <code>false</code> otherwise."}]},{"id":"results-instance","type":"instance","name":"results","title":["Google","Cloud","Speech","Stream#results"],"description":"<p>The speech recognition results for the audio.</p>","source":"google-cloud-speech/lib/google/cloud/speech/stream.rb#L176","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/speech\"\n\nspeech = Google::Cloud::Speech.new\n\nstream = speech.stream encoding: :linear16,\n                       language: \"en-US\",\n                       sample_rate: 16000\n\n# Stream 5 seconds of audio from the microphone\n# Actual implementation of microphone input varies by platform\n5.times do\n  stream.send MicrophoneInput.read(32000)\nend\n\nstream.stop\n\nresults = stream.results\nresults.each do |result|\n  puts result.transcript\n  puts result.confidence\nend"}],"params":[],"exceptions":[],"returns":[{"types":["Array&lt;<a data-custom-type=\"google/cloud/speech/result\">Result</a>&gt;"],"description":"The transcribed text of audio recognized."}]},{"id":"complete?-instance","type":"instance","name":"complete?","title":["Google","Cloud","Speech","Stream#complete?"],"description":"<p>Whether all speech recognition results have been returned.</p>","source":"google-cloud-speech/lib/google/cloud/speech/stream.rb#L213","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/speech\"\n\nspeech = Google::Cloud::Speech.new\n\nstream = speech.stream encoding: :linear16,\n                       language: \"en-US\",\n                       sample_rate: 16000\n\n# Stream 5 seconds of audio from the microphone\n# Actual implementation of microphone input varies by platform\n5.times do\n  stream.send MicrophoneInput.read(32000)\nend\n\nstream.stop\n\nstream.wait_until_complete!\nstream.complete? #=> true\n\nresults = stream.results\nresults.each do |result|\n  puts result.transcript\n  puts result.confidence\nend"}],"params":[],"exceptions":[],"returns":[{"types":["Boolean"],"description":"All speech recognition results have been returned."}]},{"id":"wait_until_complete!-instance","type":"instance","name":"wait_until_complete!","title":["Google","Cloud","Speech","Stream#wait_until_complete!"],"description":"<p>Blocks until all speech recognition results have been returned.</p>","source":"google-cloud-speech/lib/google/cloud/speech/stream.rb#L248","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/speech\"\n\nspeech = Google::Cloud::Speech.new\n\nstream = speech.stream encoding: :linear16,\n                       language: \"en-US\",\n                       sample_rate: 16000\n\n# Stream 5 seconds of audio from the microphone\n# Actual implementation of microphone input varies by platform\n5.times do\n  stream.send MicrophoneInput.read(32000)\nend\n\nstream.stop\n\nstream.wait_until_complete!\nstream.complete? #=> true\n\nresults = stream.results\nresults.each do |result|\n  puts result.transcript\n  puts result.confidence\nend"}],"params":[],"exceptions":[],"returns":[]},{"id":"on_interim-instance","type":"instance","name":"on_interim","title":["Google","Cloud","Speech","Stream#on_interim"],"description":"<p>Register to be notified on the reception of an interim result.</p>","source":"google-cloud-speech/lib/google/cloud/speech/stream.rb#L289","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/speech\"\n\nspeech = Google::Cloud::Speech.new\n\nstream = speech.stream encoding: :linear16,\n                       language: \"en-US\",\n                       sample_rate: 16000\n\n# register callback for when an interim result is returned\nstream.on_interim do |final_results, interim_results|\n  interim_result = interim_results.first\n  puts interim_result.transcript # \"how old is the Brooklyn Bridge\"\n  puts interim_result.confidence # 0.9826789498329163\n  puts interim_result.stability # 0.8999\nend\n\n# Stream 5 seconds of audio from the microphone\n# Actual implementation of microphone input varies by platform\n5.times do\n  stream.send MicrophoneInput.read(32000)\nend\n\nstream.stop"}],"params":[{"name":"yield","types":["block"],"description":"The block for accessing final and interim results.","optional":true,"nullable":false},{"name":"yield.final_results","types":["Array<Result>"],"description":"The final results.","optional":false,"nullable":false},{"name":"yield.interim_results","types":["Array<Result>"],"description":"The interim results.","optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"on_result-instance","type":"instance","name":"on_result","title":["Google","Cloud","Speech","Stream#on_result"],"description":"<p>Register to be notified on the reception of a final result.</p>","source":"google-cloud-speech/lib/google/cloud/speech/stream.rb#L333","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/speech\"\n\nspeech = Google::Cloud::Speech.new\n\nstream = speech.stream encoding: :linear16,\n                       language: \"en-US\",\n                       sample_rate: 16000\n\n# Stream 5 seconds of audio from the microphone\n# Actual implementation of microphone input varies by platform\n5.times do\n  stream.send MicrophoneInput.read(32000)\nend\n\nstream.stop\nstream.wait_until_complete!\n\nresults = stream.results\nresult = results.first\nresult.transcript #=> \"how old is the Brooklyn Bridge\"\nresult.confidence #=> 0.9826789498329163"}],"params":[{"name":"yield","types":["block"],"description":"The block for accessing final results.","optional":true,"nullable":false},{"name":"yield.results","types":["Array<Result>"],"description":"The final results.","optional":false,"nullable":false}],"exceptions":[],"returns":[]},{"id":"on_complete-instance","type":"instance","name":"on_complete","title":["Google","Cloud","Speech","Stream#on_complete"],"description":"<p>Register to be notified when the end of the audio stream has been\nreached.</p>","source":"google-cloud-speech/lib/google/cloud/speech/stream.rb#L377","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/speech\"\n\nspeech = Google::Cloud::Speech.new\n\nstream = speech.stream encoding: :linear16,\n                       language: \"en-US\",\n                       sample_rate: 16000\n\n# register callback for when stream has ended.\nstream.on_complete do\n  puts \"Stream has ended.\"\nend\n\n# Stream 5 seconds of audio from the microphone\n# Actual implementation of microphone input varies by platform\n5.times do\n  stream.send MicrophoneInput.read(32000)\nend\n\nstream.stop"}],"params":[{"name":"yield","types":["block"],"description":"The block to be called when the end of the audio\nstream has been reached.","optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"on_utterance-instance","type":"instance","name":"on_utterance","title":["Google","Cloud","Speech","Stream#on_utterance"],"description":"<p>Register to be notified when the server has detected the end of the\nuser’s speech utterance and expects no additional speech. Therefore,\nthe server will not process additional audio. The client should stop\nsending additional audio data. This event only occurs when <code>utterance</code>\nis <code>true</code>.</p>","source":"google-cloud-speech/lib/google/cloud/speech/stream.rb#L426","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/speech\"\n\nspeech = Google::Cloud::Speech.new\n\nstream = speech.stream encoding: :linear16,\n                       language: \"en-US\",\n                       sample_rate: 16000,\n                       utterance: true\n\n# register callback for when utterance has occurred.\nstream.on_utterance do\n  puts \"Utterance has occurred.\"\n  stream.stop\nend\n\n# Stream 5 seconds of audio from the microphone\n# Actual implementation of microphone input varies by platform\n5.times do\n  stream.send MicrophoneInput.read(32000)\nend\n\nstream.stop unless stream.stopped?"}],"params":[{"name":"yield","types":["block"],"description":"The block to be called when the end of the audio\nstream has been reached.","optional":true,"nullable":false}],"exceptions":[],"returns":[]},{"id":"on_error-instance","type":"instance","name":"on_error","title":["Google","Cloud","Speech","Stream#on_error"],"description":"<p>Register to be notified of an error received during the stream.</p>","source":"google-cloud-speech/lib/google/cloud/speech/stream.rb#L470","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/speech\"\n\nspeech = Google::Cloud::Speech.new\n\nstream = speech.stream encoding: :linear16,\n                       language: \"en-US\",\n                       sample_rate: 16000\n\n# register callback for when an error is returned\nstream.on_error do |error|\n  puts \"The following error occurred while streaming: #{error}\"\n  stream.stop\nend\n\n# Stream 5 seconds of audio from the microphone\n# Actual implementation of microphone input varies by platform\n5.times do\n  stream.send MicrophoneInput.read(32000)\nend\n\nstream.stop"}],"params":[{"name":"yield","types":["block"],"description":"The block for accessing final results.","optional":true,"nullable":false},{"name":"yield.error","types":["Exception"],"description":"The error raised.","optional":false,"nullable":false}],"exceptions":[],"returns":[]}]}