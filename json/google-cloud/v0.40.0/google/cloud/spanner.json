{"id":"google/cloud/spanner","name":"Spanner","title":["Google","Cloud","Spanner"],"description":"<h1 id=\"cloud-spanner\">Cloud Spanner</h1>\n\n<p>Cloud Spanner is a fully managed, mission-critical, relational database\nservice that offers transactional consistency at global scale, schemas,\nSQL (ANSI 2011 with extensions), and automatic, synchronous replication\nfor high availability.</p>\n\n<p>For more information about Cloud Spanner, read the <a href=\"https://cloud.google.com/spanner/docs/\">Cloud\nSpanner Documentation</a>.</p>\n\n<p>The goal of google-cloud is to provide an API that is comfortable to\nRubyists. Authentication is handled by Google::Cloud#spanner. You can\nprovide the project and credential information to connect to the Cloud\nSpanner service, or if you are running on Google Compute Engine this\nconfiguration is taken care of for you. You can read more about the\noptions for connecting in the <a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>\n\n<h2 id=\"creating-instances\">Creating instances</h2>\n\n<p>When you first use Cloud Spanner, you must create an instance, which is an\nallocation of resources that are used by Cloud Spanner databases. When you\ncreate an instance, you choose where your data is stored and how many\nnodes are used for your data. (For more information, see <a href=\"https://cloud.google.com/spanner/docs/instance-configuration\">Instance\nConfiguration</a>).</p>\n\n<p>Use <a data-custom-type=\"google/cloud/spanner/project\" data-method=\"create_instance-instance\">Spanner::Project#create_instance</a> to create an instance:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\njob = spanner.create_instance \"my-instance\",\n                              name: \"My Instance\",\n                              config: \"regional-us-central1\",\n                              nodes: 5,\n                              labels: { production: :env }\n\njob.done? #=&gt; false\njob.reload! # API call\njob.done? #=&gt; true\ninstance = job.instance\n</code></pre>\n\n<h2 id=\"creating-databases\">Creating databases</h2>\n\n<p>Now that you have created an instance, you can create a database. Cloud\nSpanner databases hold the tables and indexes that allow you to read and\nwrite data. You may create multiple databases in an instance.</p>\n\n<p>Use <a data-custom-type=\"google/cloud/spanner/project\" data-method=\"create_database-instance\">Spanner::Project#create_database</a> (or\n<a data-custom-type=\"google/cloud/spanner/instance\" data-method=\"create_database-instance\">Spanner::Instance#create_database</a>) to create a database:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\njob = spanner.create_database \"my-instance\", \"my-database\"\n\njob.done? #=&gt; false\njob.reload! # API call\njob.done? #=&gt; true\ndatabase = job.database\n</code></pre>\n\n<h2 id=\"updating-database-schemas\">Updating database schemas</h2>\n\n<p>Cloud Spanner supports schema updates to a database while the database\ncontinues to serve traffic. Schema updates do not require taking the\ndatabase offline and they do not lock entire tables or columns; you can\ncontinue writing data to the database during the schema update.</p>\n\n<p>Use <a data-custom-type=\"google/cloud/spanner/database\" data-method=\"update-instance\">Spanner::Database#update</a> to execute one or more statements in Cloud\nSpanner’s Data Definition Language (DDL):</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\ndatabase = spanner.database \"my-instance\", \"my-database\"\n\nadd_users_table_sql = %q(\n  CREATE TABLE users (\n    id INT64 NOT NULL,\n    username STRING(25) NOT NULL,\n    name STRING(45) NOT NULL,\n    email STRING(128),\n  ) PRIMARY KEY(id)\n)\n\ndatabase.update statements: [add_users_table_sql]\n</code></pre>\n\n<h2 id=\"creating-clients\">Creating clients</h2>\n\n<p>In order to read and/or write data, you must create a database client.\nYou can think of a client as a database connection: All of your\ninteractions with Cloud Spanner data must go through a client. Typically\nyou create a client when your application starts up, then you re-use that\nclient to read, write, and execute transactions.</p>\n\n<p>Use <a data-custom-type=\"google/cloud/spanner/project\" data-method=\"client-instance\">Spanner::Project#client</a> to create a client:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\ndb = spanner.client \"my-instance\", \"my-database\"\n\nresults = db.execute \"SELECT 1\"\n\nresults.rows.each do |row|\n  puts row\nend\n</code></pre>\n\n<h2 id=\"writing-data\">Writing data</h2>\n\n<p>You write data using your client object. The client object supports\nvarious mutation operations, as well as combinations of inserts, updates,\ndeletes, etc., that can be applied atomically to different rows and/or\ntables in a database.</p>\n\n<p>Use <a data-custom-type=\"google/cloud/spanner/client\" data-method=\"commit-instance\">Spanner::Client#commit</a> to execute various mutations atomically at a\nsingle logical point in time. All changes are accumulated in memory until\nthe block completes. Unlike <a data-custom-type=\"google/cloud/spanner/client\" data-method=\"transaction-instance\">Spanner::Client#transaction</a>, which can also\nperform reads, this operation accepts only mutations and makes a single\nAPI request.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\ndb = spanner.client \"my-instance\", \"my-database\"\n\ndb.commit do |c|\n  c.update \"users\", [{ id: 1, username: \"charlie94\", name: \"Charlie\" }]\n  c.insert \"users\", [{ id: 2, username: \"harvey00\", name: \"Harvey\" }]\nend\n</code></pre>\n\n<h2 id=\"querying-data-using-sql\">Querying data using SQL</h2>\n\n<p>Cloud Spanner supports a native SQL interface for reading data that is\navailable through <a data-custom-type=\"google/cloud/spanner/client\" data-method=\"execute-instance\">Spanner::Client#execute</a>:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\ndb = spanner.client \"my-instance\", \"my-database\"\n\nresults = db.execute \"SELECT * FROM users\"\n\nresults.rows.each do |row|\n  puts \"User #{row[:id]} is #{row[:name]}\"\nend\n</code></pre>\n\n<h2 id=\"reading-data-using-the-read-method\">Reading data using the read method</h2>\n\n<p>In addition to Cloud Spanner’s SQL interface, Cloud Spanner also supports\na read interface. Use the <a data-custom-type=\"google/cloud/spanner/client\" data-method=\"read-instance\">Spanner::Client#read</a> method to read rows from\nthe database, and use its <code>keys</code> option to pass unique identifiers as both\nlists and ranges:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\ndb = spanner.client \"my-instance\", \"my-database\"\n\nresults = db.read \"users\", [:id, :name], keys: 1..5\n\nresults.rows.each do |row|\n  puts \"User #{row[:id]} is #{row[:name]}\"\nend\n</code></pre>\n\n<h2 id=\"using-read-write-transactions\">Using read-write transactions</h2>\n\n<p>When an operation might write data depending on values it reads, you\nshould use a read-write transaction to perform the reads and writes\natomically.</p>\n\n<p>Suppose that sales of <code>Albums(1, 1)</code> are lower than expected and you want\nto move $200,000 from the marketing budget of <code>Albums(2, 2)</code> to it, but\nonly if the budget of <code>Albums(2, 2)</code> is at least $300,000.</p>\n\n<p>Use <a data-custom-type=\"google/cloud/spanner/client\" data-method=\"transaction-instance\">Spanner::Client#transaction</a> to execute both reads and writes\natomically at a single logical point in time. All changes are accumulated\nin memory until the block completes. Transactions will be automatically\nretried when possible. This operation makes separate API requests to begin\nand commit the transaction.</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\ndb = spanner.client \"my-instance\", \"my-database\"\n\ndb.transaction do |tx|\n  # Read the second album budget.\n  second_album_result = tx.read \"Albums\", [\"marketing_budget\"],\n                                keys: [[2, 2]], limit: 1\n  second_album_row = second_album_result.rows.first\n  second_album_budget = second_album_row.values.first\n\n  transfer_amount = 200000\n\n  if second_album_budget &lt; 300000\n    # Raising an exception will automatically roll back the transaction.\n    raise \"The second album doesn't have enough funds to transfer\"\n  end\n\n  # Read the first album's budget.\n  first_album_result = tx.read \"Albums\", [\"marketing_budget\"],\n                                keys: [[1, 1]], limit: 1\n  first_album_row = first_album_result.rows.first\n  first_album_budget = first_album_row.values.first\n\n  # Update the budgets.\n  second_album_budget -= transfer_amount\n  first_album_budget += transfer_amount\n  puts \"Setting first album's budget to #{first_album_budget} and the \" \\\n       \"second album's budget to #{second_album_budget}.\"\n\n  # Update the rows.\n  rows = [\n    {singer_id: 1, album_id: 1, marketing_budget: first_album_budget},\n    {singer_id: 2, album_id: 2, marketing_budget: second_album_budget}\n  ]\n  tx.update \"Albums\", rows\nend\n</code></pre>\n\n<h2 id=\"using-read-only-transactions\">Using read-only transactions</h2>\n\n<p>Suppose you want to execute more than one read at the same timestamp.\nRead-only transactions observe a consistent prefix of the transaction\ncommit history, so your application always gets consistent data. Because\nread-only transactions are much faster than locking read-write\ntransactions, we strongly recommend that you do all of your transaction\nreads in read-only transactions if possible.</p>\n\n<p>Use a <a data-custom-type=\"google/cloud/spanner/snapshot\">Spanner::Snapshot</a> object to execute statements in a read-only\ntransaction. The snapshot object is available via a block provided to\n<a data-custom-type=\"google/cloud/spanner/client\" data-method=\"snapshot-instance\">Spanner::Client#snapshot</a>:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\ndb = spanner.client \"my-instance\", \"my-database\"\n\ndb.snapshot do |snp|\n  results_1 = snp.execute \"SELECT * FROM users\"\n  results_1.rows.each do |row|\n    puts \"User #{row[:id]} is #{row[:name]}\"\n  end\n\n  # Perform another read using the `read` method. Even if the data\n  # is updated in-between the reads, the snapshot ensures that both\n  # return the same data.\n  results_2 = db.read \"users\", [:id, :name]\n  results_2.rows.each do |row|\n    puts \"User #{row[:id]} is #{row[:name]}\"\n  end\nend\n</code></pre>\n\n<h2 id=\"deleting-databases\">Deleting databases</h2>\n\n<p>Use <a data-custom-type=\"google/cloud/spanner/database\" data-method=\"drop-instance\">Spanner::Database#drop</a> to delete a database:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\ndatabase = spanner.database \"my-instance\", \"my-database\"\n\ndatabase.drop\n</code></pre>\n\n<h2 id=\"deleting-instances\">Deleting instances</h2>\n\n<p>When you delete an instance, all databases within it are automatically\ndeleted. (If you only delete databases and not your instance, you will\nstill incur charges for the instance.) Use <a data-custom-type=\"google/cloud/spanner/instance\" data-method=\"delete-instance\">Spanner::Instance#delete</a> to\ndelete an instance:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new\n\ninstance = spanner.instance \"my-instance\"\n\ninstance.delete\n</code></pre>","source":"google-cloud-spanner/lib/google/cloud/spanner.rb#L333","resources":[],"examples":[],"methods":[{"id":"new-class","type":"class","name":"new","title":["Google","Cloud","Spanner.new"],"description":"<p>Creates a new object for connecting to the Spanner service.\nEach call creates a new connection.</p>\n\n<p>For more information on connecting to Google Cloud see the\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>","source":"google-cloud-spanner/lib/google/cloud/spanner.rb#L366","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/spanner\"\n\nspanner = Google::Cloud::Spanner.new"}],"params":[{"name":"project","types":["String"],"description":"Project identifier for the Spanner service you\nare connecting to.","optional":true,"default":"nil","nullable":true},{"name":"keyfile","types":["String","Hash"],"description":"Keyfile downloaded from Google Cloud. If\nfile path the file must be readable.","optional":true,"default":"nil","nullable":true},{"name":"scope","types":["String","Array<String>"],"description":"The OAuth 2.0 scopes controlling\nthe set of resources and operations that the connection can access.\nSee <a href=\"https://developers.google.com/identity/protocols/OAuth2\">Using OAuth 2.0 to Access Google\nAPIs</a>.</p>\n\n<p>The default scopes are:</p>\n\n<ul>\n  <li><code>https://www.googleapis.com/auth/spanner</code></li>\n  <li><code>https://www.googleapis.com/auth/spanner.data</code></li>\n</ul>","optional":true,"default":"nil","nullable":true},{"name":"timeout","types":["Integer"],"description":"Default timeout to use in requests. Optional.","optional":true,"default":"nil","nullable":true},{"name":"client_config","types":["Hash"],"description":"A hash of values to override the default\nbehavior of the API client. Optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/spanner/project\">Google::Cloud::Spanner::Project</a>"],"description":""}]}]}