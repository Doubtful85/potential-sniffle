{"id":"google/cloud/errorreporting","name":"ErrorReporting","title":["Google","Cloud","ErrorReporting"],"description":"<h1 id=\"errorreporting\">ErrorReporting</h1>\n\n<p>Stackdriver Error Reporting counts, analyzes and aggregates the crashes in\nyour running cloud services. The Stackdriver Error Reporting\nInstrumentation client provides\n<a data-anchor=\"how-to-report-errors\" href=\"#how-to-report-errors\">a simple way to report errors</a> from your\napplication.</p>\n\n<p>For general information about Stackdriver Error Reporting, read\n<a href=\"https://cloud.google.com/error-reporting/docs/\">Stackdriver Error Reporting\nDocumentation</a>.</p>\n\n<p>The goal of google-cloud-ruby is to provide an API that is comfortable to\nRubyists. Authentication is handled by the client. You can provide the\nproject and credential information to connect to the Stackdriver Error\nReporting service, or if you are running on Google Cloud Platform this\nconfiguration is taken care of for you. You can read more about the\noptions for connecting in the <a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>\n\n<h2 id=\"how-to-report-errors\">How to report errors</h2>\n\n<p>You can easily report exceptions from your applications to Stackdriver\nError Reporting service:</p>\n\n<pre><code class=\"language-ruby\">require \"google/cloud/error_reporting\"\n\n# Configure Stackdriver ErrorReporting instrumentation\nGoogle::Cloud::ErrorReporting.configure do |config|\n  config.project_id = \"my-project\"\n  config.keyfile = \"/path/to/keyfile.json\"\nend\n\n# Insert a Rack Middleware to report unhanded exceptions\nuse Google::Cloud::ErrorReporting::Middleware\n\n# Or explicitly submit exceptions\nbegin\n  fail \"Boom!\"\nrescue =&gt; exception\n  Google::Cloud::ErrorReporting.report exception\nend\n</code></pre>\n\n<p>See the <a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/google-cloud-error_reporting/guides/instrumentation\">Instrumentation\nGuide</a>\nfor more examples.</p>","source":"google-cloud-error_reporting/lib/google/cloud/error_reporting.rb#L74","resources":[],"examples":[],"methods":[{"id":"new-class","type":"class","name":"new","title":["Google","Cloud","ErrorReporting.new"],"description":"<p>Creates a new object for connecting to the Stackdriver Error Reporting\nservice. Each call creates a new connection.</p>\n\n<p>For more information on connecting to Google Cloud see the\n<a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/guides/authentication\">Authentication\nGuide</a>.</p>","source":"google-cloud-error_reporting/lib/google/cloud/error_reporting.rb#L119","resources":[],"examples":[{"caption":"","code":"require \"google/cloud/error_reporting\"\n\nerror_reporting = Google::Cloud::ErrorReporting.new\n# ..."}],"params":[{"name":"project","types":["String"],"description":"Project identifier for the Stackdriver Error\nReporting service.","optional":true,"default":"nil","nullable":true},{"name":"keyfile","types":["String","Hash"],"description":"Keyfile downloaded from Google Cloud. If\nfile path the file must be readable.","optional":true,"default":"nil","nullable":true},{"name":"scope","types":["String","Array<String>"],"description":"The OAuth 2.0 scopes controlling\nthe set of resources and operations that the connection can access.\nSee <a href=\"https://developers.google.com/identity/protocols/OAuth2\">Using OAuth 2.0 to Access Google\nAPIs</a>.</p>\n\n<p>The default scope is:</p>\n\n<ul>\n  <li><code>https://www.googleapis.com/auth/cloud-platform</code></li>\n</ul>","optional":true,"default":"nil","nullable":true},{"name":"timeout","types":["Integer"],"description":"Default timeout to use in requests. Optional.","optional":true,"default":"nil","nullable":true},{"name":"client_config","types":["Hash"],"description":"A hash of values to override the default\nbehavior of the API client. Optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/errorreporting/project\">Google::Cloud::ErrorReporting::Project</a>"],"description":""}]},{"id":"configure-class","type":"class","name":"configure","title":["Google","Cloud","ErrorReporting.configure"],"description":"<p>Configure the default <a data-custom-type=\"google/cloud/errorreporting/project\">Google::Cloud::ErrorReporting::Project</a>\nclient, allows the <a data-custom-type=\"google/cloud/errorreporting\" data-method=\"report-class\">.report</a> public method to reuse these\nconfigured parameters.</p>\n\n<p>See the <a href=\"https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/stackdriver/guides/instrumentation_configuration\">Configuration\nGuide</a>\nfor full configuration parameters.</p>","source":"google-cloud-error_reporting/lib/google/cloud/error_reporting.rb#L166","resources":[],"examples":[{"caption":"","code":"# in app.rb\nrequire \"google/cloud/error_reporting\"\n\nGoogle::Cloud::ErrorReporting.configure do |config|\n  config.project_id = \"my-project-id\"\n  config.keyfile = \"/path/to/keyfile.json\"\n  config.service_name = \"my-service\"\n  config.service_version = \"v8\"\nend\n\nbegin\n  fail \"boom\"\nrescue => exception\n  # Report exception using configuration parameters provided above\n  Google::Cloud::ErrorReporting.report exception\nend"}],"params":[{"name":"yield","types":["block"],"description":"","optional":true,"nullable":false}],"exceptions":[],"returns":[{"types":["Stackdriver::Core::Configuration"],"description":"The configuration object\nthe Google::Cloud::ErrorReporting module uses."}]},{"id":"report-class","type":"class","name":"report","title":["Google","Cloud","ErrorReporting.report"],"description":"<p>Provides an easy-to-use interface to Report a Ruby exception object to\nStackdriver ErrorReporting service. This method helps users to\ntransform the Ruby exception into an Stackdriver ErrorReporting\nErrorEvent gRPC structure, so users donâ€™t need to. This should be the\nprefered method to use when users wish to report captured exception in\napplications.</p>\n\n<p>This public method creates a default Stackdriver ErrorReporting client\nand reuse that between calls. The default client is initialized with\nparameters defined in <a data-custom-type=\"google/cloud/errorreporting\" data-method=\"configure-class\">.configure</a>.</p>\n\n<p>The error event can be customized before reporting. See the example\nbelow and <a data-custom-type=\"google/cloud/errorreporting/errorevent\">Google::Cloud::ErrorReporting::ErrorEvent</a> class for avaiable\nerror event fields.</p>","source":"google-cloud-error_reporting/lib/google/cloud/error_reporting.rb#L217","resources":[],"examples":[{"caption":"<p>Basic usage</p>","code":"# in app.rb\nrequire \"google/cloud/error_reporting\"\n\nbegin\n  fail \"boom\"\nrescue => exception\n  # Report exception using configuration parameters provided above\n  Google::Cloud::ErrorReporting.report exception\nend"},{"caption":"<p>The error event can be customized if needed</p>","code":"require \"google/cloud/error_reporting\"\n\nbegin\n  fail \"boom\"\nrescue => exception\n  Google::Cloud::ErrorReporting.report exception do |error_event|\n    error_event.user = \"johndoh@example.com\"\n    error_event.http_status = \"502\"\n  end\nend"}],"params":[{"name":"exception","types":["Exception"],"description":"The captured Ruby Exception object","optional":false,"nullable":false},{"name":"service_name","types":["String"],"description":"An identifier for running service.\nOptional.","optional":true,"default":"nil","nullable":true},{"name":"service_version","types":["String"],"description":"A version identifier for running\nservice.","optional":true,"default":"nil","nullable":true},{"name":"yield","types":["block"],"description":"","optional":true,"nullable":false}],"exceptions":[],"returns":[]}]}